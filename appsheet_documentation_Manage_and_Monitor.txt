 Manage: The EssentialsOn the Manage page of the app editor, there's a lot you can do to customize your editing process, who can contribute to your app, and your app's deployment. When managing your app, it can also be useful to learn information for IT departments so you can communicate with other people in your company about your app.
The tabs available on the Manage page are summarized in the following table.



Tab
Description


Deploy

Run a deployment check to see if your app is ready to deploy, and if not, what needs to happen before it is ready. See Deploy: The Essentials.You also have the option to:

White label your app for either Android or iOS
Review plan requirements for you app
Broadcast notifications to your users




Versions
Review your app's versions and update it to a new version. You can also control app upgrades in this section. See App versions: The Essentials.


Monitor
Review your app's automation, usage statistics, audit history, and app performance to get a better idea of your app's performance and usage. See Monitor: The Essentials.


Author
Transfer the app to another account, giving them ownership. You can also copy or delete the app. See Author: The Essentials.




If you are using the legacy editor


The tabs available on the Manage page are summarized in the following table.



Tab
Description


Author
Transfer the app to another account, giving them ownership. You can also copy or delete the app. See Author: The Essentials.


Versions
Review your app's versions and update it to a new version. You can also control app upgrades in this section. See App versions: The Essentials.


Integrations
Integrate with external services, allow third-party apps to communicate with your app, and import data. See Integrate technology.


Deploy
Run a deployment check to see if your app is ready to deploy, and if not, what needs to happen before it is ready. You also have the option to white label your app for either Android or iOS. See Deploy: The Essentials.


Monitor
Review your app's automation, usage statistics, audit history, and app performance to get a better idea of your app's performance and usage. See Monitor: The Essentials.


Broadcast Notifications
Broadcast notifications to your users.






   Was this helpful?How can we improve it?YesNoSubmit   

 Manage authoring and collaborationManage authoring and collaboration for your app.

 
Author: The EssentialsTransfer an app between user accountsLet another user copy your app 

 Manage app versionsApp versions: The EssentialsVersion number managementUpdate an appUpgrade an appMaintain a stable version of an appView or restore a version of your app 

 Manage errors and warningsThe Errors page shows any errors and warnings that are present in your app, including an explanation of the type of error or warning and a suggestion for how to resolve the issue. If you have difficulties fixing your errors and warnings, there are several troubleshooting strategies you can try or reach out to other app creators in the AppSheet Community.

   Was this helpful?How can we improve it?YesNoSubmit   

 Create and view apps using Spec
Spec is a natural language interface that enables you to create an app by describing its requirements. The more you use Spec, the more it learns about your app requirements and customizes its suggestions.
The following sections describe how to use Spec to create and view apps:

Supported views using Spec
Start from an idea using Spec
View an app using Spec

Supported views using Spec
Spec supports the following views of your app:


List view - View the details of your app using natural language.



Graph view - View the details of your app and its relationships in a graphical form.



Start from an from an idea using Spec
To create an app from an idea using Spec:


Go to appsheet.com/spec.



Enter the type of data that your app manages, or select one or more of the suggestions. For example, you might enter or click products, organizations, or drivers.


Continue to refine your app.

Tips:


Use the suggestions provided by clicking on them or using them as a guide to enter more requirements.


Toggle between the List and Graph views.


View and interact with your app in the preview pane.





When you are finished, click Save & Refine.


Enter a name for your app and click Go to build your app.


A table schema with sample records will be created in your default cloud data service (for example, in Google Drive as a new Sheet).
When your app is ready, a dialog displays. You can try out your app in the right pane or click Customize your app to open the app in the AppSheet editor.
View an app using Spec
To view an app using Spec:

 Open the app in the app editor.
Select Settings > Data: Relationships.
    The app is displayed using Spec.
Toggle between the List and Graph views, as required.



We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy navigation

 To view an app using Spec:

Open the app in the app editor.
Select Info > Spec.
        The app is displayed using Spec.
Toggle between the List and Graph views, as required.



   Was this helpful?How can we improve it?YesNoSubmit   

 Print app dataMany mobile apps replace paper-based processes, but you may still want to print out data that has been collected by your AppSheet app.
Print AppSheet data using one of the following methods, based on your specific needs:

Using the spreadsheet. Most spreadsheets have a variety of options to format and print data. If you are using Google Sheets, there are add-ons that allow you to format and print your data.
Using AppSheet. You can use bots to send emails when changes occur along with printable attachments. If you run AppSheet in full-screen mode in a browser, you can use the browser Print (Ctrl-P) functionality to print the contents of the current view.

   Was this helpful?How can we improve it?YesNoSubmit   

 Copy appsTo copy an existing app:

Sign in to AppSheet.
Perform one of the following steps for the app you want to copy:
    
On the My Apps page, locate the app and select More > Copy.
Open the app in the editor and select Manage > Collaborate & Publish > Copy App.
        
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Open the app in the editor, select Manage > Author, and click Copy App.





Enter the following information in the Copy app dialog:
    


Field
Description


App name
Edit the name of the app. Defaults to the current name.


Category
Select a category from the drop-down. Defaults to the current category


Save app to
Select a data source from the drop-down.




Enable the options to copy the app data or file data (such as images), as required.
Click Copy app.

The app is created and opened in the AppSheet app editor.
   Was this helpful?How can we improve it?YesNoSubmit   

 Delete apps
Apps that you don't need anymore can be deleted in the editor. Deleting an app removes it from your account. Once deleted, it won't be accessible by you as the app creator or by your users.

Note: To restore a deleted app (up to 32 days after it was deleted), contact AppSheet Support. The app definition will be permanently deleted from the AppSheet database after 33 days.




Sign in to AppSheet.
Perform one of the following steps for the app you want to delete:
    
On the My Apps page, locate the app and select More  > Delete.
Open the app in the editor and select Manage > Collaborate & Publish > Delete App.
        
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Open the app in the editor, select Manage > Author, and click Delete App.





Confirm the delete operation.

   Was this helpful?How can we improve it?YesNoSubmit   

 AppSheet FAQ for the IT departmentAppSheet frequently asked questions (FAQ) for the IT department.
Architecture FAQ

How are AppSheet apps created?


Apps are created on the AppSheet website. Each app is based on one or more "tables". It’s often the case that each table tied to a spreadsheet, but other forms of structured data can be used instead. The rest of the app is defined via configuration options. There is no code involved, so apps can be created in minutes.



How are AppSheet apps distributed?

Apps are distributed by sending an install email to desired users with an install link. Users open the install email on a mobile device, click on the install link, and can install the apps instantly.



What is the high-level architecture of AppSheet?


Each mobile app is based on structured backend data, typically a spreadsheet hosted on a cloud storage system like Google Drive, Dropbox, or Office 365. On the mobile device, a copy of the data is cached locally in order to permit offline operation. Whenever changes are made in the app, or when the users explicitly choose to sync the app, the changes from the app are moved to the backend spreadsheet and vice versa. All communication between the app and the backend data happens through the cloud-hosted AppSheet web service. 



Where is AppSheet hosted?


AppSheet's web service is hosted on Google Cloud's web hosting infrastructure.




Can AppSheet be hosted on-premise within the company?


AppSheet apps can run from on-premise data, but the AppSheet platform is hosted in the cloud. It is not an on-premises service.




Is AppSheet reliable?

The AppSheet web service is highly reliable with 99.99% monthly uptime. The reliability derives from both the redundant cloud architecture as well as the reliability of the underlying Google Cloud infrastructure services. The greatest source of reliability concerns for a mobile app stem from connectivity issues. AppSheet is explicitly designed for environments with bad or intermittent connectivity, and the data synchronization technology handles various kinds of failures seamlessly without data loss.






Is each app separately deployed via the iOS or Android app store?

No. Mobile apps run on the device within a common "host" app called AppSheet. This host app is already available in the iOS and Android app stores. This allows any new app to be instantly deployable.



Data Architecture FAQ

What sources of data can AppSheet access?

AppSheet apps can access spreadsheet data from Google Drive, Office 365, Dropbox, Box, and Smartsheet. More data sources are being added actively. AppSheet also supports connectors to Salesforce and SQL databases for Enterprise subscription plans.



Do we have to use data in a spreadsheet?


AppSheet is meant for non-developers to easily build apps, which is why we have emphasized access to spreadsheets. We also support more traditional enterprise data sources for Enterprise subscription plan app creators.




Can you connect to our corporate database or resources behind a firewall?


Not directly. The AppSheet architecture permits our service to interact with data sources via a web service that acts as a proxy to the actual data. If the actual data is behind a firewall, you (or your IT department) will need to create a web service that acts as a proxy for the data. This is a relatively straightforward task for a web developer, and we can help enterprise customers with sample code for this proxy service.



Mobile Platform FAQ

What mobile platforms do you support?


AppSheet apps run on iOS and Android devices. We encourage iOS version 8.0 and higher, and Android version 4.3 and higher. Lower versions can cause subtle bugs or performance problems in certain scenarios.




Can the apps run in a browser?


Yes. While we primarily focus on mobile devices, many AppSheet customers also run their apps in a web browser, usually within an iframe. In fact, on unsupported mobile platforms like Windows Phone, we recommend running within a browser. Most of the app functionality is supported in a browser (except offline image caching and barcode scanning). We recommend a modern browser, and the apps work best on Chrome. AppSheet does not work on IE versions lower than V10.0.



Functionality FAQ


Do you support feature X?


We add features to AppSheet at a rapid rate; it isn't uncommon for us to unblock a customer by adding a new feature in a couple of weeks. There is an active AppSheet community that drives and prioritizes our feature investments. All features are initially announced on the community for trial and added to the Appsheet documentation.




Security FAQ

Where can I learn about the security model?


We have written a short article describing different aspects of the AppSheet security model. We're happy to share further details with IT experts.




What data does AppSheet store on its servers?


The AppSheet service records user signup information and access tokens in order to be able to access backend spreadsheet data. The definition of each app is also stored. The actual data used by each app is not copied to the AppSheet service. Instead, it passes through the AppSheet service as it flows between the mobile device and the backend cloud storage system chosen by the customer.
AppSheet does record usage events and also logs data updates in order to support diagnostics, debugging, analytics, and billing. We're introducing an option for customers to limit the duration for which this information stays in the system logs.




Is AppSheet SOC compliant?

Yes. AppSheet is SOC 2 Type 2 audited. Our SOC Report is available to customers under NDA and upon request. See SOC 2.


Support and Services FAQ

What is the response time for product support questions?


Our user community forum is the venue for most support questions. Not only is every member of our team actively engaged with user questions, we also have power users: community moderators who help all members of the AppSheet community with questions and issues. Most issues are responded-to within hours and resolved within the day. We also offer prioritized support for customers in higher subscription plans.







Do you provide professional services for app development?


We try to focus on core platform development. For some key strategic engagements, we can help customers with app development. We prefer our customers work with one of our solution partners: professionals who are experts on the AppSheet platform. Depending on your needs, we can identify suitable solution partners.






   Was this helpful?How can we improve it?YesNoSubmit   

 Define governance policiesWhen you start creating multiple apps, either as an individual app creator or as a member of a team or organization, there are typically constraints and guidelines that should be applied to every app created. App governance policies are the means by which to express these constraints and guidelines.
The typical reasons to set up app policies are:

Design consistency
Corporate compliance

Manage policies as described in the following sections:

What is a policy?
Who can add policies?
When are policies auto applied in the app editor?
Access the Policies page
Add a predefined policy
Add a custom policy
Configure the policy
Review policy compliance
Edit a policy
Delete a policy

What is a policy?


A policy is a rule that limits how AppSheet apps are created, managed, and distributed. For example, policies might define the following limits:

Every app must require users to sign in.
Data can't be deleted though an AppSheet app.
Only certain people can mark apps as deployed.
Apps can only be shared to a specific email domain.

Policies can be applied at the organization, team, or individual level.
When you configure a policy, you define three important components:

Condition: A constraint that is checked on each app. See also Condition expression reference for governance policies. 
Severity:  Error or warning. This tells the platform how to handle the condition if not satisfied. 
Stage: When should the policy be checked? 

There are also some other options, including descriptive messages
You can add a predefined policy or a custom policy. See also Predefined policy templates.
Who can add policies?

Any individual AppSheet user account has permission to add individual policies.
Team root and team admin accounts can create and manage team policies, and can view organization policies.
Organization admin accounts can create and manage organization and team policies.

Organization-level policies take precedence over team-level policies, but do act as "and" clauses for team policies that have the same target (component). AppSheet will always apply the most restrictive policy statement that can be produced when combining the conditions of organization and team policies on the same component. 
For example:

If an organization policy restricts all external users and team A’s policy restricts external users only from foo.com, then all external users are restricted for all users in the organization.

If a organization policy restricts external users from foo.com and team A’s policy restricts all external users, then all external users are restricted for members of team A and only external users from foo.com are restricted for other teams (B, C, and so on).


Suggestions:

When you add a policy, start by defining a lower severity level (such as Warning), so you don't immediately block users that may already be out of compliance. This is important if you want to preserve the availability of the apps they created.
Experiment with the predefined policies. If you want to define a policy that is not predefined, try using the custom policies. Contact AppSheet Support if you need assistance. 


Note: Existing apps will continue to function for users until they attempt an activity that is in violation of the policy. If you want a policy to take effect right away, set Stage to Enforce always.



When are policies auto applied in the app editor?
AppSheet auto applies a policy on app editor load if the Condition setting is defined using the following format: [field] = constant This includes policies whose Condition setting contains multiple [field] = constant statements that are combined together in an AND function.
For example, the Require sign-in policy has the following condition:

[AuthRequired] = true


This condition will be auto applied in your app and turn on (and prevent you from changing) the Require user signin? setting in the app editor. 
Similarly, the Enforce FedRAMP compliance policy has the following condition:

AND(
   [EnableFirebase]=false,
   [EnableMapsAndGeocoding]=false,
   [ScanningServiceName]="System Default: Google MLKit"
)
The condition will be auto applied and configure (and prevent you from changing) the following External service settings:

Turn off the Allow Firebase setting to prevent the use of Firebase for branding apps
Turn off the Allow maps and geocoding setting to prevent the use of maps and geocoding
Restrict the Barcode/QRcode scanning service setting to System Default to prevent the use of external barcode scanners

Access the Policies page

Organizations are only supported for Google Workspace users with AppSheet Enterprise accounts. Teams are only supported for users with AppSheet Enterprise accounts. See AppSheet pricing.

Access the Polices page to view and manage the policies that are in effect for your organization, team, or account by selecting one of the following:

Admin > Policies in the top navigation 
Policies from the account profile drop-down

The Policies page displays.

As highlighted in the figure, the Policies page allows admins to:

View the policies that are in effect for your organization, team, or account.
Add a new predefined or custom policy for your organization, team, or account.
Edit or delete a policy.


Only organization admin accounts can add, edit, or delete organization policies. Only organization admin, team root, or team admin accounts can add, edit, or delete team policies.

Add a predefined policy
To add a predefined policy:

Access the policies page.
Select the scope: Organization, Team, or Account.
Click + Organization policy,  + Team Policy, or + Account Policy to add an organization, team, or account-specific policy, respectively.
Select a predefined policy template from the Policy Template drop-down.
Click Next.
Configure the policy.
Review policy compliance.
Click Save.

Add a custom policy
The custom policy template lets you create a rule based on a specific component of the AppSheet service. 
To create a custom policy:

Access the policies page.
Select the scope, Organization, Team, or Account.
Click + Organization policy,  + Team Policy, or + Account Policy to add an organization, team, or account-specific policy, respectively.
Select Custom policy from the Policy Template drop-down.
Click Next.
Configure the policy.
Review policy compliance.
Click Save.

Configure the policy
Configure the policy settings described in the following table.







Setting


Description




Name


Name of the policy that will appear on the Policies page.




Component


Custom policies only. Select the AppSheet component impacted by the custom policy. Almost every aspect of the app definition can be governed by policies.




Condition


Constraint that is checked on each app. For the predefined templates, the condition is defined. For example, the Require sign-in policy has the condition: [AuthRequired] = true
Modify the condition expression, if required.
For a list of column names that you can include in the condition expression and the list of functions that are not supported for use in the condition expression, see Condition expression reference for governance policies. 


Note: The syntax for conditions is identical to the expression syntax used in the rest of AppSheet. 





Severity


Flag that specifies how to handle the condition if not satisfied. Valid values are Error or Warning.



Target

Apps that are targeted by the policy. Valid values include All Apps, Prototype Apps, or Deployed Apps.




Stage


Stage that the policy should be checked. Valid values include:

Check on App Edit - Flags non-compliant behavior when the app is edited.
Check on Deployment - Flags non-compliant behavior when the app is deployed.
Enforce always - Flags non-compliant behavior at runtime as soon as the policy is saved.

Enforce always is the default for most policies. However, for a subset of policies, Check on Deployment may be more appropriate to make sure an activity is completed before the app is deployed (such as, Apps must have documentation).

Note the following: 

Do not set this value to Check on Deployment if Target is set to Deployed Apps.
If Stage is set to Enforce always:

It can take up to 15 minutes before the policy is enforced.
At this time, apps that use files or images may not be completely shut down. Contact AppSheet Support if you need assistance.








Description


Description of the policy that will appear on the Policies page.




Success Message


Message to be displayed if policy is successfully adhered to.




Failure Message


Message to be displayed if the policy is violated.





Review policy compliance
When you configure the policy, in the right pane of the Define an App Policy dialog, you can review policy compliance to confirm the results are as expected for each version (latest and stable) of your app before you save the policy. 
For example:

As shown, apps are organized into two categories: Non-compliant and Compliant. For non-compliant apps, the impact to the app is dependent on the policy severity and stage settings.



Policy severity
Description


Error
App is prevented from being deployed or edited. The app may become unavailable to users if Stage is set to Enforce Always.


Warning
Warning will be shown when deploying or editing the app.




If an app version is unexpectedly compliant or non-compliant, review the app or policy configuration to ensure that it is operating as originally intended.

Edit a policy

Note: You must have an organization admin account to be able to edit organization policies. You must have an organization admin, team root, or team admin account to be able to edit team policies.

To edit a policy:

Access the policies page.
Select the scope: Organization, Team, or Account.
Select More > Edit for the policy you want to edit.
    The Define an App Policy dialog displays.
Edit the policy configuration, as desired.
Review policy compliance.
Click Save.

Delete a policy

Note: You must have an organization admin account to be able to delete organization policies. You must have an organization admin, team root, or team admin account to be able to delete team policies.

To delete a policy:

Access the policies page.
Select the scope: Organization, Team, or Account.
Select More > Delete for the policy you want to delete.
    The Define an App Policy dialog displays.
Click Delete Policy to confirm the action.

   Was this helpful?How can we improve it?YesNoSubmit   

 Predefined policy templatesYou can create policies to control the behavior of almost every aspect of the creation, management, and distribution of AppSheet apps.
When defining an app policy, you have two options: 

Use a predefined policy template. See Add a predefined policy.
Write your own custom policy from scratch. See Add a custom policy.

Using a predefined template can help you to get a configured policy running quickly. You can also use a template as a starting point for writing your own customized version of a policy.
To write your own, more complex policies, you may want to create your own custom policy from scratch.
App policy templates




Template name


Description




Acceptable image resolution


Requires that images captured in apps meet a minimum specified resolution. See also Control image size.




Apps must have documentation


Requires that apps include documentation before they can be deployed. See App documentation on the About page.



Disable AppSheet databases



Prevents use of AppSheet databases, as follows:



App creators are restricted from including AppSheet database tables in their apps
End users are restricted from using apps that are built with AppSheet databases

      See Disable AppSheet databases.


Disable Chat apps
Prevents app creators from enabling their AppSheet apps to run as Chat apps. See Prevent app creators from enabling Chat apps with AppSheet.


Disable external integration through app API

Prevents app creators from setting up API-based integration with external cloud services that send data to an app.
Enabling this policy disables use of the AppSheet API. See Prevent app creators from enabling the API.



Disallow webhook

Prevents app creators from using webhooks in their apps. See Prevent app creators from using webhooks.




Enable offline use

Requires that apps are configured to run offline by turning on The app can start when offline when configuring settings for offline use. See Enable app to start when offline.



Enforce FedRAMP compliance

Requires that all apps only use FedRAMP-compliant services and features.



Must sync-on-start


Requires that apps refresh their data each time they start. See Sync on start.




Only users from specific domain


Only allows users from specific domains to access apps.
Note: When configuring this policy template, you’ll need to replace ourdomain.com and subdomain.ourdomain.com with the specific domains to allow.




Prevent row delete


Prevents apps from deleting rows of data in their connected data sources by ensuring the Deletes option is always unchecked in table settings. See Control add, update, and delete operations.



Require direct sharing

Requires that access is only granted to users explicitly shared to an app in the sharing dialog. Only individual users users added directly to an app can access it, ensuring that sign-in is required and all access is explicitly managed through the sharing dialog. Restricts app access as follows:

Require user sign-in
Prevent all signed-in users from accessing the app (disable Allow all signed-in users)
Disable Require domain authentication


Note: To restrict sharing of apps with external users, use the Restrict external app sharing policy described below.



Require sign-in



Restricts public access to apps by requiring users to sign in (authenticate) to access an app.
Note: To restrict the authentication provider used during sign-in, use the Restrict authentication provider policy.



Restrict app sharing


Restricts app sharing as follows:

Prevents the sharing of apps with an entire domain using the Share dialog
Limits the number of users that the app can be shared with using the Share dialog (defaults to 5, but can be customized)

See also: Share: The Essentials


Note: To restrict sharing of apps with external users, use the Restrict external app sharing policy described below.



Restrict authentication provider

Restricts user sign-in to one authentication provider. Google is the default.
To specify the authentication provider, use one of the following strings:

apple
box
dropbox
google
microsoft
salesforce
smartsheet

Note:  To fully restrict access by users outside of the owner's domain, use this policy in conjunction with the Require sign-in policy.



Restrict Automation email attachments
Prevents app creators from adding an attachment to emails that are sent from automations. See Prevent app creators from adding email attachments in automations.



Restrict data sources


Restricts app access to specific data sources by data source name.



Restrict external app sharing

Restricts app sharing to only emails or domains internal to the domain belonging to the app owner's organization. For an AppSheet organization, this includes all secondary domains managed by the parent Google Workspace account, if applicable.
Note:  To fully restrict access by users outside of the owner's domain, use this policy in conjunction with Restrict authentication provider (described previously).



Restrict external data sources and auth domains

Prevents app creators from using external data sources and authentication domains in an app.
For Workspace users: Only Workspace authentication and data sources are allowed. 
For non-Workspace users: The app editors are only allowed to attach the data sources to an app or integrate with the auth domains with the apps that are the same as the app owner's email domain. 
See also:

Prevent app creators from using external data sources
Prevent app creators from using external authentication domains





Restrict providers attachable to apps


Restricts app access to specific data source types.
To specify data source types, use one or more of the following strings:

airtable
apigee_api
apple
box
data_studio
database (all cloud and on-premises databases)
dropbox
google
google_calendar
google_tables (see also Disable AppSheet databases)
microsoft
odata
salesforce
smartsheet




Restrict use of external apps

Blocks users from accessing apps created externally to your organization.
For Workspace users: Your "organization" is defined as your primary domain managed in Workspace. If an app is created in the same Workspace organization or domain, it is considered to be internal and will not be blocked. 
For non-Workspace users: Your "organization" is defined by your email domain.




Restrict who can deploy apps


Restricts app deployment to specific app creators.
Note: You will need to specify which app creators are allowed to deploy apps by editing the LIST(11111, 11122) function in the policy condition expression.




Run as app creator


Ensures all apps run using the app creator’s identity to access connected data sources by ensuring that the access mode is set to "as app creator". See Access mode: as app creator or app user.




   Was this helpful?How can we improve it?YesNoSubmit   

 Condition expression reference for governance policiesThe following lists the column names and types, and the valid values that you can include in the Condition expression when defining governance policies. The column names are organized by AppSheet component, such as actions, settings, tables, and so on.


The following AppSheet functions are not supported for use in the Condition expression: 
EXTRACT(), EXTRACTCHOICE(), EXTRACTDATES(), EXTRACTDATETIMES(), EXTRACTDOMAINS(), EXTRACTDURATIONS(), EXTRACTEMAILS(), EXTRACTHASHTAGS(), EXTRACTMENTIONS(), EXTRACTNUMBERS(), EXTRACTPHONENUMBERS(), EXTRACTPRICES(), EXTRACTTIMES(), HERE(), HYPERLINK(), INPUT(), LAT(), LATLONG(), LATLONGDISTANCE(), LINKTEXT(), LINKTOAPP(), LINKTOFILTEREDVIEW(), LINKTOFORM(), LINKTOPARENTVIEW(), LINKTOROW(), LINKTOVIEW(), LINKURL(), LONG(), NOW(), OCRTEXT(), RANDBETWEEN(), SNAPSHOT(), TEXTICON(), TIMENOW(), TODAY(), UNIQUEID(), UTCNOW(), and XY()
Also, the CONTEXT() function is only supported using the following keywords: AppName or OwnerEmail
The following AppSheet functions are not supported for use in the policy Condition setting when Stage is set to Enforce Always: 
USEREMAIL(), USERLOCALE(), USERNAME(), USERROLE(), USERSETTINGS(), and USERTIMEZONE(). 


 





AppSheet component
Column name
Column type
Description


Actions
ActionType
Enum

Type of action. See Action types. Valid values include:

ADD_RECORD
ADD_RECORD_TO
CALL
COMPOSITE
COPY_EDIT_ROW
DELETE_RECORD
EDIT_RECORD
EMAIL
EXPORT_VIEW
IMPORT_FILE
NAVIGATE_APP
NAVIGATE_BACK
NAVIGATE_DIFFERENT_APP
NAVIGATE_URL
OPEN_FILE
REF_ACTION
SET_COLUMN_VALUE
SMS
TRIGGER_PROCESS




API settings
EnableAPI
Yes/No
Setting that specifies whether the API is enabled. See Enable the API for cloud-based service communication.


App settings
Description
Text
Description of the app. See App properties.


App settings
DisableAutoUpdate
Yes/No
Setting that specifies whether Automatic updates is turned off. See Can I have my app update automatically?


App settings
Id
Text
App ID. View the App ID when enabling the API as described in Enable the API for cloud-based service communication.


App settings
IsPublic
Yes/No
Setting that specifies whether the app is public. See Share your app with anyone (public access).


App settings
IsTeamPublic
Yes/No
Setting that specifies whether the app is a team sample. See Share resources with your team.


App settings
Name
Yes/No
Name of the app. See App properties.


App settings
OwnerId
Number
ID of the app owner. 


App settings
Title
Text
Short description of the app. See App properties.


App settings
UsePublicOwner
Yes/No
Setting that specifies whether Use public app owner is turned on to display the public app owner to users of the app. See Set the public app owner.


Behavior settings
DelayedSync
Yes/No
Setting that specifies whether Delayed sync is turned on to queue up changes until you explicitly choose to sync. See Delayed sync.


Behavior settings
DeltaSync
Yes/No
Setting that specifies whether Delta sync is turned on to maintain timestamps for the last time each table was fetched. See Configure the data caçhe settings.


Behavior settings
EnableCaching
Yes/No
Setting that specifies whether Server caching is turned on to maintain cached copies of read-only tables for up to five minutes. See Configure the data cache settings.


Behavior settings
FiveButtonFooter
Yes/No
Setting that specifies whether Allow five views in the bottom navigation bar is turned on. See System Buttons.


Behavior settings
FullOfflineCaching
Yes/No
Setting that specifies whether Store content for offline use is turned on so that AppSheet caches images and documents for offline use. See Cache images and documents.


Behavior settings
HideDefinition
Yes/No
Setting that specifies whether Hide app definition is turned on when sharing samples apps with your team. See Share resources with your team. 


Behavior settings
HighPrecisionGeocoding
Yes/No
Setting that specifies whether Use my Google Maps integration is turned on. See Map view configuration settings.


Behavior settings
LaunchOffline
Yes/No
Setting that specifies whether The app can start when offline is turned on to allow the app to start when there is no internet connection. See Enable app to start when offline.


Behavior settings
PullToSync
Yes/No
Setting that specifies whether Pull to refresh is turned on. See General configuration settings.


Behavior settings
SyncOnStart
Yes/No
Setting that specifies whether Sync on start is turned on to sync data every time the app starts to make sure the user has the latest data. See Sync: App to Cloud.


Bots
Disabled
Yes/No
Setting that specifies whether the bot automation is disabled. See Enable or disable a bot.


Chatbot settings
EnableChatbot
Yes/No
Setting that specifies whether Chat bots are enabled. See Chat apps: The Essentials.


Columns
Name
Text
Name of the column. See Columns: The Essentials.


Columns
Type
Text
Type of column. See Column data types.


Description
DesignDetails
Text
Design details of the app. See App documentation.


Description
IsWhitelabel
Yes/No
Setting that specifies whether the app is branded. See Branded apps: Establish your own branding.


Description
Purpose
Text
Purpose of the app. See App documentation.


Security
AllowAllSignedInUsers
Yes/No
Setting that specifies whether all signed-in users have access. See Share you apps with all signed-in users.


Security
AuthDomain
Text
Display name of the authentication domain. See Domain integration: The Essentials.


Security
AuthDomainSource
Text
Name of authentication domain source. See Domain integration: The Essentials.


Security
AuthGroup
Text
Name of authentication group.


Security
AuthGroupId
Text
ID of authentication group.


Security
AuthProvider
Text
Authentication provider. See Require sign-in: The Essentials.


Security
AuthRequired
Yes/No
Setting that specifies whether authentication is required. See Require sign-in: The Essentials.


Security
AutoBackgroundUpdate
Yes/No
Setting that specifies whether Automatic updates is turned on. See Can I have my app update automatically?


Security
CanMakePublic
Yes/No
Setting that specifies whether the Yes, I am authorized to set up an insecure app is turned on. See Share app with anyone (public access).


Security
ConsentAuthorizedPublicApp
Yes/No
Setting that specifies whether the Yes, I am authorized to set up a public app is turned on. See Share you apps with all signed-in users.


Security
ConsentPublicApp
Yes/No
Setting that specifies whether the Yes, this is a public app is turned on. See Share app with anyone (public access) and Share you apps with all signed-in users.


Security
DisableAppSharing
Yes/No
Setting that specifies whether the Disable Share button is turned on. See System Buttons.


Security
DomainAuthRequired
Yes/No
Setting that specifies whether Require domain authentication is turned on. See Domain integration: The Essentials.


Security
EncryptLocalData
Yes/No
Setting that specifies whether Encrypt device data is turned on.


Security
RequireImageAndFileUrlSigning
Yes/No
Setting that specifies whether Require Image and File URL signing is turned on. See External URL for image files.


Security
RequireUserConsent
Yes/No
Setting that specifies whether Require user content is turned on to require users to consent before using the app. See Security: The Essentials.


Security
SecureImageAccess
Yes/No
Setting that specifies whether Secure Image access is turned on to not cache an image in Cloud CDN. See Document and image caching.


Security
SecurePDFAccess
Yes/No
Setting that specifies whether Secure PDF is turned on to not cache a PDF file in Cloud CDN. See Document and image caching.


Security
TreatAllDataAsPII
Yes/No
Setting that specifies whether Treat all data columns as Sensitive is turned on. See Sensitive Personally Identifiable Information (PII) data policy.


Tables
CloudObjectStore
Text
Name of the cloud object store. Configure a relational database as a cloud object store.


Tables
DataAccessMode
Text

Access mode. See Access mode: as app creator or app user. Valid values include:

as app creator (default if invalid or no value provided)
as app user




Tables
DataSourceName
Text
Name of data source. See Summary of data source types.


Tables
DisableAutoUpdate
Yes/No
Setting that specifies whether automatic updates is turned off. See Can I have my app update automatically?


Tables
Name
Text
Name of the table. See Table: The Essentials.


Tables
ProviderName
Text
Name of the provider. See Summary of data source types.


Tables
UpdateMode
Enum

Type of updates allowed in a table. See Control add, update, and delete operations. Valid values include:

ADDS_AND_DELETES
ADDS_AND_UPDATES
ADDS_ONLY
ALL_CHANGES
DELETES_ONLY
READ_ONLY
UNASSIGNED
UPDATES_AND_DELETES
UPDATES_ONLY




Tasks
Type
Enum

Type of automation task. See Supported task types. Valid values include:

AppsScript
Email
MakeDoc
Notification
Semantic
SMS
TakeAction
Webhook




UserDomains
Domain
Text
Name of the user domain. See Domain integration: The Essentials.


UserWhiteList
Email
Text
User email allowlist. See Share: The Essentials.


UXSettings
HideSystemButtons
Yes/No
Setting that specifies whether system actions are hidden. See Use system actions.


UXSettings
PhotoResolution
Text
Resolution used for images. See Capture images.


UXSettings
RespectShowIfEverywhere
Yes/No
Setting that specifies whether Apply show-if constraints universally is turned on. See Scope of Show_If.


UXSettings
ShowPreviewRollouts
Yes/No
Setting that specifies whether the Preview new features setting is turned on to gain access to app features that are in the AppSheet preview program.





   Was this helpful?How can we improve it?YesNoSubmit   

 What is a branded app?A branded app in AppSheet is a native mobile app with your own branding that you can publish directly in an app store or distribute on your own. The installation and use of a branded app is similar to the millions of other apps in the app store.
To learn more about the different aspects of deploying your app, see Deploy.
What platforms are supported?
Both iOS and Android are supported for branded apps.
How does a branded app differ from my regular AppSheet app?
By default, your AppSheet app is hosted on a mobile device within an existing mobile host app. Since this mobile host app is already available in the app stores, you can create apps and use apps almost instantly.
When you create a branded version of your app, it's effectively a copy of the AppSheet host app, but it has your branding and only runs your app. You take on the extra time and effort needed to publish the app in the relevant app store. However, you gain the discoverability of apps in the app store, and your users will benefit from the familiarity of the app installation process.
The app will continue to function in exactly the same way as before. Updates to the app definition will be picked up automatically as usual. Once in awhile, if AppSheet releases any significant new functionality that requires a new version of the branded app (e.g., integration with push notifications), you'll need to regenerate and republish your branded app.
Branded app restrictions
While branding an app does remove most AppSheet branding, there are places where AppSheet will still be visible (during sign-in, and in error messages, for instance).
Any apps submitted to the Apple App Store will be reviewed by Apple. We can’t guarantee your app will pass review or become available in the App Store.
Similarly, publishing apps in the Google Play store requires approval by Google. We can't guarantee the app you submit will pass review or ever be available in the Google Play Store.
The use of the branded apps requires an AppSheet Core plan (10 licenses) or a Publisher Pro plan. Consult the AppSheet pricing page for more details.
   Was this helpful?How can we improve it?YesNoSubmit   

 Create and deploy branded apps for AndroidMake and deploy an app with customized branding to the app store for Android. See also What is a branded app?
To learn more about the different aspects of deploying your app, see Deploy.

How do I create a branded app?
How do I distribute my app?
Make updates to your app in Google Play Store

How do I create a branded app?
To brand your AppSheet app for Android:

Open the app in the AppSheet editor.
Open the Manage  > Deploy tab and expand the Branded Apps section.
Turn on Brand this app?
Expand the For Android section.
Optionally, configure the settings.
Click Create a branded version of this app for Android devices

This starts the branded app creation process, which can take up to 24 hours.
You'll receive an email with links to download your App Bundle and APK files once the process is complete. Note that these links are only valid for 30 days, please download and keep your files somewhere accessible and do not use these links to share the app with your users.
The App Bundle can be uploaded to the Google Play Store and the APK file can be used to directly install your app on Android devices.
How do I distribute my app?
The most popular way to distribute a broadly available Android app is through the Google Play Store. Keep in mind that if you deploy to the Play Store, anybody will be able to download and install your app.

To publish a branded app built by AppSheet, you'll first need to register for a developer account with Google. To do so, visit the following page and follow the instructions: https://play.google.com/console/u/0/signup.
After you set up a developer account, you'll be able to publish your branded app. To do so, visit the Google Play Developer Console (https://play.google.com/apps/publish) and click on the Create app button located in the top right.
This will guide you through a process that will let you upload the App Bundle file to the store. It will ask you for some other information before you will be allowed to publish the app, including screenshots, a short description, icons, banners, and more.
When prompted, enable App signing by Google Play.
At the Does your app use advertising ID? prompt, select No.

After a few hours, your users will be able to download your app from the Google Play Store.
Make updates to your app in Google Play Store
Most changes you make in the AppSheet editor don't require you to upload a new version of your app to the Google Play Store. Your users will get your changes the next time they sync the app. Changes to the app's name or icon are exceptions and will require you to upload a newly generated version of your app. However, since some of AppSheet's internal improvements and new features can't be fetched through a sync, it is recommended that you upload the latest version of your app to the store about once a year to ensure your app is kept current.
To make updates to your app in Google Play Store:

Go to Manage  > Deploy > Branded Apps > Android and click Disable or update the branded version of this app for Android devices. Don't worry, this won't affect existing users.
Click Create a branded version of this app for Android devices to start the branding process.
    You'll receive an email with links to download your App Bundle and APK files within 24 hours.
Go to your app's page in the Play console and then select Production > Create new release.
The rest of the process is similar to when you first uploaded your app. If your app was originally uploaded as an APK (for apps that were originally uploaded to the store before Aug 1 2021), upload the update as an APK as well and don't opt in to Play App Signing. If your app was originally uploaded as an App Bundle, continue to use App Bundles to upload updates.

In some cases, you may only want to deploy your app to a specific group of users, for example to employees in an organization.

You can send the APK file via email, share it through a cloud file system, or even upload it to your website and share its URL. Your users will have to download the APK file, and open it on their Android phone.
Before installation, it's important your users enable installation of apps from unknown sources. Typically, this setting is located either under the Security or Applications category in the settings app of your android phone. Enabling this setting is required for installing apps that did not come from the Google Play store.
For more info on how to install an app using an APK file, refer to the following article: http://www.androidauthority.com/how-to-install-non-market-third-party-apps-on-your-phone-31494/

   Was this helpful?How can we improve it?YesNoSubmit   

 Create and deploy branded apps for iOSMake and deploy an app with customized branding to the app store for iOS. See also What is a branded app?
To learn more about the different aspects of deploying your app, see Deploy.

Restrictions
Choose an app
Create Apple developer account
Creat an application ID
Create the signing identity (certificate)
Export the certificate
Update device IDs
Create provisioning profiles
Build the app
Test on your own device
Publish to the iOS App Store
Enterprise deployment
Why is "Delete my account" available to iOS branded app users?

Restrictions
An Apple computer is required to create an iOS branded app. Also, any apps submitted to the Apple App Store are reviewed by Apple. AppSheet does not and cannot guarantee that an app will pass review or be available in the App Store.
Choose an app
Choose an app that you want to brand. For example, the Class Assignments app template is used in this example. Make sure the app has a high resolution icon that is perfectly square (check that the pixel count for height matches the pixel count for width). You will want to use an icon that is at least 1000 pixels by 1000 pixels. If the icon is not square, the branded app process will fail. You can try exporting and re-saving the icon file using a standard image editor (for example, Preview on MacOS) to make sure it is compliant.
Create Apple developer account
Create an Apple developer account. This is necessary because it is the only way to get the appropriate keys, signing identities, and provisioning profiles (all of which will be explained and described in later steps). Follow the instructions on how to create an Apple Developer account at this link: https://developer.apple.com/register. Keep in mind that an Apple developer account costs $99 USD per year. You need to complete this step before you can do anything else in this tutorial.
Create an application ID
You need to create an application ID for your application. An application ID is a unique identifier that Apple will use internally to identify your app. Follow this link: https://developer.apple.com/account/resources/identifiers/list, and click + icon to create a new identifier.
Select App IDs for the identifier type.

 
On the following page, select the App type and click Continue. 

Next, let's enter the name of your app. You should fill the Description field with a name that will allow you to easily identify your app. It will only be shown to you. For example: Class Assignments
Following that, select Explicit App ID, and enter a unique identifier for your application in the Bundle ID field. For example: com.mycompanyname.classassignments
where mycompanyname is usually the name of your company. More information on selecting a Bundle ID for your app is noted at https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier?language=objc

Next, scroll down to the Capabilities section and select Push Notifications if you want your app to receive push notifications. Note that this optional step requires extra configuration later. Click Register to register your new App ID.
Create the signing identity (Certificate)
Now you need to create a signing identity for your application. A signing identity certifies that the app you upload to Apple, or install on an i-Device, is one made by you. Navigate to the following URL: https://developer.apple.com/account/ios/certificate/, and click the + sign to create a new certificate.

Select the App Store and Ad Hoc option.

Follow the instructions on the next page to create a Certificate Signing Request (CSR). This is a file that you will upload to the Apple developer website so that they can create a signing identity for you.
To create, this, open the Keychain Access application on your Mac and navigate to Certificate Assistant > Request a Certificate From a Certificate Authority as shown below. Follow the instructions at https://help.apple.com/developer-account/#/devbfa00fef7 to create a certificate file on disk. Take note of what you entered in the Common Name field so you will have access to it later because you will need it when you export the correct certificate in a later step. Note that when creating the CSR, you must use the email address of your Apple development account, and not any other personal email address.  If you use the wrong email address at this step, you will get a red X when reimporting the generated certificate.

After you create the certificate signing request (CSR) on disk, upload your CSR in the Apple Developer website and download the generated certificate on the next page.
Export the certificate
Now that you have downloaded your certificate, you need to import it into your keychain (Keychain Access app on Mac). Double click on the downloaded .cer file. This will import it into your keychain. Then, open your keychain in the Keychain Access app on your Mac. Open the login keychain, and select the Certificates Category.

Note: If you encounter an error about System Roots at this step you can try dragging the certificate into the login section of the keychain instead of double clicking it.

Find the certificate that you imported. It should be called iPhone Distribution …. It should have a drop-down as well with the picture of a key and the corresponding name should contain the name that you entered into the CSR in the previous step. You need to export this certificate-key pair, so that AppSheet can use it to build and sign a branded app for you. Right click on the certificate (the item called iPhone Distribution ...), and click Export. Make sure that you export in the .p12 format, which includes both the certificate and the signing key. Name the file whatever you like, and save it somewhere you will be able to find it. Before exporting can complete, you will have to input a password to encrypt the exported certificate-key pair. Keep in mind that you will be sharing this password with us, so make sure not to reuse any of your other passwords for this step.
After you click OK, you will be prompted for the password of your computer (this will not be put into the exported certificate-key pair). You have now successfully exported your signing identity.
Upload device IDs
In order to be able to test your branded app on your phone before submitting it to the app store, you first need to tell Apple which devices your application is allowed to run on in test mode. Collect all the i-devices you want your app to be able to run on before you distribute your app. For each of the devices, you need to find their UDID. You can find this using the Finder app on your mac. Connect your iDevice to your computer using a USB cable. Navigate to the Finder app and locate your device in the left hand side menu. In the 'General' tab, the UDID will be displayed in the top of the page. You can click and copy the UDID.
After you collect all your UDIDs for each of the devices that you need to test your app on, you need to upload them into the Apple Developer Console. Follow this link: https://developer.apple.com/account/resources/devices/list and enter information for a single device or multiple devices together as shown.

Keep in mind that you cannot add more than 100 devices.
Create provisioning profiles
Now that you have both an app ID and a signing identity, you need to create two mobile provisioning profiles. There are 2 kinds of profiles you will need to create: An App Store profile and an ad-hoc profile. To create the appropriate profiles, navigate to the following page, and again, click + in the top right of the page: https://developer.apple.com/account/resources/profiles/list. The first profile you will create is called an Ad-Hoc provision. This type of provisioning profile allows your app to be installed on a small number of predefined devices.

Click Continue. On the next page, select the application ID that you want to use for this provisioning profile. This will be the same ID you created a few steps ago.

On the following page, you will have to select the signing identity you want to use for this provision. This will be the signing identity you created a few steps ago (the one that expires the latest in your list if you have multiple).
Then, you will be prompted to select the devices on which you want the app to be able to run. Choose all devices that you would like to test your app before submitting to the app store. Click Continue.

Next, select a name for your provisioning profile (only you will be able to see it).

When you are finished with the configuration, download the generated provisioning profile. Repeat this same process to create and download a provisioning profile for App Store release. Choose App Store instead of Ad Hoc in the Register a new profile page.
Build the app
Now that you have all four items required to create a branded app (the two provisioning profiles, the signing identity, and the application ID), you can proceed to appsheet.com to actually create the app. Navigate your browser to the editor page of your app, go to the Manage section, navigate to the Deploy tab, and expand the Branded Apps category. You will have to configure the app using the information generated during the previous steps so that AppSheet can generate a branded app for you.
After you enter all the required information, click Create a branded version of this app for iOS devices at the bottom of the iOS section. Within 24 hours you will receive an email with links to download your application. One link will contain an app bundle that you can upload directly to the App Store, and the other will contain a bundle that you can use on one of your own devices to see what it is like. Congratulations! You’ve just created your first branded app.
Test on your own device
You will want to test your branded app before you distribute it. One of the links in the email that you received points to a Test IPA. This is the version of the app that you will be able to install on your i-device. Download this IPA, connect your iDevice using a USB cable and in Finder, drag and drop it to your iDevice icon seen in the left sidebar. 
Publish to the iOS App Store
To publish your newly created app on the app store, you will first need to create an entry for your app in iTunes. Follow the instructions in the following link to do this: https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/CreatingiTunesConnectRecord.html. Be sure to enter all the required information, like description, age restriction, and screenshots during this step. If you do not do this, you will not be able to upload your app to the App Store.
After you've created an entry for your app, you will need to upload a build, which refers to the application binary, the .ipa file that we provide you with during the iOS branded app process. Download the 'Transporter' app from the Mac appstore to upload your build. https://apps.apple.com/us/app/transporter/id1450874784?mt=12Note that it can take several hours between uploading the build, and that build being available in App Store Connect.  You can check the status in App Store Connect by going into your app and clicking the Testflight tab. You can also test the app store build of the app using "Testflight" iOS app on your iDevices.
Finally, you will need to submit your app for review. Since the iOS App Store is a curated store, all apps are subject to the mandatory review process, during which Apple decides whether or not your app is fit to be on the App Store. We make no guarantees that your app will pass this review stage. To submit your app for review, follow the instructions on this page: https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html#//apple_ref/doc/uid/TP40011225-CH33
Enterprise deployment
The final deployment option for larger organizations is called Enterprise Deployment. If you have an Apple Enterprise account, you will be able to generate an application in the same way as ad-hoc and App Store deployments. Replace the App Store signing identity with your Enterprise signing identity, and the App Store provisioning profile with your Enterprise provisioning profile. At this point, the generated app should be able to be deployed with Apple's Enterprise Deployment.
Why is "Delete my account" available to iOS branded app users?
Apple requires that apps that enable account creation also provide the ability to delete an account. For more information, see Offering account deletion in your app on the Apple Developer site.
   Was this helpful?How can we improve it?YesNoSubmit   

 Update a branded appUpdate an app that you've deployed via an app store.
To learn more about the different aspects of deploying your app, see Deploy.
When to update branded apps
After your branded app has been created and deployed to an app store, it does not need to be updated and redeployed in the app store every time you make a change to the AppSheet app definition.
The latest app definition is automatically fetched and used along with the every sync operation performed by the user. Therefore, you should rarely need to actually reconstruct and resubmit a branded app to one of the app stores.
The reasons you might want to update a branded app include:

You give the app itself a new name or icon.
You add new screenshots, keywords, descriptions, or other metadata.
AppSheet explicitly asks you to update and resubmit your app. This should be an infrequent occurrence, and may be because there is a platform change that requires an explicit update. Such platform changes could occur when AppSheet rolls out significant new features, or iOS, Android, or some other core infrastructure deprecates or changes some important underlying functionality.
Every 1 to 1.5 years to make sure your app gets new features and bug fixes.

How to update branded apps
Generating an update involves repeating the initial branding process. First, open the AppSheet app editor and go to Manage  > Deploy > Branded Apps. For Android, simply click Create a branded version .... This will generate the updated APK files that can be uploaded to the Google Play Store.
For iOS, you'll need the exported certificate and provisioning profiles you used when you first created your branded app. If you no longer have these files the certificate can be re-exported from your keychain, and the provisioning profiles can be re-downloaded from the Apple Developer Center. If the certificate is no longer in your keychain you can generate a new certificate and new provisioning profiles using the same steps from the original branding process, as described in Create and deploy branded apps for iOS.
For iOS you'll also need to specify a Short Version number for your update, and this number must match the version number you use in iTunes Connect. Once you've provided this information you can click Create a branded version ... to generate the .ipa files for upload to the Apple App Store.
   Was this helpful?How can we improve it?YesNoSubmit   

 Enable push notifications in your branded appsUse Firebase to send push notifications from a branded Android or iOS app.
By default, branded apps do not support push notifications. Enabling push notifications requires the creation of a Firebase account, which provides the infrastructure required to send and receive push notifications.
There are two things you need to provide AppSheet to allow us to send notifications to your branded apps:

Firebase API Key
Firebase configuration file (.json for Android or .plist for iOS)

To complete the above tasks, you'll need to create a Firebase account as described in Create a Firebase account.
If you have already created a Firebase account, you are ready to send push notifications on Android and iOS, as described in the following sections:

Enable push notifications in Android branded apps
Enable push notifications in iOS branded apps

   Was this helpful?How can we improve it?YesNoSubmit   

 Create a Firebase accountOne of the required steps for enabling push notifications is creating a Firebase account. If you already have one, see how to create push notifications for Android or iOS.
Firebase is a Google product that simplifies the development of mobile apps by providing out-of-the-box solutions for common mobile development tasks. Internally, AppSheet uses Firebase to send and receive push notifications in mobile apps. Due to the way Firebase works, it's necessary to create a separate account and Firebase project. So, the first step to enable push notifications in your branded app is setting up a Firebase account and project for your app. Firebase is free.
The first step to enable push notifications in your branded app is setting up a Firebase account and project for your app. Firebase accounts are free.

Sign in to Firebase.
Click Go to console.
Click + Add project and follow the prompts to create a project. You can name your project anything you want.
Once the project is created, the project configuration page is open.
Enable push notifications in your branded apps for Android or iOS..

 
   Was this helpful?How can we improve it?YesNoSubmit   

 Enable push notifications in Android branded apps
If you don't have a Firebase account yet, see Create a Firebase account.

First, you'll need to find the application package name of your Android app. AppSheet generates this for you, and you can copy and paste it from the Manage > Deploy > Branded Apps section of the editor for you app, under the For Android section. Save this string--you'll need it in a later step.

Navigate to the project you set up for your branded app, and in the Settings page, under the General tab, click Add Firebase to your Android app.

This will take you to the following page, where you'll paste in the application package name you found in the previous step.

Download and save the google-services.json configuration file, needed for sending push notifications to your branded app.

Skip through the next few steps in the Firebase app wizard; AppSheet takes care of everything else.
The final piece of information you need is the Server Key. See Step 2. Getting your Firebase Cloud Messaging Token and Sender ID.  Copy and save the key.
Now you're finally able to create a branded Android app that is capable of receiving push notifications. Upload the google-services.json file in the Optional: Firebase Notification Configuration File field, as well as the Firebase API key, both of which we obtained in earlier steps of this tutorial.

Congratulations! You have just generated a native app capable of receiving push notifications from AppSheet.
After you download and install your app, you can try this feature out by navigating to the Manage > Broadcast Notifications pane.  Be sure to verify that it works before sending out your app to your users.
   Was this helpful?How can we improve it?YesNoSubmit   

 Enable push notifications in iOS branded apps

If you don't have a Firebase account yet, see Create a Firebase account.

Note that this process is more involved than the Android version, but the end result is exactly the same as in Android branded apps.

Navigate to the Project Settings tab of your Firebase project and add a new iOS app.


Select iOS as the platform.


Paste in the iOS bundle ID you used when creating your branded app without push notifications and click Register app.

 
Download and save the GoogleService-Info.plist file--you'll need it in a later step.
Skip through the next few steps of this form, then click Continue to console.
Modify the properties of your app on the Apple Developer side. Navigate to the Apple developer site, go to your account, and select and edit the application ID you're using for your branded app in the Identifiers section.


Under Capabilities, enable the push notifications capability by selecting Push Notifications, and create your push certificates.


Make sure you generate both the development and distribution certificates.


To create a certificate, create a certificate signing request (CSR) by following the steps described in Create a certificate signing request on the Apple Developer site.
Make sure to click Saved to Disk rather than email to the CA in the certificate assistant wizard and click Continue.
Upload the .CSR file that you created and click Continue.
Download and install the newly created certificate by clicking on it once it's downloaded.
Click Done.
Export the certificate-key pair as a .p12 file by right-clicking the certificate (make sure it contains the key in the drop-down).
Upload the newly created development and production certificates to Firebase. This will be available in the Settings > Project Settings > Could Messaging > your iOS app section.
Upload the corresponding files, and plug in the password you used when exporting the .p12 files. This is the last configuration step you'll need to do in your Firebase account in order to enable push notifications in your branded app.


In AppSheet, go to the Manage > Deploy pane of the editor for you app, expand the Branded app section, and under the For iOS section upload the GoogleService-Info.plist file, as well as the Firebase API key, both of which you obtained earlier.


Test your set up by sending a quick test notification through the app editor.

Now your iOS branded app will be able to receive push notifications from AppSheet.
   Was this helpful?How can we improve it?YesNoSubmit   

 Monitor: The EssentialsDo you want to learn more about:

Bot execution status and performance?
How your app is performing overall?
How users are interacting with your app?
Recent app activity that can help you troubleshoot?

Use the AppSheet monitoring tools to better understand how your app is performing and how your users are interacting with it. You can use this information to customize your app to improve performance and better align with the needs of your users.
Monitor the following information:



Monitor
Description


Automation

Use the automation monitor to:

High-level aggregated and daily metrics for bots, including status and average time to completion
Bot execution details, including bot instances, events, processes, and step details
Summary of all document parsing for an app




Usage statistics
View usage statistics including the total number of unique users per month and per day.


App activity
      (Audit History)  

Use Audit History to:

View recent user activity both by user and action
Learn about the add, edit, and delete operations performed to assist with troubleshooting
Enable alerts when an error is reported in the Audit History
Audit changes by user





App performance
        (Performance Profile)

Create a performance profile to understand how to make your app more efficient.



 
Subscribe to receive an automated email from AppSheet each week with a summary of your app usage.
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Monitor automationUse AppSheet automation monitor to monitor automation in your apps and keep a track of the bot executions that were successful, encountered errors, and are still pending, as described in the following sections:

Access the automation monitor
Monitor app metrics
Monitor bot execution
Monitor document parsing
Set the time range for monitoring

Access the automation monitor
To access the automation monitor:

Open the app in the app editor.

Perform one the of the following steps:


Click Automation > Bots, expand the bot, and click Monitor in the bot header.


Select Manage > Monitor, expand the Automation Monitor section, and click Launch the automation monitor.




Use the AppSheet automation monitor to monitor the following information for your apps:

App metrics
Bot execution
Document parsing

Monitor app metrics
To monitor app metrics:

Access the automation monitor.
Set the time range.
Click Metrics in the bottom navigation bar.
Click an app to inspect in the Apps column.

The Metrics page displays high-level aggregated and daily metrics for bots, including status and average time to completion.
 

Monitor bot execution
To monitor bot execution:

Access the automation monitor.
Set the time range.
Click Runs in the bottom navigation bar.
Click an app to inspect in the Apps column.

The Runs page displays bot execution details, including bot instances, events, processes, and step details.

Monitor document parsing
To monitor document parsing:

Access the automation monitor.
Set the time range.
Click Document Parses.
Click an app to inspect in the Apps column.

The Document Parses page displays a summary of all document parsing for the selected app.

The status value indicates whether the document parsing succeeded or failed, and might also indicate the level of confidence, as summarized below.
 
Successful and human-reviewed document parses will appear in your document-based app tables. All other status values indicate that there are issues that need to be resolved before they appear in your app tables.




Status


Description




DISCARD


Document parse has been manually discarded. See Discard the results of a document parse.




EXTRACTION_ERROR


Content was not extracted. Typically caused by an unsupported document type or file format.




HUMAN_REVIEWED


Content has been manually inspected, updated, and marked as complete. See Resolve issues with document parsing.




POOR_QUALITY


Indicates one or both of the following:


Content was extracted but there is low confidence with the accuracy of the information. See How AppSheet measures extraction confidence.


One or more critical fields are not available (for example the Total Amount on an invoice).






QUOTA_EXCEEDED


Quota exceeded for the current cycle. The document parsing will be completed when quota is available.




SUCCESS


Extraction was successful. There is strong confidence with the accuracy of the information. See How AppSheet measures extraction confidence.




Resolve issues with a document parse
To resolve issues with a document parse:


On the Document Parses page, click the edit icon associated with the document parse. The details of the document parse are displayed.

The extraction error appears in the left pane, in bold. For example:
Expected field missing: Address was not extracted.


Edit the parsed fields to correct the error.


Click the checkmark icon in the top banner.


After being marked complete, the document parse appears in the app tables and its status is set to HUMAN_REVIEWED.
Discard the results of a document parse
To discard the results of a document parse:

On the Document Parses page, click the edit icon associated with the document parse.
Click the delete icon in the top banner.

Note: If necessary, you can recover a discarded document parse by changing the status of the entry in Google Sheets from DISCARD to HUMAN_REVIEWED.
Set the time range for monitoring
To set the time range for monitoring:


Expand the AppSheet Monitoring menu in the top-left of the automation monitor.



Select Settings.


Set the Monitoring Time Range to the desired value.
      If you select Custom, set the start and end values using the calendar selector.



Select the app in the App to Monitor drop-down list.


Click Save.


   Was this helpful?How can we improve it?YesNoSubmit   

 Monitor app usage statisticsTo monitor app usage statistics:

Open your app in the editor.
Go to the Manage > Monitor tab and expand Usage Statistics.
Click Get usage statistics to refresh the content.

The Usage Statistics page shows:

Total unique app users per month
Total unique app users per day
Unique app users emails
Individual app users per day (Core pricing plans or higher)
Per-user drilldown: app interactions per day  (Core pricing plans or higher)

   Was this helpful?How can we improve it?YesNoSubmit   

 Monitor app activity using Audit HistoryAppSheet's Audit History is a record of recent interactions occurring in your application. It contains an entry for every:

Sync between the users of your app and the AppSheet backend
Add, edit, or delete between the users of your app and the AppSheet backend
Add, edit, delete, action invocation, or read call made using the AppSheet API
Invocation of a bot
Creation of a report or document

You can use Audit History to troubleshoot:

Issues where a user says that they synced their changes but no changes have been recorded
AppSheet API calls
Zapier API calls
Bot issues


Note: You may need to wait for up to five minutes for an audit record to appear in Audit History. AppSheet groups audit records and periodically writes the grouped audit records to reduce overhead. This can result in a delay before an audit record appears in the Audit History. Click Get audit history records periodically until you see the audit record.

Monitor app activity using Audit History as described in the following sections:

Use Audit History
Configure alerts on Audit History errors
Filter Audit History alerts
Audit changes by user


As the root admin, you can export Audit History logs for your team to BigQuery, as described in Export team audit logs to BigQuery.

Use Audit History

To use Audit History log filtering and analytics, you must subscribe to an Enterprise plan. 

To use Audit History:


Open your app in the editor.


Go to the Manage > Monitor tab and expand Audit History.


Click Launch log analyzer.

      The Audit History log shows:


A list of recommendations for improving performance, if applicable


Summary charts of recent audit log entries by user and by operation


Audit History log results based on filters selected (see below)




Filter the log by:


Syncs, Adds, Updates, Deletes, Automations, Reports, API calls, or Documents


Start or end date


Failures only


Table name, user ID, or rule name




Within a record, click the Details icon to view the outcome of the action.


Optionally, click Download Search results to download a copy of the search results as a JSON payload.


By default, the Audit History is shown for a limited recent period of time. Richer filtering and analysis capabilities are available as part of the Enterprise Plus pricing plans.
Configure alerts on Audit History errors
As the application creator, you can subscribe to automatically receive an email alert each time an error is recorded in Audit History. Audit History alerts are available as part of the Enterprise Plus pricing plans.
To enable or disable Audit History alerts:

Go to the Manage > Monitor tab.
Expand Audit History.
Enable Enable Audit History alerts.
Click Change settings to save your change. 

Each Audit History alert email message contains the following information.

Subject: Alert for AppSheet application <application name> at <gmtTime> GMT
Message: Error message from the Audit History record.
Log URL: URL of the Audit History record.
Operation: Operation type from the Audit History record.
Application URL: URL of the application.

Filter Audit History alerts
You may wish to filter Audit History alerts to highlight some alerts and to suppress others. You can do this by creating email filter rules in your email client. Most email clients provide rich email filtering rules for categorizing and routing email messages.
Audit changes by user
Note: To audit changes by user, you must  require users to sign in to the app.
For some apps, it's important to track specific interactions by user. You can examine the By User property in the Audit History log to determine who performed an add, update, or delete, as follows:


If your application requires sign in, the By User property in the Audit History log will contain the user ID of the user that performed the add, update, or delete.


If your application does not require sign in, the By User property in the Audit History log will contain the value -1 which indicates a guest user id.


If your application does require sign in but the user has not yet granted consent, the By User property in the Audit History log will contain the value -2 which indicates an unconsented user id.


You can keep track of which user performed the most recent add or update for each record by adding an extra column of type Email to each record. You can populate this column with the USEREMAIL() of the most recent user to add or update the record. If you specify USEREMAIL() as the default value of this column, then every new record will automatically contain the email address of the currently signed-in user who added the record. Then, you can update this column when a user updates the record.
Some apps require a richer audit trail to maintain the history of changes made by different users. Typically, the backend cloud storage provider has an auditing mechanism. For example, Google Sheets provides a Change History that shows a detailed list of changes made, including a timestamp and user information. In order to use this backend audit history, it's important that the AppSheet app runs with the security setting As App User. Each potential user should also be given permissions to access the backend spreadsheet.




   Was this helpful?How can we improve it?YesNoSubmit   

 Monitor app performance using Performance ProfileAppSheet maintains a performance profile for every app. The performance profile is similar to the Audit History log, recording each sync, add, update, or delete recorded by the AppSheet backend. Along with each entry, there is detailed performance information captured during the execution of the operation. 
To monitor app performance:

Open your app in the editor.
Go to the Manage > Monitor tab and expand Performance Profile.
Click Launch performance analyzer.

    The Performance Analyzer shows:
    
A list of recommendations for improving performance, if applicable
Summary graphs showing:
        
Average duration per operation type
Average virtual column computation time by app version

        For example:


Audit History log results based on filters selected (listed below)



Filter the log by:


Syncs, Adds, Updates, Deletes, API calls, or Documents


Start or end date


Failures only


Table name, user ID, or rule name




Within a record, click the Performance icon to view performance details.


Optionally, click Download Search results to download a copy of the search results as a JSON payload.


By default, the Performance Profile is shown for a limited recent period of time. Richer filtering and analysis capabilities are available as part of the Enterprise Plus pricing plans.
When analyzing the performance data, look for:

Tables that take a long time to read. Perhaps they have too much data?
Virtual column expressions that take a long time to read. Perhaps they can be written more optimally?

Most often, a long sync time is due to the number and size of tables. Consider the following:

If you 10 tables in your app, AppSheet's server has to read them all from the cloud backend. AppSheet will only read a few of them at a time in parallel. For example, accounts with self-service plans will only have 2 or 3 threads loading tables in parallel. Business subscriptions will have 4 or 5 threads loading tables in parallel.
If a table is very large or takes a long time to load, then it slows down the overall sync time.
Often there are references between tables and, therefore, automatically added REF_ROWS() virtual columns that compute the relationships between the tables. It may appear that one of the virtual column computations is taking a long time to complete. However, this is rarely the case. The time required by this computation is typically used to fetch the table itself before computing the relationship. In other words, fetching tables is almost always the source of delay.

Note: If you write your own virtual column expressions with inefficient SELECT() expressions, this may cause delays in sync time.  

   Was this helpful?How can we improve it?YesNoSubmit   

 Subscribe to app usage summary emailsSubscribe to receive an automated email from AppSheet each week with a summary of your app usage.
App usage information is provided for all deployable apps (explicitly checked and marked as deployable). 
The content of the email is identical to the contents provided on the My Account > App Info page, with links to additional details about each of the apps.
App usage summary emails are enabled by default in your account.
To change the weekly email summary setting:

Got to My Account > Settings.
Under App Creator Settings, enable or disables the Send weekly summary? checkbox.
Click Save.

 
 
 
   Was this helpful?How can we improve it?YesNoSubmit   

