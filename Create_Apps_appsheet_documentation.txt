 App design: The EssentialsYou customize the appearance of your app using the UX section of the editor.
Quick intro
Watch an introduction to building UIs with AppSheet.

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

Building UIs in AppSheet
Tips and tricks
Learn tips and tricks from the AppSheet Community:


UX tips and tricks
UX Q&A


About app design
Creating a great user experience (UX) for your app users is a vital element of your app creation process. Users need to be able to interact with your data easily and get what they need from your app. In the editor, we have the tools for creating a great user experience. 
When making design decisions for your app, you can choose several different ways of displaying your data. There are several different views that you can use to do this. Views can be created using data from both entire tables and from slices. You can use form views to capture information and make different types of drop-downs.
You can also customize the style and branding of your app, make sure that the locale makes sense for your users, and decide on different format rules and options. All of these elements help create a professional look and feel and allow you to make choices that reflect your style. 
Design your app
When you first upload your data, the editor will create some automatic views for it. You can either customize or delete the views provided, and you can add views of your own.
To design your app:

Open the app in the app editor.
Select Apps  > Views.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Select UX > Views.




The Views panel displays listing the views defined for your app. See Views: The Essentials.
In addition to creating views, there are different stylistic and aesthetic decisions you can make in the editor. You can customize the theme, accent colors, and fonts to brand and localize your app. You can create different format rules for your data to further customize the look of your app. Finally, there are configuration settings that let you control what the starting view of your app is, how your columns are ordered, and more.
   Was this helpful?How can we improve it?YesNoSubmit   

 Views: The EssentialsViews allow you to control how, when, and where data is presented to the app user, and how the user interacts with the data.
The following provides an example of the Nearby card view from the Facility Inspections template. You have full control over the view name (Nearby), its position in the app (navigation bar), its layout and contents, and conditions for when it is displayed.

See also View types.
Explore the Views pane

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.
The Views pane is available in the new editor (preview) only. The Views pane does not appear in the legacy editor.

Go to App  > Views.
The Views pane is displayed and the first view in the primary navigation is opened in the editor.

As highlighted in the previous figure, you can use the View pane to:

Create a view
    You can create views that appear in the primary navigation, menu navigation, or that are referenced from other views but that do not appear in navigation
Configure a view (select in the list)
Manage views, including:
    
Preview a view
Rename a view
Move a view to a different position (primary, menu, other)
Copy a view
Add a view to favorites
Delete a view


Manage system-generated views for your data
    
Notes: 

You can configure, preview, copy, and delete system-generated views. 
If you are using the legacy app editor, you can show or hide system-generated views by default. See Configure app editor settings.



Go to view settings, as described in View settings: The Essentials
Search the list of views
Expand or collapse all sections in the navigation

See also View types.
Create a view
 To create a view:

 Open the app in the app editor.
Go to App  > Views.
Depending on where you want to launch the view in your app, click + adjacent to Primary navigation, Menu navigation, or Other views. 
You can change the view position, as described in Move a view to a different position,
The Add a new view dialog displays.
Do one of the following:
    
To add a suggested view, click the suggested view.
Click Create a new view.


Configure the view.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.





We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


 To create a view:

 Open the app in the app editor.
Go to UX > Views.
Perform one of the following tasks:
          
To create a new view, click New View.
To add a suggested view, click the suggested view.
To copy an existing view, expand it and click Copy.




Configure the view.
Save the app by selecting one of the following:
          
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.







Configure the view
Configure the view by using the settings described in the following sections.

View details
View options
Display
Behavior 
Documentation

View details
Configure the view details defined in the following table.




Setting


Description




View name


Name of the view. It must be unique within your app.
If you enter a name that is the same as an existing view, the app editor will automatically append a number to the view name to differentiate between them.




For this data


Data referenced by this view. Select a table or slice from the list. Only data from the table or slice can be displayed within the view.
To create a new slice, see Create a slice when configuring a view.
Note: This option is not available for dashboard views.




View type


View type that determines how the data is presented to the app user.
Select from a variety of view types, such as chart, form, detail, map, table, and more. Each view type has its own characteristics and type-specific view options.




Position


Where you want to launch the view in your app.  Select one of the following positions:

Primary navigation: Accessed in the primary navigation bar at the bottom of the screen for mobile and tablet apps and in the left navigation bar on desktop apps Set Position to first, next, middle, later, or last based on the preferred order of appearance.
Menu navigation: Accessed in the app's main menu. Set Position to menu.
Other view: Accessed only when referenced implicitly while navigating through data. Set Position to ref.

For example, the following shows the position of primary and menu navigation views in mobile apps:





View options
Each view type has type-specific view options that allow you to tailor the appearance of the view. For example, the view options for a table view are shown in the following figure.

For more information about the view options shown, see:

Control row sort order in a view
Control grouping in a view
Control column order in a view
Control column width in a view
Allow quick edit columns in a view

Display
All view types have configurable display options. Display options affect how the view is presented in the navigation bar along the bottom of the app display, and in the app's main menu.

Configure the view display by using the settings defined in the following table.




Setting


Description




Icon


Icon to be displayed along with the view's Display name (see below). Choose an icon from the predefined list. Custom icons are not allowed. Every view must have an icon. If no icon is selected, a type-specific default will be used.




Display name


Name displayed for the view. Enter a fixed value (T) or to a text expression (flask).

If Display name is not specified or if set to an expression that evaluates to a blank value, the view's name is used.




Show if


Yes/No expression that determines whether the view is included as a navigation element in its designated Position (for example, in the navigation bar or the main menu).
If the expression evaluates to TRUE, the view will be included. 

No Show if expression is equivalent to the expression, TRUE .

Warning: Show if is not a security measure. Show if merely hides the view from navigation; there are other legitimate ways for a user to access the view.





Behavior
Each view type has type-specific behavior options that may allow you to tailor the behavior of the view when the user interacts with it. For example, the behavior options for a table view are shown here:

Configure the behavior for the view by using the settings defined in the following table, if available.




Setting


Description




Event Actions


Some view types provide the opportunity to customize the app's response to certain events triggered by user activity. When a recognized view event occurs, the configured action is performed.




App link


Not configurable. Provides two ways to target the view from a navigation element:


Deep link to the view to be used as the target of an action of type App: go to another view within this app. For example: (LINKTOVIEW("By House")


Full URL for the view to be used as the target of an action of type External: go to a web site or from a web browser.


Note: The use of app links is not affected by a view's Show if setting; a Show if expression that evaluates to FALSE does not prevent the use of an app link to the view.




Documentation
Expand the Documentation section and enter a descriptive comment for the card view that will enable collaborators to easily understand its purpose.
Preview a view
 To preview a view:

 Open the app in the app editor.
Go to App  > View.
Position your cursor over the view in the Views pane and select More > Show in preview.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor



Open the app in the app editor.
Go to UX > Views
Expand the view you want to preview.
Click Show in Preview.




Rename a view
To rename a view:

Open the app in the app editor.
Go to App  > View.
Position your cursor over the view in the Views pane and select More > Rename.
Edit the name end press Enter.
Save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




You can also rename a view by editing the View name field when configuring the view details.

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor



Open the app in the app editor.
Go to UX > Views
Expand the view you want to rename.
Edit the View name field under View details.
 Save the app by selecting one of the following:
          
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.







Move a view to a different position
To move a view to a different position:

Open the app in the app editor.
Go to App  > View.
Position your cursor over the view in the Views pane and select More > Move to and select Primary navigation, Menu navigation, or Other view. 
    The currently selected position is checked.
 Save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




You can also move a view to a different position by editing the Position field when configuring the view details.

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor



Open the app in the app editor.
Go to UX > Views
 Edit the Position field under View details.
 Save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






Copy a view
To copy a view:

Open the app in the app editor.
Go to App  > View.
Position your cursor over the view in the Views pane and select More > Duplicate.
 Save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




The view is copied viewname_n, by default, where viewname is the name of the existing view and n is incremented by 1 each time you copy the view. You can edit the name of the view, see rename the view.

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor


 To copy a view:

 Open the app in the app editor.
Go to UX > Views.
Expand the view you want to copy.
Click Copy.
 Save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






Add a view to your favorites
To easily access frequently used views, add them to your favorites. 

 To add a view to your favorites:

Open the app in the app editor.
Go to App  > View.
Position your cursor over the view in the Views pane and select More > Add to favorites.

Remove a view from your favorites by positioning your cursor over the view in the Favorites list and clicking x.
Delete a view
 To delete a view:

 Open the app in the app editor.
Go to App  > View.
Position your cursor over the view in the Views pane and select More > Delete.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


 To delete a view:

 Open the app in the app editor.
Go to UX > Views.
Expand the view you want to delete.
Click Delete.
Save the app by selecting one of the following:
          
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.







   Was this helpful?How can we improve it?YesNoSubmit   

 View typesAppSheet apps support the following view types.




View Type


Description




Calendar


Displays data associated with dates and times in day, week, or month formats.




Card


Displays content and actions in a single element.




Chart


Displays data in a visual format (using histograms, donut charts, and so on).




Dashboard


Shows multiple views in one place.




Deck


Shows information about each row in a "deck-of-cards" format including an image. Similar to table view.




Detail


Shows details for a single record and provides navigation to access next and previous records.




Form


Captures information input by app users.




Gallery


Showcases your data images.




Map


Displays addresses, XY, and LatLong columns on a map.




Onboarding


Provides a set of introductory pages for onboarding users.




Table


Summarizes data as a scrollable list of rows. Similar to deck view.




 
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Calendar view typeThe calendar view allows you to display data associated with dates and times in day, week or month formats. Additionally, you can display the calendar as a singular view or part of a dashboard view. 

Create a calendar view
Configure the calendar view options
Structure your data for a calendar view
Integrate with Google Calendar
Create recurring events
Customize the color of tasks in a calendar view

Create a calendar view
To create a calendar view:

Create a view, as described in Create a view.
Configure the calendar view, as follows:
    
Select calendar as the View type when configuring the card view details, as described in View details.
Configure the calendar view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


 When you are done, save your changes by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.





Configure the calendar view options
Configure the calendar View options by using the settings described in the following table.


Notes:


Calendar views have four required fields. All calendar views must specify a start (Start date, Start time) and an end (End date, End time). If you’re receiving an error in your calendar, a good place to start is by checking that these are all set.
If you only have one date value in your data, use it as the start AND end date (likewise, you can use a single time value as the start and end values).








Setting


Description




Start date


Column that contains the start date for each row. Select a column from the drop-down.




Start time


Column that contains the start time each row. Select a column from the drop-down.




End date

Column that contains the end date. Select the column from the drop-down.



End time

Column that contains the end time for each row. Select a column from the drop-down.


Description
Column that contains the text to display for the event.  Select a column from the drop-down.


Category

Column that defines the color for each category.  Select a column of type Color from the drop-down.

For tips on customizing the color of tasks in a calendar view, see this community article.




Default view
Default view to display when calendar loads. Select Month, Week, or Day.



Structure your data for calendar view
Because your data structure influences the interface and functionality of your application, it's important to ensure it's structured in a format that's easiest for AppSheet to read. Below are column header suggestions to help get you started. 

Date: Start Date and End Date
Time: Start Time and End Time

Integrate with Google Calendar
AppSheet currently supports integration with Google Calendar, but not other Calendar platforms. To integrate with an existing Google Calendar, add your Google Calendar as a data source via the Account > Sources > + Data Source > Google Calendar. Allow AppSheet to access your Google Account, and then create a calendar view. 
You can change the Google Calendar and it will sync across the app. You will need to create the blocks in Google Calendar for them to populate in AppSheet. 
Create recurring events
The calendar view does not directly support a way to create recurring events. However, there are workarounds that you can implement. For example, you could create an automation bot to add events after a certain condition is triggered. 
Customize the color of tasks in a calendar view
For tips on customizing the color of tasks in a calendar view, see this community article.
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Card view typeThe card view type enables you to display content and actions for a single element using a format that is similar to card components in Material Design. You choose a layout and configure the content blocks.
The following provides an example of the Nearby card view from the Facility Inspections template.

Use a card view in your app as described in the following sections:

Get started with an app template
Create a card view
Configure the card view options
Configure the layout

See also Views: The Essentials for more information about managing views.
Get started with an app template
Many of the app templates demonstrate how to use the card view, such as the following templates:

Simple Inventory Manager
Project Tracker
Facility Inspections

Create a card view
To create a card view:

Create a view, as described in Create a view.
Configure the card view, as follows:
    
Select card as the View type when configuring the card view details, as described in View details.
Configure the card view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


When you are done, save your changes by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure the card view options
Configure the card View options by using the settings described in the following table.




Setting


Description




Sort by


Sort the rows by one or more columns.
Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.




Group by


Group rows by the values in one or more columns.
Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.




Group aggregate


Display a numeric summary of the rows in each group.
Select the format to use for the display from the drop-down list.




Layout


Configure the layout  for the card view.




 
Configure the layout
Configure the layout of the card view as described in the following sections.

Choose a layout
Configure the content blocks

Choose a layout
When creating and configuring your card view, you need to choose the layout that you want to use to display the content. Card views support the following layouts.

Backdrop

Backdrop photo card that includes an image and title, and supports a single action when clicking the card.



Large

Full view of a card that includes an image, title, subtitle, header, subheader, and description and supports up to four actions, displayed using text (2) and icons (2).





List

Compact view of a card that includes a thumbnail image, title, and subtitle, and supports up to three actions in the Actions drop-down menu.



Photo

Photo card that includes an image, title, and subtitle, and supports a single action when clicking the card.



Configure the content blocks

Based on the layout that you choose there are a number of content blocks available that you can configure. The following figure highlights the full set of content blocks available when you choose the large layout.

The following table summarizes the content blocks that are available in each layout.

Configure the content blocks available for your layout as described in the following sections:

Configure text blocks including title, subtitle, header, subheader, and description
Configure image blocks including main image and thumbnail
Configure action blocks including text, icon, or menu item

Configure text blocks
Text blocks in a card view layout include title, subtitle, header, subheader, and description.
To configure a text block:

In the Layout structure, click the text block that you want to configure, such as Title goes here.
Select a column in the Column to show drop-down list that will be used to populate the text block. To hide the text block, select None.

For example, the following shows the steps to configure the card view title in a list layout. In this case, the Inspection Point ID is used to populate the title block.

Configure image blocks
Image blocks in a card view layout include the main and thumbnail images.
To configure an image block:

In the Layout structure, click the image block that you want to configure.
Select a column in the Column to show drop-down list that will be used to populate the image block. To hide an image block, select None and skip any remaining steps.

If available, select one of the following Image Fit options to configure the image display:


Cover - Uses the image as a background for the whole view (great for pattern images and some photos)


Fit - Scale the image to fit inside the header area (great for logos)


Fill - Crop the image to fit the area (great for photos)




If available, select the Image Shape, square or round.


For example, the following shows the steps to configure the card view thumbnail image in a list layout. In this case, the Point Image is used to populate the image block.

Configure action blocks
Configure action blocks that are displayed as text, icon, or menu items.
To configure an action block:

In the Layout structure, click the text, icon, or menu item action block that you want to configure.
Select the action that you want to execute when the text, icon, or menu item is selected in the On Click drop-down. The drop-down includes includes actions defined for the selected table, Go to details, and None. To display details for an item in a detail view. select Go to details. To hide an action block, select None.


For icon action blocks, you select the icon when configuring the action, as described in Actions: The Essentials.

For example, the following shows the steps to configure an icon action block in a large layout. In this case, the Inspect action is invoked when the checkmark icon is clicked.

   Was this helpful?How can we improve it?YesNoSubmit   

 Chart view type
In general, charting is a complex topic. As the designer of a chart, you typically have to make three choices:

How many individual series lines do you draw?
What values are on the X and Y axes?
What chart display type do you use, such as line, bar chart, and so on?

We have tried to keep it simple by limiting the possible answers for each of these choices:

Row Series chart - Appropriate for spreadsheet data where most of the data is numeric on a uniform scale (such as monthly sales data). Every row forms a series, each of which is identified by the row key. You choose a subset of the column names that will be charted on the X axis. The Y axis is based on the numeric values in the row cells. You can choose a line chart, a bar chart, or a stacked bar chart as the display type.
Column Series chart - Appropriate for spreadsheet data with just a few rows corresponding to items to compare (such as monthly sales data by category). Every column forms a series, each of which is identified by the column name. Each row (using its row key column) forms one entry on the X axis. The Y axis is based on the numeric values in the row cells. You can choose a line chart, a bar chart or a stacked bar chart as the display type.
Histogram - Special kind of bar chart to show aggregate distributions. For example, if you want to see the number of customers who purchased each automobile model, you specify the column whose values will be aggregated. The X axis gets one entry for each unique value in this column and the Y axis shows the count of the number of rows that have that value in that column.

For a deeper dive into charts, please see Charts: The Essentials. 
The following sections describe how to create and configure a chart view.
 Create a chart view
To create a chart view:

Create a view, as described in Create a view.
Configure the chart view, as follows:
    
Select chart as the View type when configuring the card view details, as described in View details.
Configure the chart view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


When you are done, save your changes by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure the chart view options
Configure the chart View options by using the settings described in the following table.




Setting


Description




Chart type


Chart type. Select one of the chart types from the drop-down.




Group aggregate


Display a numeric summary of the rows in each group. Select the format to use for the display from the drop-down.




Chart columns

Identify which columns to display in the chart. Click Add and select the column name. Repeat to add additional columns.


Chart colors
Customize the colors used in the chart. Click Add and select the color. Repeat to add additional colors.


Trend line
Overlay the chart with a regression trend line. Select the type of trend line from the drop-down


Show legend
Turn on to show a legend for the chart.



   Was this helpful?How can we improve it?YesNoSubmit   

 Dashboard view typeThe dashboard view allows you to show multiple views in one place. Currently calendars, maps, charts, gallery, deck, table, and detail views can be added to the dashboard.
If the view content is related or from the same table as data in other views, enabling Interactive Mode allows content to be dynamically updated as different entries are selected.

Use a dashboard view in your app as described in the following sections:

Get started with a sample app
Create a dashboard view
Configure the dashboard view options

See also Views: The Essentials for more information about managing views.
Get started with a sample app
See the Interactive Dashboard sample app to see how to create an interactive dashboard. 
This example includes a simple email client with two tables (Folder and Message). When you click on a folder, the messages in that folder are displayed. When you click on a message, the message details are displayed. 
Create a dashboard view
To create a dashboard view:

Create a view, as described in Create a view.
Configure the dashboard view, as follows:
    
Select dashboard as the View type when configuring the card view details, as described in View details.
Configure the dashboard view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


Save your changes.

Configure the dashboard view options 
Configure the dashboard View options by using the settings described in the following table.




Setting


Description




View entries


Views that you want to appear on the dashboard
To add views entries:

Click Add and select an existing view in the list.
Select the size of the view in the dashboard: Large, Small, Tall, or Wide. For example, large views will be twice the size of small views on the grid. On phones, this setting is ignored.
Repeat to add additional views to the dashboard.


If the view entries are not all the same size, they may appear in a different order for optimal fit on the current screen. The order of the view entries can only be guaranteed if the view entries are all the same size. 




Use tabs in mobile view

On a tablet or desktop, the specified dashboard views will be shown in an automatically-sized grid that can be customized by the app user. 
Turn on Use tabs in mobile view to use the mobile-friendly dashboard tabs for when the screen device is narrow, usually when the app is opened on a phone or small tablet. 



Interactive mode
When turned on, tapping rows will affect other views in the dashboard; it won't navigate to another view.



   Was this helpful?How can we improve it?YesNoSubmit   

 Deck and table view typesThe deck and the table view types have similar capabilities, but your unique use case will determine which view type is a better fit for your application. 
The table view shows information in a very compact way allowing you to quickly scroll to find a row. For a table view example, see the Job_Inline table view in the Field Delivery sample template.
The deck view shows information about each row in a "deck-of-cards" format including an image. If the data doesn't have an image, you should consider adding a virtual column with a thumbnail image constructed with the formula: TEXT_ICON(INITIALS([Column_Of_Type_Name]))
In addition to the image, the deck view will display two text columns as well as any action buttons for phone numbers or emails. The display columns are chosen in the following order: Row Label, Virtual Columns of type Name, Name type columns, key columns, required columns, normal columns in sheet order.
The deck view also has an option to select a layer of data to display as a secondary view. This nested view provides a way to visualize lists of related data created by building references between tables. 
The nested views can be other tables, decks, galleries or charts - for example, a quick snapshot of a product inventory bar chart for each company displayed in a deck view:

To enable a nested view, locate the Nested Table Column field within the deck view and choose a related list of items. Customize the view type of that related list by finding the corresponding inline ref view that was automatically created when the relationship was created. 
Get started
Get started with:

Deck views by using the:
    
Leads deck view in the Lead Tracking sample app
Repair manual feature sample


Table views by using the:
    
Vendors nested view in a deck view in the Inventory Management sample app
Interactive map dashboard feature sample



Create a deck or table view
To create a deck or table view:

 Create a view, as described in Create a view.
To configure a deck view:
    
Select deck as the View type when configuring the deck view details, as described in View details.
Configure the deck view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


To configure a table view: 
    
Select table as the View type when configuring the deck view details, as described in View details.
Configure the table view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


When you are done, save your changes by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure the deck view options
Configure the deck View options by using the settings described in the following tables.




Setting


Description




Sort by


Sort the rows by one or more columns.
Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.




Group by


Group rows by the values in one or more columns.
Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.




Group aggregate


Display a numeric summary of the rows in each group.
Select the format to use for the display from the drop-down list.




Main image


Image column to display for each row.
Select an image column from the drop-down or select one of the following values:

Auto assign (column) - Let AppSheet automatically assign a value. Column that is auto-assigned is shown in parentheses.
None - Don't set this option.




Primary header

Top text to use for each row.
Select a column from the drop-down or select one of the following values:


Auto assign (column) - Let AppSheet automatically assign a value. Column that is auto-assigned is shown in parentheses.


None - Don't set this option.





Secondary header

Bottom text to use for each row.
Select a column from the drop-down or select one of the following values:


Auto assign (column) - Let AppSheet automatically assign a value. Column that is auto-assigned is shown in parentheses.


None - Don't set this option.





Summary column

Top-right text to use for each row.
Select a column from the drop-down or select one of the following values:


Auto assign (column) - Let AppSheet automatically assign a value. Column that is auto-assigned is shown in parentheses.


None - Don't set this option.





Nested table column

Nested table containing a list of Ref values.
Select a table from the drop-down. 



Image shape
Shape used for the Main image. Select Square, Round, or Full.


Show action bar
Enable to show action buttons at the bottom of each row.


Actions

Action buttons to display in the action bar. The actions are ordered automatically by AppSheet.
To manually control the action order, do any of the following:

Click Add to add actions that you want to display in the order you want them to appear.
Click  to drag an action to a different order.
Click  to delete an action.

If you changed the action order, click Reset to switch back to the AppSheet automatic order.
Position your cursor over the action and click  to open the action configuration in a dialog. You can edit the action configuration and click Done, or click Go to action to open the action in the Actions panel.




Configure the table view options
Configure the table View options by using the settings described in the following tables.




Setting


Description




Sort by


Sort the rows by one or more columns.
Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.




Group by


Group rows by the values in one or more columns.
Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.




Group aggregate


Display a numeric summary of the rows in each group.
Select the format to use for the display from the drop-down list.



Column order
Display columns in a different order than they appear.  See Control column order.


Column width

Control the width of the columns. For example, select Narrow to fit more data on the screen.



Enable QuickEdit (beta)

Enable to allow edits to be made directly in the table view. 
Note: This feature is in preview.





When creating actions for a table view, if the Prominence setting for an action is set to Display inline for a specific column, the action replaces the column content instead of displaying alongside it. If you want to see both the action and the content, you should create another column to attach the action to. For example, attach the action to the Email column so that both the  Name column contents and the action item display in the table row, as shown in the following figure.


 

   Was this helpful?How can we improve it?YesNoSubmit   

 Detail view typeThe Detail view type displays details about a record. You can configure the view to define the image presentation, column order, quick edit columns, page navigation, and more.
This view type is used by default when an item is selected in the table, deck, and gallery view. See System-defined reference views.

Create and configure a detail view as described in the following sections. 

Create a detail view
Configure the detail view options
Control column order in a detail view
Configure card blocks in detail views to optimize the desktop design

Create a detail view
To create a detail view:

Create a view, as described in Create a view.
Configure the detail view, as follows:
    
Select detail as the View type when configuring the detail view details, as described in View details.
Configure the detail view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.


When you are done, save your changes by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.





Configure the detail view options
Configure the detail View options by using the settings described in the following table.




Setting


Description




Use Card Layout


Turn on to use a card view layout for header items.




Main image


Image column to display as main image for each row.
Select a column of type Image from the drop-down or select one of the following values:

Auto assign (column) - Let AppSheet auto-assign a value. The column that is auto-assigned is shown in parentheses.
None - Don't display an image.





Header columns


Columns to highlight at the top of each slide. For example:

Click Add and select the column name. Repeat to add another header column.




Quick edit columns

Columns that are editable directly from the detail view. To use this option, the data source of the detail view must allow edits. See Quick edit columns.



Sort by


Columns used to sort rows. Click Add and select the column name and whether to sort in Ascending or Descending order. Repeat to configure additional sort by rules.



Column order

Order to display columns, if different from the original. See Control column order in a view.
Note: Make sure that you add the Show type columns that you want to be displayed. 



Display mode
Display mode for column data.


Image style

Style to use for the main image. See Images in a detail view.



Max nested rows
Maximum number of rows to show for related reference lists. Set the desired number. 


Slideshow mode

Turn on to allow users to navigate to previous or next slides.




Desktop layout

Layout to use when displaying details on a desktop device. Select one of the following options:

Split view - Detail views open in a new pane to the right of the list. Users can click  to expand to full screen. For example:


Full screen - Detail views take up the full width of the page and include a breadcrumb for navigating back up the nested list. For example:






Desktop multicolumn layout

Turn on to display details using multiple columns in desktop browsers if space is available.
With the multicolumn layout, the headers, main image, and actions persist in the left column while the content in the right column can scroll. 
A maximum of three columns will be displayed.
For example:





Control column order in a detail view
Control the column order in a detail view if different from the original order. See Control column order in a view.
Configure card blocks in detail views to optimize the desktop design
 Configure card blocks in a detail view to optimize the display of information for the desktop design (preview), as shown below.

To configure card blocks in detail views, add one or more Show type columns set as the Page_Header category to the associated table. Each Page_Header column creates a new card block that includes all columns below it until the next Page_Header column.
You can configure card blocks in two ways, using virtual columns or adding empty columns to your spreadsheet, as described in Customize detail and form views using Show types.


Card blocks display only if there is sufficient width available on the page. You may need to resize the panel to view the content as card blocks.
By default, Show type columns are only permitted in form views. To include Show type columns in detail views, when configuring settings for detail views enable Include Show columns in detail views in the Detail view section.


 

   Was this helpful?How can we improve it?YesNoSubmit   

 Form view type
The form view allows you to capture information input by app users both online or offline.
New to offline behavior? See Offline and Sync: The Essentials.
Depending on your needs you can capture signatures, photos, location services, or simple text. Similar to Google forms, new guests to your form will only be able to fill out the new form and will not see entries made by previous users.
AppSheet can be used to distribute forms through a mobile app as well as use a mobile app to view and interact with form responses. This view helps you unlock mobile-specific features for your forms that the web cannot capture such as photo capturing an input into your form directly from your mobile device.
Create a form view
To create a form view:

Create a view, as described in Create a view.
Select form as the View type when configuring the view.

Important notes

See the sample app.
Forms are customizable to suit your individual needs. For example, you can set a form so that each user sees a fresh form when they open the form page on your application. See Customize input forms.
Your application can include multi-page forms. See Create multi-page forms.

   Was this helpful?How can we improve it?YesNoSubmit   

 Gallery view typeGallery is the default view of data that has an image or thumbnail image column. The content is shown in a 'summary' view as an image gallery where each image is annotated with the row key. Clicking on any image opens up a full screen 'details' view of the image along with the other row columns. Once in the full screen details view, the user can swipe left or right to move to adjacent rows. This presentation has three sub-options that control the size of the images shown in the summary view:

Small: appropriate for thumbnail images.
Medium: fits two images side by side on a phone screen.
Large: shows large images full-width with a vertical scroll.

As with the list view, you can choose a column to sort the order of presentation of the data. See how the gallery works in our Product Catalog sample app.

Create a gallery view
To create a gallery view:

Create a view, as described in Create a view.
Select gallery as the View type when configuring the view.

   Was this helpful?How can we improve it?YesNoSubmit   

 Map view typeThe map view allows you to display locations within your app. Depending on the app requirements, you can display location data, drop pins, and provide directions with your app. 
Maps can be displayed in road or aerial view and can be zoomed and panned. By default, the map is zoomed to show all the pins. If your map includes locations in both Australia and Canada, it may be zoomed to show half the world.
The location data points can come from Address,LatLong (GPS) information, or XY (coordinates of a point). You can use either Google maps to display your mapped locations (Address and LatLong) or a custom image such as the interior map of a manufacturing plant to map XY points.

The following sections describe how to create, configure, and customize map views:

Get started using map views
Create a map view
Configure the map view options
Use map pins
Get driving directions
Use your Google Maps integration
Use KML layers to display geographic data
About map view location data points

Get started using map views
Get started using map views by viewing the Active Jobs map view in the Field Delivery sample app 
Create a map view
To create a map view:

Create a view, as described in Create a view.
Select map as the View type when configuring the card view details, as described in View details.
Configure the map view options.
Configure the Display, Behavior, and Documentation settings, as described in Configure the view.
Save your app.

 
Configure the map view options
Configure the map View options by using the settings described in the following table.




Setting


Description




Map column


Select column to use for location data from the drop-down. See also About map view location data points.




Secondary data table


Optional. Select a table that defines a secondary data layer for the map.




Map type


Select the type of map to show. Options include:

Automatic - AppSheet selects the map type.
Road - Shows transportation infrastructure, including roads, speed limits, and so on.
Aerial - Shows Google Earth satellite images.





Location mode


Select how frequently you want to update your current location on the map. 

None - Hide the location marker.
Normal - Updates location marker at a medium cadence. 
High - Updates location marker at a high cadence. This setting might quickly drain the battery of a mobile device.




Minimum cluster size

Set the pin cluster size. When the number of pins occur in close proximity, they will be displayed as a single cluster for improved performance.
Set to 0 to disable clustering.




Use map pins
Each location is displayed as a map pin. You can click or tap a map pin to select it. When you select a map pin:

The map centers on the selected map pin.
Information about the selected map pin is displayed using one of the following views depending on the screen size:
    
Sidebar view - Detail view of the record; the same view displayed when selecting the row in a table view.
Compact view - Single deck view row at the bottom of the screen.



Each view includes a built-in driving directions action (car icon) that will launch Google Navigation from the current location to that destination. (iOS users will need to install Google Maps for this feature to work). The views can be configured using reference views.
You can customize the map pins, as described in the following sections:

Control the number of pins displayed
Customize the pin color and icon style using format rules
Show or hide points of interest

Control the number of pins displayed
For performance reasons, only a limited number of pins can be displayed at once. If the total pins exceed the limit, the map will prioritize showing pins closest to the center of the current view.
You can control the number of pins displayed by using the Map pin limit setting when configuring global map view settings.

Customize the pin color and icon style using format rules
Customize the color and icon style of map pins using format rules. You can apply format rules selectively to format a set of map pins one way, and other map pins another way. This allows you to highlight certain map pins or to categorize map pins into groups.
To customize map pins:

Open the app in the editor.
Go to App  > Format Rules and click + in the Format rules heading to create a new format rule.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor

Go to UX > Format rules and click +New Rule to create a new format rule.



In the For this data drop-down, select the table containing the Address or LatLong field.
In the Then format these columns drop-down select the name of the Address or LatLong field.
In the Highlight color property enter the map pin color you wish by specifying its hex color code. For example, #FF0000 for red, #00FF00 for green, #0000FF for blue, #FFFF00 for yellow, #00FFFF is cyan, #FF00FF is magenta, and so forth. 
In the icon drop-down, select the style of icon you wish. For example, fa-car.
In the If this condition is true property, enter a Yes/No expression. The format rule will be applied when the expression is TRUE.

Create a format rule for each map pin format you wish. Specify the appropriate If this condition is true expression to apply that format rule to the map pins you wish.
Show or hide points of interest
Show or hide points of interest on the map view by using the Hide points of interest setting when configuring global map view settings.
Get driving directions

You must install Google Maps on iPhone and iPad devices to get driving directions.

To get driving directions, click the map pin. A small car icon will appear at the bottom of the app. Click the car icon to activate Google Maps driving directions.

Use your Google Maps integration
Use the Google Maps key from the account settings for geocoding requests by using the Use my google Maps integration setting when configuring global map view settings.
Enable to .

You must turn on this setting if you have more than 1000 geocoded addresses per month.

Use KML layers to display geographic data
KML (Keyhole Markup Language) is a file format used to display geographic data, most commonly on platforms like Google Earth or Google Maps, that allows for embedding and displaying location points, borders and shapes with different styles. To learn more about KML, review this Community post.

  To enable a KML layer in your map, edit the column definition of any Address or LatLong column type to add a link to a hosted KML file in the Optional Url form KML File setting. 
There are some constraints on the size of KML files that can be displayed:

Maximum fetched file size (raw or compressed): 3MB
Maximum uncompressed KML file size: 10MB
Maximum number of network links: 10
Maximum number of total document-wide features: 1000
Maximum number of KML layers: 10 to 20

These constraints are established by Google Maps; AppSheet doesn't have the ability to modify them.
Download an example of a KML file that fits these constraints: https://code.google.com/apis/kml/documentation/us_states.kml
Here are a couple of sites with interesting KML files:

Donny's Resources
South Australian Government Data Directory
US Census Bureau

About map view location data points
Map view location data points can come from an address, LatLong (GPS) information, or XY (coordinates of a point).
Address data
When you enter an address, always specify the complete address including the city, state (if any), and country. This makes it easier for Google Maps to locate the address. A column header called Address will help AppSheet identify the column more efficiently.
If an Address is not mapped correctly, look up the address on Google Maps to see if there is a problem with the address. If you add many addresses at once to the data source, there may be a delay before you see all the addresses appear on the map within the app because each address must be geocoded before its position can be displayed.
LatLong data
LatLong data is represented as comma-separated decimal values, as in: 44.2456, -122.3348
LatLong data can be captured in a form field when editing or adding rows via the LatLong and ChangeLocation column types.
The current location button on the LatLong input uses high-accuracy GPS location capture on your device, which is potentially time-consuming and battery-intensive. Using a ChangeLocation column or an app formula or initial value expression of HERE() for a LatLong column enables passive location capture within the form, but the accuracy may be reduced compared to using the current location button. 
XY data
The XY column type represents a position within an image that you provide. When a map view is configured with an XY-type Map column, it will display the image in place of the usual map.

  To enable an XY image map, change the column definition of your location data to XY and add a link to your hosted image (as quoted text or an expression) in the Background image for the XY coordinates setting.


 
   Was this helpful?How can we improve it?YesNoSubmit   

 Onboarding view typeThe onboarding view type enables you to provide a set of introductory pages for onboarding users.
The following provides an example of the Instructions onboarding view provided with the Shift Scheduling template.

Use an onboarding view in your app as described in the following sections:

Get started with an app template
Prepare your data
Create an onboarding view
Configure the onboarding view options

See also Views: The Essentials for more information about managing views.

Format rules are not supported for onboarding views at this time.

Get started with an app template
An example of the onboarding view can be found in the Shift Scheduling template.
Prepare your data
You need to create a table that defines the content components displayed on each page in the onboarding flow, including columns for one or more of the following:

Image
Title of the page
Short description
Additional description

The following provides an example of the Instructions table used in the onboarding view in the Shift Scheduling template.

Create an onboarding view
To create an onboarding view:


Create a view, as described in Create a view.


Configure the onboarding view, as follows:


When configuring the onboarding view details, as described in View details:


Select onboarding as the View type.


Select the onboarding table (see Prepare your data) in the For this data drop- down.




Configure the onboarding view options.


Configure the Display, Behavior, and Documentation settings, as described in Configure the view.




When you are done, save your changes by selecting one of the following:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure the onboarding view options
Configure the onboarding View options by using the settings described in the following tables.




Setting


Description




Image


Image to display for a specific page. Select the table column in the drop-down list.




Title


Title of the page in the onboarding flow. Select the text-based column in the drop-down list.




Short blurb


Short description. Select the text-based column in the drop-down list.




Second short blurb


Additional description, smaller font size. Select the text-based column in the drop-down list.




Finish view


View to navigate to after completing the onboarding flow. Select an existing view in the drop-down list.




 
The following figure shows how the View options settings appear in the Instructions onboarding view in the Shift Scheduling template. The sample data has been modified to include an example of the contents for the Second short blurb.

   Was this helpful?How can we improve it?YesNoSubmit   

 Reference viewsWhen you select a row from a table view or you edit a row, you are not taken to a top-level view that is accessible in either the menu or the buttons at the bottom of your app. Instead, you are taken to a reference view (or ref view for short). A ref view is a hidden view that is only used when drilling down into your data, editing or adding data, or displaying a row using a Ref column.

Get started with a sample app
User-defined reference views
System-generated reference views

Get started with a sample app
The Activity schedule sample app provides a simple example of reference views. The Notes user-defined reference view and its associated system-generated views (Notes_Detail, Notes_Form, and Notes_Inline), shown in the following figure, enable users to view or add notes to a student's activity details.

The following figure shows how the views are displayed and accessed in the app.

User-defined reference views
You can also explicitly define ref views by creating a new view and setting its position to ref when configuring view details. Any user-defined ref view takes precedence over system-defined ref views. You can create ref views based on tables or slices. The ref view configuration will be used whenever the data source of the ref view matches that of the view you are starting from.

System-generated reference views
The system automatically generates ref views for each of the tables in the app. For example, a table called Students will have a Students_Detail view. If the table allows adds or edits, there will also be a Students_Form view. If the table can be shown inline because it has a reference to another table, it will also have a Students_Inline view.
You can modify the system-generated views to easily change the look and feel of the app. See Views: The Essentials.
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Control row sort order in a viewYou can control the order in which a view's rows are displayed, except for Map and Chart views.

For an example, see the How to sort template.

To control sort order:

Open the app in the editor.
Go to App  > Views and click the view you want to edit in the View panel.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor

Go to UX > Views and expand the view you want to edit.



In the Sort by field, click Add to add a column to sort by.
Select Ascending (that is, AAA is shown before ZZZ) or Descending (that is, ZZZ is shown before AAA) order.
Repeat to add additional columns to sort by.
Save the app.

   Was this helpful?How can we improve it?YesNoSubmit   

 Control whether and when a value can be edited in a formTo control whether and when a value can be edited in a form, use the Editable_If expression, which is part of the column definition. Editable_If is a column constraint that you define by using the Columns pane of the app editor. It tells the system if a particular value of a particular row can be edited.
Some examples are provided below based on specific scenarios.
Scenario 1: I have a building assessment app with 10 questions. I want the fields to be editable until the user presses save.  Once saved, I want the fields to no longer be editable.
Resolution: Set the Editable_If expression to ISBLANK([_THIS]). This means you can edit the value only if it is blank. After the users presses save, the fields are not blank and therefore not editable.
Scenario 2: I have a building assessment app with 10 questions. I want the fields to be editable until the assessment is marked Complete.  Once saved, I want the fields to no longer be editable.
Resolution: Set the Editable_If expression to NOT ([Status] = "Complete"). 
Scenario 3: I have a building assessment app with 10 questions.  I want the fields to be editable until the assessment is marked Complete.  Once saved, I want the fields to no longer be editable by anyone other than Bob.
Resolution: Set the Editable_If expression to OR ( NOT([Status] = "Complete"), USEREMAIL() = "bob@mydomain.com")
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Control grouping in a viewControl the grouping of records under headings when using a deck or table view.

Group records by a column
Group records using multi-level drilldown

Group records by a column
To group records by a column:

 Open the app in the editor.
Create a deck or table view.
In the Group by option, click Add to add two or more columns to group your data by.



For example:

Group records using multi-level drilldown
To group records using a multi-level drilldown:

 Open the app in the editor.
Create a deck or table view.
In the Group by option, click Add to add two or more columns to group your data by. You can group by as many columns as desired. Click Delete (trash can) to delete columns.


Note: If you don't want a grouping header on the final level of grouping, add the _RowNumber column as the final grouping column. This makes it easy to select a group from the list.

For example:

 
   Was this helpful?How can we improve it?YesNoSubmit   

 Control column order in a viewAppSheet does its best to automatically order columns by their importance. If you’re using a detail, form, or table view, you can manually control the column order.
The following sections describe how AppSheet automatically orders columns and how you can manually control the column order.
How AppSheet automatically orders columns
AppSheet automatically orders columns using the following rules:

Rule 1. AppSheet always shows the key because by definition it uniquely identifies each row. Without the key, it is unclear which data entry is being shown. If the key is hidden (by disabling the Show? toggle in the editor), AppSheet does not show the key and instead shows the data left to right. See What is a key?
Rule 2. Next AppSheet shows any fields that call for actionable icons (such as a phone number, email address, and so on). AppSheet assumes these items are things you'd want a quick click action on.
Rule 3. Then AppSheet proceeds left to right in spreadsheet column order. Position the more important columns to the left in your spreadsheet.
Rule 4. Many spreadsheets have a rightmost column that is computed by a formula-- such as, cost of items. If AppSheet recognizes this pattern, it makes sure to include this column.

Manually control the column order in a view

To add, reorder, or delete columns at the global level, see Add, reorder, or delete columns.

If you’re using a detail, form, or table view, you can manually control the column order when configuring the view.

From a table view, if you click on one of the rows, it will expand to show the whole row in a detail view. Currently, that detail view will not maintain the column order you specified for the table view. You can set that up separately by creating a detail view for the table, mark its position as Ref (to indicate that it isn't actually shown using a view button but only displayed when referenced), and define its column order as well.

To manually control the column order in a detail, form, or table view:

Open the app in the editor.
 Go to App  > Views and click the view you want to edit in the View panel.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor

Go to UX > Views and expand the view you want to edit.  



Expand the view you want to edit.
In the Column order field, the columns are ordered automatically, as described in How AppSheet automatically orders columns. To change the column order, do any of the following:
    
Click Add to add columns that you want to display in the order you want them to appear.
Click  to delete a column.
Click  to drag a column to a different order.
If you want to control the order of a subset of columns, but include all columns, you can add an All other columns at the desired location.
If you changed the column order, click Reset to switch back to the AppSheet automatic order.


Save your app.


Note: Make sure that you add the Show type columns that you want to be displayed. 

   Was this helpful?How can we improve it?YesNoSubmit   

 Control column width in a view
Note: The size of your device’s screen determines how many columns you see represented in a given view.

AppSheet doesn't let app creators manually set column sizes due to the wide variety of phone and tablet screen sizes. Instead we provide an option to control how wide the columns are.
While editing a view in the Views pane, there is an option named Column width:

Column width has three settings:

Default: Columns will be automatically sized based on the size of the row content and column type.
Narrow: Columns will be automatically sized but will be smaller than they otherwise would be. Use this option to fit more columns onto small phone screens by truncating more text than normal.
Wide: Columns will be automatically sized but will be given some extra space. Use this option if you're having trouble with some columns being truncated.

Some other variables can affect column width:

Changing the app's font size in Options
Increasing text size or adding icons with format rules
Column type
Amount of text in each column that is sampled when selecting Save and verify in the editor or when the column structure is regenerated

   Was this helpful?How can we improve it?YesNoSubmit   

 Quick edit columnsQuick edit columns allows you to mark specific columns to be editable directly from the Detail view. For example, quick edit is ideal for updating the Status field of a record without editing the full record.
The following columns cannot be set as quick edit columns:

Key columns
Read-only columns
Columns computed by an AppFormula or sheet formula
System columns like row number
Change type columns
Columns with Editable_If expressions that disallow edits.

Other notes about quick edit columns:

Changes to quick edit columns can cause other column values to change through formula dependencies.

Valid_If and Required_If conditions will be applied. Changes that violate either the Valid_If or Required_If conditions will be rejected.

Each edit is a separate row update, so quick edit is best used together with the Delayed Sync option. You can set Delayed Sync when configuring offline and sync.

Add quick edit columns as described in the following sections:

Get started with an app template
Add a quick edit column

Get started with an app template
The Quote Generator app template demonstrates a quick edit column. 
When configuring the Customer Quotes_Detail view, the 10%Deposit Paid column is added to the Quick edit columns list.

When using the app, the value is editable in the detail view.

Add quick edit columns
To add quick edit columns:

 Open the app in the editor.
Go to App  > Views.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Go to UX > Views.  




Create a detail view for the table or slice you wish to configure as quick edit. The table or slice must allow edits.
Expand the newly added view.
Add one or more Quick edit columns.
Set the view position to ref if you do not want to add a button for this new detail view.


 


   Was this helpful?How can we improve it?YesNoSubmit   

 Charts: The EssentialsIf you're looking to display your data with a more visual-driven focus, then you should consider using Chart views. 
When creating a chart, you should ask yourself three different questions:

What chart display type should you use?
What values do you want on the X and Y axes? This would be determined by the orientation of your data set. 
How many individual series on the chart do you want to draw? This would be determined by the number of columns or rows that you have in your chart.

Let's answer the first question by exploring the charts that AppSheet supports. 
What chart display type should you use?
Histogram
A histogram displays the frequency of data items in successive numerical intervals. This is ideal for segmenting and drilling down a data set. You can also represent the aggregated values as an aggregate pie chart.

Pie chart
A pie chart displays the proportions of data items in comparison to each other. Each row in your data creates one slice of the pie.

Pie charts are useful for displaying categories of qualitative or descriptive nature. 
Donut chart
A donut chart also displays the proportions of data items in comparisons to each other, in the same manner that a pie chart does. Likewise, each row in your data creates on segment of the donut. 

Scatterplot chart
A scatterplot chart plots two variables of a set of data on a graph. This is useful for visualizing any correlation between said variables.
Column series chart
A column series chart is a bar chart. It creates series based on the columns of the data set; therefore, it is most appropriate for data sets with just a few columns. For an example, see the Contractor costs feature sample.


Notice the orientation of the data; both quantities along the X and Y axes (years and number of cats) are columns in the data.  This is what distinguishes a column series chart from a row series chart - in a row series chart, both quantities would be rows in the data.
Row series chart


While the visual chart is identical to a column series chart, now the x- and y-axes are taken from rows in the data. 
When selecting between column and row series, make sure to consider in which direction your data is oriented. 
Column/row series [Line]
A column/row series [line] chart is a line chart; this is often used to visualize a trend in data over intervals of time.

As with regular column/row series charts, you can create either a column or a row series [line] based on the direction your data is oriented. 
Column/row series [Stack}
A column/row series [stack] chart is a stacked bar chart; this is often used to break down large categories and compare parts of the whole.


As with the column/row series chart and column/row series chart [line], the values that display on the x and y-axes depend on the direction that your data is oriented. 
What values do you want on the X and Y axes? 
There is currently no way to independently select the X and Y axes of your bar, line, and stack charts. 
In order to select the values that will go onto the X and Y axes,  you must go into your data and determine whether you should use a column or row series chart. 
Take the chart below for an example. Assume you want to display the Year column along the X axis, and the Cats column along the Y axis. Because you want to visualize columns, you would select Column Series Chart as the chart type in the editor.

How many individual series on a chart do you want to draw?
This would depend on the number of columns or rows you have in your data. In the above data, you could display up to two series on the same chart.

  For example, if you want to display dogs and cats on the Y axis, go to the Views pane, expand the view, and add any columns that you want to visualize on your graph using the Chart columns field.
   Was this helpful?How can we improve it?YesNoSubmit   

 Display URLs, documents, and audio filesYour app can also display external URLs, documents, and audio files.
AppSheet supports two data types for external content: URL and File. If you have URLs in a column, the app allows users to click on the URL and see the content in a hosted web browser window. Additionally, the users have the option of opening the content externally in the native web browser on the device (such as mobile Safari on iOS).
If you have files in a File column, the app opens the content in a hosted web browser. Depending on the device and operating system, there may be support for viewing a variety of file types-- for example, most browsers enable PDF viewing and playback of MP3 audio files.
To include files or PDFs in your app, you will need to add either the file name or the URL where the document is hosted. if you are using URLs, make sure they are publicly accessible by placing them in a public folder.
   Was this helpful?How can we improve it?YesNoSubmit   

 Display images and documentsThe following sections provide guidelines relating to the display of images and documents in your app:

Where are images and documents stored?
URL value
File name value
Custom image guidelines
Images in a detail view
External URL for image files
Show images in Smartsheet
Document and image caching

Where are images and documents stored?
In the app editor, images are stored in Image column types; documents are stored in File column types. In your spreadsheet, image or document values are stored as either a URL or a file name.
URL value

If you store the value as a URL, make sure that the URL is publicly accessible. 

Many users who choose this option provide image URLs that appear accessible to them, but are not really accessible to the public. Here are some examples of bad image URLs:


Facebook:  You may be able to access images from your Facebook album because you are logged into Facebook, but when some other user tries to see the image, they will get an error. Whenever you are using an image from some kind of online storage provider, make sure that public access permissions are provided.




Google Drive: Viewing an image on Google Drive shows your image on a web page that hosts an image, but the URL of the web page will not work as a link to your image. We recommend using the solution described in File name value.



Dropbox: Dropbox, like most cloud file systems, shows your image on a webpage, but the webpage itself is not actually an image. It is a web page that hosts an image. This article explains how to construct a link to a Dropbox image. 

Local Computer: An image URL from your local computer of the form file://MyImages/MyImage.jpg or C:/MyImages/MyImage.jpg. AppSheet has no access to your local computer, nor do you have the option to upload an image to AppSheet. Instead, place your images in your cloud storage provider and use one of the mechanisms described above.


File name value

If you store the value as a file name, the image or document must be stored in your cloud file system, not on your own computer.



In the app editor, AppSheet provides a file selector widget that lets you browse your cloud file system to find an image.




If you are specifying an image or document file name in your spreadsheet, the file should be in the same folder location as your spreadsheet. For example, if you use Google Drive and your spreadsheet is in the /appsheet/data/MyApp folder, then if you have the image MyImage.jpg in the same folder, you can just use the value, MyImage.jpg, in the appropriate cell.




It is sometimes easier to organize images in their own folder. For that reason, we allow image file names to be specified relative to the location of the spreadsheet. For example, if your images are in a subfolder called Images, you can use the cell value, Images/MyImage.jpg or ./Images/MyImage.jpg.


See IMAGE in the Docs Editor Help Center if you need assistance with image sizing.
Custom image guidelines
AppSheet downscales all images to 600 pixels (600px) wide, except for the app background image, which is 1000px wide. For custom images, we generally recommend using square images: 600x600px.
Images in a detail view
The detail view has a main image. The main image is automatically selected but can be overridden with the Main image setting when configuring the view.

The Image style property can be used to control how the image is shown: Fill will crop the image to fit the header area (great for photos); Fit will scale the image down to fit inside the header area (great for logos); and Background will use the image as a background for the whole view (great for pattern images and some photos).
In Fill mode, images shown at the top of the detail view will be a maximum of 768x400 pixels. On small screens (768 and below) the image will be 320px tall, otherwise it will be 400px tall. We recommend making a 768x400 image with the middle 375px as usable area, the sides will be cropped off on phones and other small screens. Here's a sample:

External URL for image files
By default, app images and other files identified by name (such as, MyImage.JPG) or relative path (such as, Images/MyImage.JPG) will not have a predictable, meaningful URL that can be readily used outside of the app. If you would like the images stored by the app to be available for other uses, you will need to take extra steps.
For security reasons, AppSheet produces cryptic public URLs for images and files stored by the app. To instead produce URLs that are less secure but more friendly to external use, this default security feature must be disabled. To do so, go to Security  > Options in the app editor and disable Require Image and File URL Signing:


By disabling Require Image and File URL Signing, you are making your app files less secure. An app user could potentially modify an image or file URL in order to view any other image or file stored by the app. This setting affects the security of all images and files stored by the app. It is best to leave the feature enabled if possible.

Next, configure your app to produce a URL that is usable outside the app for each image or file that should be so accessible. Add another (optionally virtual) column to the same table as the column containing the image or file name, with an App formula expression like this:

CONCATENATE(
  "https://www.appsheet.com/template/gettablefileurl",
  "?appName=", ENCODEURL(CONTEXT("AppName")),
  "&tableName=", ENCODEURL(CONTEXT("Table")),
  "&fileName=", ENCODEURL([image-or-file-column])
) 
 
Replace AppName and Table with the name of the app and table containing the image or file, and image-or-file-column with the name of the column containing the image or file name or relative path. 
Show images in Smartsheet
Normally, images are stored as files in a cloud file system and the name of the file is put into a cell of the corresponding row in the data spreadsheet. If your data is in Smartsheet however, there are a couple of extra considerations. Smartsheet does not have a traditional 'file system'. Instead, the images associated with any row should be stored as a row attachment and the name of the attachment file should be stored in the corresponding cell.
Smartsheet allows an image to be saved and shown inline within a cell. Any images captured via an AppSheet app will be saved as a row attachment and will also additionally display inline with the specific cell. However, if you are creating a data set for use with an AppSheet app, the inline images cannot be read and processed by AppSheet. You will need to create the images as row attachments as described earlier.
Document and image caching
AppSheet caches documents and images in Cloud CDN because it is expensive to retrieve and serve images directly from AppSheet servers. It is even more expensive if AppSheet must resize the image before displaying it.

  If you are reusing the document or image file URL and directly updating the contents of the document or image file, you will only see the updated value once the cached image ages out of the Cloud CDN cache.

To display a document or image without using the cached version (and without enabling secure access, as described below), see this Community article. 

If you enable Secure PDF or Secure Image Access, AppSheet does not cache the document or image in Cloud CDN, however retrieval performance will decline. You can enable Secure PDF or Secure Image Access by going to Security  > Options in the app editor:

   Was this helpful?How can we improve it?YesNoSubmit   

 Work with PDF FilesThere are three ways you can include PDFs in your application. 
Link to the PDF using a relative path
Using relative paths, you can create links to files relative to the spreadsheet that your app is using. This works in a similar way to links to images. For example, if the PDF is in the same directory as your spreadsheet, you can create a link to it just by putting in its name in your spreadsheet, such as bovine.pdf.
Link to the PDF using a direct URL
Using direct URLs, you can link to a pdf that is somewhere on the internet. Just like you would link to an image, you can link to a pdf. For example: http://www.mywebsite.com/path/super_pdf.pdf
Use a Google Drive URL
These are URLs that you copy from your address bar in your browser when you are previewing a PDF in Google Drive, such as https://drive.google.com/view?id=1234
Note that these are not direct or relative links, which means you are not supplying AppSheet with the actual PDF file. This means that you won’t be able to take full advantage of AppSheet’s PDF support.
How does it work?
iOS - Regardless of the type of URL, the pdf will be opened in Safari. However, only relative and direct URLs are guaranteed to be cached for offline use.
Android - If you link to the PDF using a direct URL or relative path, the PDF will be downloaded to your phone, and you will be able to choose a viewer with which to view it. If you do not have a PDF viewer installed on your phone, AppSheet provides you with a link to the recommended viewer.


Google Drive URLs will open correctly. However, you will not be able to open them with a PDF viewer on your phone, and they are not guaranteed to be cached for offline use.
   Was this helpful?How can we improve it?YesNoSubmit   

 Style: The EssentialsConfigure the theme and brand to control the appearance of your app. Your choices in this part of the editor allow you to choose a color theme, select images that are relevant to you and your users, and have an icon that represents your business. You can select these images from your cloud provider. In addition, you can change theme colors, fonts, and text size. You can also customize your About page to better describe the app to your users. 
 To configure the theme and brand: 

 Open the app in the app editor.
Go to Settings  > Theme & Brand.
Configure the settings.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy editor

 To configure the theme and brand: 

Open the app in the app editor.
Select UX > Brand.
Configure the settings.
When you are done, save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






There are several branding elements that you can customize in the editor.

Configure the theme and brand using the settings described in the following table.



Setting
Description


Theme
Choose a light or dark theme.


Primary color
Select the color palette used in the app to control the appearance of the header, footer, text, and icons. You can select one of the colors in the palette or click Custom to select a custom color.


App logo

Specify the icon that your users click to launch your app from the device's home screen and to display in the App Gallery. See also Access your apps.
We encourage you to provide an icon that reflects your business or brand. This icon should be a square image up to 196 X 196 pixels in size. AppSheet automatically resizes it for different environments. It is recommended that the logo not exceed 500 KB.



Launch image
Specify the image shown when the application is initially launched, and when Sync is in progress. It should be at least 600 x 600 pixels in size.


Background image
Specify the image to be used for the background for all pages in the app. It should be at least 1000 x 1000 pixels in size. Try different background images to find one that works aesthetically. If your application data contains images, a background image can be distracting. You can select images from your cloud provider. It's a good idea to keep your images in the same folder as your app's spreadsheet.


Header & Footer
Customize the header and footer in your app to show or hide the view name, logo, or menu and search buttons, and style the header and footer.


Fonts

Configure the font style and size for the app content.
The font style applies throughout the app and may not be overridden elsewhere. The font size also applies throughout the app, but format rules may be used to adjust font size in some places.
Custom fonts are not supported.





 
   Was this helpful?How can we improve it?YesNoSubmit   

 Format Rules: The EssentialsFormat rules enable you to change the way information is displayed throughout your app.

About format rules
Add format rule
Add format rule to your favorites

About format rules
Format rules allow you to customize icons, text, and more. This helps you make your app more unique. You can also make different formatting rules for each row, creating different formatting for different data.
An app can define more than one format rule and, in fact, more than one rule can match the same data at the same time. In such cases, the order of the formatting rules in the app determines the actual behavior.
The rules are processed in order from the first to the last. If two matching rules conflict in their formatting information, the last rule takes precedence. So for example, if Rule 1 matches and sets the Text Size to 1.5 and Rule 2 also matches and sets the Text Size to 2.5, the final Text Size will be 2.5.
In the case of icons, the rules are additive. So if Rule 1 matches and assigns an icon and Rule 2 also matches and assigns an icon, both icons are shown for the data.

Expensive format rules that require a lot of computation each time a screen is scrolled can affect the app's interactivity and performance.
 
Format rules are not supported for onboarding views at this time.

Add format rules
To add format rules:

Open your app in the app editor.
Go to App  > Format Rules and click + in the Format rules header.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Go to UX > Format Rules and click + New Format Rule.




Configure the following properties:
    


Property
Description


Rule name
Name of the format rule.


For this data
Table that the rule applies to.


If this condition is true
Condition that must be satisfied for the formatting rule to take effect. If you leave this blank, the rule applies to all rows in the table. However, you could specify a simple formula like [Country] = "USA" or a more complex formula for richer behaviors


Format these columns and actions

Columns in the table that you want formatted. Hold down the Ctrl key to select multiple items.






 


Optionally, as shown in the above figure, you can customize the visual, text, and workflow template format, or provide a descriptive comment for the format rule by expanding the additional sections. For example:


Show an icon next to the row, inside the map pin, or on any UX view.
          Expand the Visual Format section to set icons based on rules for the data in your app. Make sure to select any column where you would like the icon featured (choose your location column to feature icons inside map pins instead of numbers). You can browse through the icons and click on the one you want to use, or search for a specific icon using the text box. Note: Adding icons will affect the size of columns in the Table view. 


Customize the text and highlight colors from the list of theme-based colors.
          Highlight color determines the color of the icon. You can also manually type in any hex-based color code you want, such as #0F77FF. You can use this tool to find color codes: http://www.colorpicker.com

          The image below shows the results of the visual customizations in the format rule.







Individual format rules can be disabled. If so, they remain in the app definition but they do not run. This is useful if you want to define and test a format rule, but do not yet want to enable it for live use.

 Add a format rule to your favorites
To easily access frequently used format rules, add them to your favorites. 
 To add a format rule to your favorites:

Open the app in the app editor.
Go to Apps > Format Rules.
Position your cursor over the format rule in the Format rules pane and select More > Add to favorites.

Remove an format rule from your favorites by positioning your cursor over the format rule in your favorites and clicking x.
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Customize the About pageEach app has an About page that your users can access from the  menu at the top left. For example, the following provides an About page from one of the sample apps.

You can customize the information that is displayed, as described in the following sections.

Customize the page
Configuration properties



To customize the app logo image that appears on the About page, see Style: The Essentials.
You can make the About page the app's initial launch page as described in Choose the launch page for an app.


Customize the page
 To customize the About page: 

Open the app in the app editor.
Select Settings  > Information.
Expand each section and configure the properties, as required.
When you are done, save the task by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.





We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

 

If you are using the legacy editor


To customize the About page: 

Open the app in the app editor.
Select Info > Properties.
Expand each section and configure the properties, as required.
When you are done, save the task by selecting one of the following:
          
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.







Configuration properties
Configuration properties that you can use to customize the About page are summarized in the following sections:

App Properties
Information for App Users
App Documentation

App Properties




Property


Description


Example




Short Name


Unique short name for the app.

For Chat apps, the Short Name can't exceed 25 characters; the information will be be truncated by Google Chat.



My App




Version


Version of app.


1.000005




Short description


Short description of the app.

For Chat apps, the Short description can't exceed 40 characters; the information will be be truncated by Google Chat.



Sample App




Category


Category of the app.


Tracking Apps




Function


Function of the app.


Inventory Management




Industry


Industry for the app.


Retail




Description


Description of the app.

For Chat apps, the Description can't exceed 200 characters; the information will be be truncated by Google Chat.



A sample app with sample data




Personal use only?


Flag that indicates app is meant for personal use only.


 




Default app folder


Default location for all app files.


/appsheet/data/MyApp-1234




Information for App Users




Property


Description


Example




User Guidance


App user guidance.


Some user guidance




About Url


URL for about app information.


about.example.com




Use Public Owner


Flag that specifies whether to display your team's public app owner.


 




Privacy policy


Privacy policy for the app.


Some privacy policy details.




Terms of use


Terms of use for using the app.


Some terms of use.




App Documentation




Property


Description


Example




Purpose


Purpose of the app.


Track item details and log incoming and outgoing inventory amounts.




Design Details


App design details.


Some design details




Readme PDF document


Upload a PDF file that contains a description of the app.


 




Reference Url


URL for app reference information.


reference-url.example.com




   Was this helpful?How can we improve it?YesNoSubmit   

 Localize: The EssentialsCustomize system buttons and notifications and configure the locale and local currency.
Customize the system text, buttons, and notifications
You can choose to change system text, buttons, and notifications, such as the Share, Sync, About, or Log out buttons, to accommodate your language or terminology preferences. 
To change the system text, configure the localization settings for the view. We generally suggest using short text strings so that they fit comfortably on the screen.
While this is a very simple solution, it's usually sufficient to address a large class of localization requirements for apps. Most apps target users with a specific language in mind. If an app needs to work with different languages simultaneously, this solution will not be adequate.
Locale support and local currency
Configure the locale of your app using any cloud provider supported by AppSheet. You can learn more about Locale support in AppSheet. You can also convert from US dollars to your local currency, if required.
   Was this helpful?How can we improve it?YesNoSubmit   

 Locale support in AppSheetThe following sections summarize the locale support in AppSheet:

Locale for Google Sheets
Locale for AppSheet 
Configure the locale
About the compatibility locale
Locale for Excel
Locale for Smartsheet

Locale for Google Sheets
The Google Sheets Locale setting controls how Date, DateTime, Decimal, Percent, Price, and Time values are entered into Google Sheets. See Set a spreadsheet's location and calculation settings.
For Date value, when the Google Sheets Locale is United States, dates are normally entered in MM/DD/YYYY format. Conversely, when the Google Sheets Locale is United Kingdom, dates are normally entered in DD/MM/YYYY format.
For Decimal values, when the Google Sheets Locale is Japan, United Kingdom, or United States, you must enter a period as the decimal separator between the whole and fractional parts of Decimal, Percent, and Price values. Conversely, when the Google Sheets Locale is Brazil, France, or Germany, you must enter a comma as the decimal separator.
If your Google Sheet was generated as a response sheet for a Google Form, setting the sheet locale may not automatically apply the new locale formatting to existing columns. To fix this, highlight the column and apply the appropriate formatting from the Format / Number menu in the toolbar.
Locale for AppSheet
When configuring table settings, the AppSheet Data locale setting in the Localization section controls how AppSheet reads and writes values from Google Sheets. The AppSheet Data Locale must match the Google Sheets Locale. This ensures that your application reads and writes Date, DateTime, Decimal, Percent, Price, and Time values to the Google sheet in the proper locale format.
When you add a new table to your application using the app editor, AppSheet automatically retrieves the Locale setting from the Google worksheet and sets the table's Data Locale setting appropriately.
If you later change the Google Sheets Locale setting, AppSheet automatically retrieves the new setting from the worksheet and sets the table's Data Locale setting appropriately the next time you open the app in the app editor.

Note: Data Locale does not impact the Price Currency settings and AppSheet does not provide currency conversions. Data should be entered in your spreadsheet/app according to the currency you would like displayed. See How to convert from US Dollars to my local Currency.

Configure the locale
To configure the locale:

Make sure that your Google Sheet specifies the appropriate locale. From the Google Sheets File menu, select Spreadsheet settings. In the Settings dialog, set Locale to your locale. For example, in Thailand select Thailand.


Make sure that each Currency, Date, DateTime, Number, Percent, and Time value in the Google Sheet is formatted appropriately. Do this by selecting all of the cells in the column containing the data values. From the Format menu, select Number and then the appropriate formatting style. For example, for date values, select Date, for currency values, select Currency, for time values, select Time, and so forth. Do this for each Currency, Date, DateTime, Number, Percent, and Time column.
Add the Google worksheet as a table using the app editor. AppSheet will automatically set the table's locale to match the Google worksheet's locale. If you later change the Google worksheet Locale setting, AppSheet will automatically set the table's locale to match the Google worksheet when you next open the application in the editor.


     
Make sure that your browser or device is set to use your locale. For example, in the United Kingdom, select the UK locale. In Thailand, select the Thai locale. The browser or device setting completely determines how data values are displayed within the app running on your browser or device. For information about setting the locale on a Chrome browser, see Change Chrome languages and translate web pages.
If you use a calendar other than the Gregorian calendar, make sure that your browser or device is set to use that calendar. For example, in Thailand, select the Buddhist calendar. Many countries use the Gregorian calendar, so in many cases you can skip this step.
Click Sync in the app to read the latest values from the Google Sheet. See if the Date, DateTime, Decimal, Percent, Price, and Time values are displayed correctly in the app. If not, verify your browser or device locale settings.
Try updating a Date, DateTime, Decimal, Percent, Price, and Time value and saving the changes to the server. See if the correct values appear in the Google Sheet and the app.
All data is sent between the app and the AppSheet server in a common universal format. This makes it easier for the app and server to communicate. It has no effect on how data is stored in the worksheet or displayed in the client. 

About the compatibility locale
One of the values appearing in the Data locale drop-down is the Compatibility locale. This value is present for backward compatibility only. It preserves AppSheet’s old, limited locale behavior. If you choose Compatibility locale, AppSheet uses a period as the decimal separator between the whole and fractional parts of Decimal, Percent, and Price values. AppSheet uses simple rules for saving Date, DateTime, and Time values. We save formulas in the United States locale format, which works for many locales that use a period for the decimal separator.
If your Google Sheet does not specify a Locale, AppSheet sets the AppSheet Data locale to Compatibility locale. However, we strongly recommend you specify a Google Sheet Locale.
We currently support approximately 70 Locale values. We selected these locales based upon the locales that Google Sheets currently supports. Contact Support if a locale you need is missing from AppSheet.
Locale for Excel
It is not necessary to set the AppSheet locale for apps that store data in Excel files on Box, Dropbox, Google Drive, Office 365, or OneDrive. This is a consequence of the way we add and update data and formula values in Excel files. The AppSheet Data locale should be set to either United States or Compatibility.
Locale for Smartsheet
It is not necessary to set the AppSheet locale for apps that store data in Smartsheet. This is a consequence of the way AppSheet adds and updates data and formula values in Smartsheet. The AppSheet Data locale should be set to either English (United States) or Compatibility.
If your app involves workflow rules that send emails or SMS messages, we use the locale of your table/sheet to determine how to format the values (like dates and times) in the message body. In this case, it is important to set the locale of your Smartsheet appropriately.

Note: Changing the table's Data locale in AppSheet does not retroactively change the format of previous written entries, nor does it affect how values are displayed in the app emulator. What’s displayed in the app emulator is based on the locale settings of your mobile phone or web browser. The table's Data locale setting only affects how data is read and written to the spreadsheet.

   Was this helpful?How can we improve it?YesNoSubmit   

 Considerations for apps using Date, Time, and DateTime formatsIf your data includes Dates, Times, DateTimes, or Timestamps, there are some special considerations to keep in mind.

Date, Time, and DateTime formats in spreadsheets
Date, Time, and DateTime formats in apps
Impact of daylight savings time


Some constant values, such as "MM/DD/YYYY", are evaluated as a Date value by AppSheet. Similarly, "000:00:00" is evaluated as a Duration value. This doesn't mean your spreadsheet data must use the same formats: the date and time formats in your spreadsheets are determined by the locale/language setting. Column will always be evaluated as the type of column. Additionally, you can convert data, both columns and string literals, to specific types using functions such as DATE(), TIME(), or DATETIME(). 

Date, Time, and DateTime formats in spreadsheets
Date, Time, and DateTime formats vary widely across locales. It is important that your worksheet specifies the correct locale and that all your worksheet data cells are formatted correctly, as described in Locale support in AppSheet.
Many spreadsheets use automatic mechanisms to add a timestamp in the first column. A timestamp is generally a poor choice for a key: though it uniquely identifies the row, the timestamp isn't really meaningful to the rest of the app. So if the timestamp is chosen as your key, you may need to change that explicitly.
Date, Time, and DateTime formats in apps
Date, Time, and DateTime formats are displayed in AppSheet apps based on:

Your mobile device's locale when running your app on a mobile device.
Your browser's language setting when running your app in a browser.

If you are seeing the wrong Date, Time, and DateTime format on your mobile device or browser, make sure your mobile device's locale or your browser's language setting is correct.
To change your language on:

Android, see https://support.google.com/accounts/answer/32047?source=gsearch&hl=en
iPhone / iPad, see https://support.apple.com/en-us/HT204031
Chrome, see https://support.google.com/chrome/answer/173424?hl=en

Impact of daylight savings time
When the AppSheet client sends data to the server, it uses the current daylight savings time. When saving a date that is not in the same daylight savings time period, the saved date will be off by one hour.  
   Was this helpful?How can we improve it?YesNoSubmit   

 Considerations for apps using Price, Percent, and Decimal formatsIf your data includes Price, Percent, or Decimal formats there are some special considerations to keep in mind.
Price, Percent, or Decimal formats in spreadsheets
Price, Percent, and Decimal formats vary widely across locales. It is important that your worksheet specifies the correct Locale and that all your worksheet data cells are formatted correctly, as described in Locale support in AppSheet.
Price, Percent, or Decimal formats in apps
Price, Percent, and Decimal formats are displayed in AppSheet apps based on:

Your mobile device's locale when running your app on a mobile device.
Your browser's language setting when running your app in a browser.

If you are seeing the wrong Price, Percent, or Decimal format on your mobile device or browser, make sure your mobile device's locale or your browser's language setting are correct.
To change your language on:

Android, see https://support.google.com/accounts/answer/32047?source=gsearch&hl=en
iPhone / iPad, see https://support.apple.com/en-us/HT204031
Chrome, see https://support.google.com/chrome/answer/173424?hl=en

   Was this helpful?How can we improve it?YesNoSubmit   

 How to convert from US dollars to local currencySince column type impacts how AppSheet handles your data, selecting the appropriate column type is important. AppSheet may not have recognized your data as currency either because it doesn't yet recognize Price in your language or because you used a spreadsheet column header such as Tuition.
You can change your Column Type to Price and since AppSheet displays currency in US Dollars, regardless of your selected Data locale, you can select the correct form of currency as well.

Open your app in the app editor.
Select Data   and select the data that you want to edit in the Data panel. 
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Go to Data > Columns and expand the table you would like to edit.



 Locate the column that you would like to edit and click the Edit (pencil) icon.
Select Price from the Type drop-down, if it isn't already selected.
Select your local currency symbol in the Currency symbol drop-down.
Click Done.
Save your changes.

   Was this helpful?How can we improve it?YesNoSubmit   

 View settings: The EssentialsConfigure view settings to tailor the app's user experience.

Configure view settings
General settings
View type settings
Localization settings


To configure the theme and brand to control the appearance of your app, including font style and size, see Style: The Essentials.

Configure view settings
To configure view settings:

Open the app in the app editor.
Go to one of the following: 
    
Settings  > Views: General to configure configure general settings
Settings  > Views: View type options to configure view type settings
Settings  > Views: Localization to configure localization settings


Configure the settings.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy editor

 To configure view settings:

Open the app in the app editor.
Select UX > Options.
Configure the settings described in the following sections.
When you are done, save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






Configure general settings
Configure the General settings that apply across the entire app.

Data Formats
General
Inputs
System Buttons

Data formats
Configure the data formats that apply across the entire app.



Setting
Description


Use accounting format
Display price columns using accounting format.



General
Configure general settings that apply across the entire app.



Setting
Description


Starting view
Identifies which view the user sees when the app is launched the first time after installation. See Choose the launch page for an app.


Start with About

 If enabled, the app's About page displays the first time the app is started after installation, before any configured view is shown. The user will need to click OK to access app functionality.
The app's About page may be accessed within the app from the app main menu.




Show name and email in the side menu

 If enabled, the name and email address of the app user displays in the app's main menu. This information is only known and displayed if the app requires user sign-in.




Pull to refresh
Enable to allow users to initiate a sync by dragging down.


Preview new features
Enable the Preview new features option to gain access to app features that are in the Preview Program.


Desktop mode (Preview)
Enable the new desktop design, currently in preview, to optimize the desktop experience.



Inputs
Configure the input settings that apply across the entire app.



Setting
Description


Image upload size

Used to automatically downscale images uploaded with the app. See Capture images for more information. Choose Full to disable down-scaling.
This setting applies throughout the app and may not be overridden elsewhere.




Save images to gallery


If disabled, images taken from within the app on a mobile device are not saved to the device photo gallery/camera roll and are not accessible outside of the app.
This option is available to the following mobile app versions and above: 15.7 on Android or 15.2 on iOS. On earlier versions, images are always saved to the gallery.
Note: In some rare cases, a sync might be processed without an image. In this case, a copy of the image device’s gallery could be used as a backup, but only if this option is enabled.




Allow image input from gallery


If enabled, the app user may choose an existing image or use the device's camera to capture a new one; if disabled, existing images are not available to the app.
Note: This setting applies throughout the app and may not be overridden elsewhere.




Allow scan input override


If enabled, the app user will have the opportunity to edit the value scanned from a barcode or with NFC; if disabled, the scanned value may not be edited by the app user.
Note: This setting applies throughout the app and may not be overridden elsewhere.




System Buttons
Configure the system button settings that apply across the entire app.



Setting
Description


Allow five views in the bottom navigation bar
If enabled, the sync button appears in the top header bar and the share button moves to the side menu.


Disable share button
Enable to prevent users from sending app install links to other individuals.


Allow users to provide feedback
Enable to allow signed-in users to provide feedback to the app required. Requires user sign-in.



Configure view type settings
Configure the settings that apply to specific view types.

Dashboard view
Detail view
Form view
Map view
Table view

Dashboard view
Configure the settings for dashboard views.



Setting
Description


Show overlay actions in dashboards
Enable to show overlay actions in all views within a dashboard.



 Detail view
Configure the settings for detail views.



Setting
Description


Detail style

 Sets the default detail style, either Normal, Centered, No Headings, or Side-by-side.
The default detail style may be overridden for each detail view in the detail view's configuration.




Detail image style

Define the default image style for details views. Valid options include:

Fill - Enlarge or shrink an image to fill the screen area.
Fit - Enlarge or shrink an image to fit into the screen area.
Background - Set as background image.

You can override this setting when you configure the detail view.



Include Show columns in detail views
Enable this option to include Show type columns in detail views. By default, Show type columns only appear in form views.


Inline row limit
Set the maximum number of rows to display in inline-related reference views.



Form view
Configure the settings for form views.




Setting


Description



Form page style
Sets the default form page style: Default , Page Count, or Tabs.



Form style


 Sets the default form style, either Default or Side-by-side.
The default form style may be overridden for each form view in the form view's configuration.





Hide from numbering


Enable to hide numbering for fields in a form.




Advanced forms automatically


Enable to automatically advance to the next field or page after completing a field. 




Apply show-if constraints universally


If enabled, the Show_If column constraint is applied everywhere within the app; if disabled, Show_If applies only within form views. Most app creators will prefer this option to be enabled.
Note: This setting applies throughout the app and may not be overridden elsewhere.




Map view
Configure the settings for map views.




Setting


Description




Use my Google Maps integration


Enable to use the Google Maps key from the account settings for geocoding requests.

Note: You must enable this setting if you have more than 1000 geocoded addresses per month.





Max pin limit


Set the maximum number of pins to show in map views.




Hide points of interest


Enable to hide icons for local businesses, restaurants, and attractions.




Table view
Configure the table view settings.

Note: The table view settings apply throughout the app and may not be overridden elsewhere.




Setting
Description


Show column headers
Enable to show column headers at the top of table views.


Keep original column order

Enable to prevent AppSheet from intelligently reordering columns



Right-align numeric columns
Enable to display all numeric types as right-aligned.


Disable user sorting
Enable to prevent users from sorting tables by clicking the table header.



The following illustrates the impact of the various settings in the table views.

Configure localization settings
Customize the text shown in system buttons and notifications. Enter text or click the flask icon to enter an expression.
See also: Localize: The Essentials
   Was this helpful?How can we improve it?YesNoSubmit   

 Choose the launch page for an appTo choose the launch page, or starting view, for an app: 

 Open the app in the app editor.
Go to Settings > Views: General.
Set the Starting view field to the view by doing one of the following:
    
Select a view from the drop-down.
Click the expression (flask) toggle and enter an expression to be evaluated at runtime.


Optionally, to display the About page the first time a user opens an app enable the Start with About option.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy editor

 To choose the launch page for an app: 

Open the app in the app editor.
Select UX > Options.
Set the Starting view field to the view to use for the launch page:
        
Select a view from the drop-down.
Click the expression (flask) toggle and enter an expression to be evaluated at runtime.


Optionally, to display the About page the first time a user opens an app enable the Start with About option.
When you are done, save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.








   Was this helpful?How can we improve it?YesNoSubmit   

 Customize input formsYou can control the presentation of data.
If you choose to allow users to add or edit data from the Data section in the editor, your app will give users the ability to create or modify a data row using a form. The form is a sequence of labels (column names) and input fields (specific to the column data type). You can customize the form in the following ways:

Column descriptions--you might want to provide a verbose description of each column for the user. If a comment is found, it is used in the label instead of the column name.
Form style--configure the layout of the form and whether the individual fields are numbered as described in Configure view settings.
Using Show-type columns.

Show-type columns are empty columns in your spreadsheet that serve the sole purpose of improving the presentation of data capture forms. There are six categories of Show types. 
Categories:

Page_Header: Create a new page within the form
Section_Header: Create a new section within the same form page
Text: Show some descriptive text
Url: Show a clickable URL. Here's an example of the Content field format: {"Category":"URL", "Content":"http://www.your-url.com"}
Image: Show a static image. Here's an example of the image Content field format: {"Category":"Image","Content":"http://www.your-url.com/your-image.png"}  
    See also: Display images and documents
Video: Show an MP4 video or Youtube video (for MP4 videos, use the hosted link; for Youtube videos, use the embed link). Here's an example of the video Content field format: {"Category":"Video","Content":"https://www.youtube.com/embed/IdwbSNJwLAk"

Best practices
Here are some best practices for building effective forms in your app: 

Do not change column names in AppSheet-- the column names should match 1:1 with the column headers in the sheet. If you change the column names and they no longer match the column headers in the sheet, subsequent attempts to regenerate column structure will cause you to lose information you had added to the app definition.
Keep column names short. This makes it very convenient as you use column names in Show_If and other type qualifier conditions
Do not use column names with positional indicators. For example, Insulation Damaged? is a good column name. But (22) Insulation Damaged? is not. This again is meant to protect your app edits when you regenerate column structure. For example, if you add a new column before this particular column and change its name to (23) Insulation Damaged?, AppSheet will not be able to correlate this to the previous column definition.
Use the column Description (not the column Name) to provide long descriptive text. This is what is shown in the form as the question for the user. For example, Is insulation damaged on any cables in the system? Including in electrical boxes and on roof? The corresponding column Name on the other hand would probably be something compact like Insulation Damaged? If no Description is provided, AppSheet will use the column Name instead. 

Input form as the only view in the app
You can choose to make your input form the only view in your app, so new users are not able to see past submitted data.
To do this, simply delete any data view, only keeping the form view.
   Was this helpful?How can we improve it?YesNoSubmit   

 Create multi-page formsThis article explains how to break your forms into multiple pages. First, some basic information about forms in AppSheet

A form allows the user to enter information into a table. Therefore, every form is connected to a table where the information is stored. 
Each field on the form corresponds to a column in the underlying table. 
By default, the form field will be labeled using the column header in your table.
By default, the form fields will be displayed in the same sequences as they appear in your table.

See also: Create multi-page forms with conditional branching
Set up the table
When creating a multi-page form in AppSheet, think of the page break as another field in your form. Each field in the form corresponds to a column in the table. Therefore, to create a page break, simply create a new column in your table at the location where you want the page break to appear. 
The screenshot below shows an example column structure for a Contact Us form. Columns Page 1, Page 2, and Page 3 will be set as page breaks.


Note: You can call the column used for the page break anything you want. The name of the page break column is only visible to the app creator and will not be shown in the form.

Connect to AppSheet
After adding the table to AppSheet, the page break columns will appear along with all the other columns for the table. Set these columns to be page breaks as follows:

Open the app in the editor.
Go to Data  and select the table you want to edit in the Data panel.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    

If you are using the legacy editor

Go to Data, click Columns, and expand the table you want to edit.




Click Edit (pencil icon) next to the column name.
Change the Type to Show.
Change the Category to Page_Header.
Optionally enter text to be displayed at the top of the page.

For example:

View in the app
The default form will add a Next button for the user to progress between pages. On the final page, the user will be shown the Save button.

Change to use tabs
You can choose to break the form up with tabs. Change the Form page Style to Tabs when configuring the form view.


 
   Was this helpful?How can we improve it?YesNoSubmit   

 Create multi-page forms with conditional branchingYou might want to break up a long input form into several pages for convenience. In some apps, it makes sense to conditionally show or hide a specific page based on choices made earlier. For example, in a form for a vehicle inspection report, you may have an initial question asking if there is damage. If the answer is Yes, you may want to show a Form page that has specific questions about the damage. If the answer is No, you would want to skip that page.
Conditional branching in Google Forms
When you are building your app from a Google Form, use Add Item > Page break to split the form into multiple pages

Note: You can optionally provide a page header or description. This is helpful to remember where you're directing respondents and helping respondents understand your form's structure.

You can then add Multiple choice or Choose from a list items with the option Go to page based on answer and choose different navigation paths for each option. Often you will also want these conditional branching questions to be marked as required.
At each page break, you can also choose where the form should go next. Keep in mind that the page break navigation will only take effect under certain circumstances:

When the page has no conditional branching questions
When conditional branching questions are not required and no answer is given
When Continue to next page is chosen for specific answers to branching questions

After setting up your form, start the AppSheet add-on and click Prepare. The AppSheet add-on creates page header columns in your response spreadsheet to represent each page break and automatically converts the form's "go-to-page" navigation into AppSheet's Show_If expression model. The page header columns appear in AppSheet as Show type columns, meaning they affect the visual presentation of forms. The settings for these columns specifies the Category as Page_Header. You can examine the column structure.
Most forms can now be correctly converted to AppSheet apps automatically, but there are two main limitations:

Reverse navigation is not supported by AppSheet. Try to arrange your form such that all navigation proceeds to higher page numbers.
In Google Forms you can include a special Other option for multiple choice questions and assign it specific navigation behavior. However, the navigation associated with this choice is not made available to the AppSheet add-on. We recommend avoiding use of Other on questions where Go to page based on answer is enabled.

For more information about the conversion from Google Forms to AppSheet, see Use data from Google Forms. 
Conditional branching in your spreadsheet and the editor
When you are building your form app from a spreadsheet, insert an empty column at each point where you'd like a page break in the form. 
While conditional branching in Google Forms is based on a "go-to-page" navigation model, AppSheet uses a Show_If model to describe whether a given page should be shown or hidden. By default, pages are always shown. To make a page appear conditionally:

Open the app in the editor.
Go to Data  and select the table you want to edit in the list.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    

If you are using the legacy editor

Go to Data, click Columns, and expand the table you want to edit.




Find the corresponding Page Header in the table (the empty page-break columns in the spreadsheet are treated within AppSheet as Show type fields with Page_Header Category. 
Click Edit (pencil icon) associated with the column.
Create an expression in the Show If field that defines when the page should be shown.

Example:
Suppose you have an Enum (drop-down) on the first page called Cat or dog person? with choices Cat and Dog, and you have page breaks for an About Cats page and an About Dogs page.
The About Cats page can be shown only when Cat is selected by setting the Show If field for the page header column to the expression: [Cat or dog person?]="Cat"
Likewise the About Dogs page can be shown only when Dog is selected by setting the Show If field for the page header column to the expression: [Cat or dog person?]="Dog"
Which should I use?
Auto-generating your app from a Google Form with the AppSheet add-on is often easier and more convenient, since the add-on takes care of building the Show_If expressions for you. However, if your form requires complex navigation conditions that depend on multiple fields, you may not be able to represent it with Google's "go-to-page" model. 
Creating your own Show_If expressions in the editor gives you more freedom to define complex composite or comparison conditions that can't be represented in Google Forms using functions like AND, OR, NOT, and so on.
   Was this helpful?How can we improve it?YesNoSubmit   

 Track changes using Change column typesIn some apps, it is important to track when and where some data was changed. For example, in a field service app, it may be important to record when a certain field was changed.
AppSheet has a simple mechanism to track changes -- the Change column types. There are three Change column types: ChangeTimestamp, ChangeCounter, and ChangeLocation. These column types all have a set of shared characteristics:


What triggers a change: Any change to any other column, any change to some specific fields or a single field, or changes to a specific field that result in one of a known set of values


What should happen when such a change is detected: Increment a counter (ChangeCounter), set a timestamp to the current time (ChangeTimestamp), or record the current location (ChangeLocation) 


Get started 
Check out the Change Columns sample app that demonstrates how to keep track of changes to columns using the Change column types.
ChangeCounter Update Mode setting
The ChangeCounter Update Mode setting controls how the counter increments when data changes occur.

Accumulate (default): In this mode, the counter increments by 1 per row update when at least one qualifying change occurs. In other words, it counts how many times a row has changed in a way that triggered the counter. An individual row update might occur through a single save of a form, a single Quick Edit in a detail view, or a single action.
Reset: In this mode, the counter resets to its initial value at the beginning of each update and counts the total number of changed columns that triggered the counter within that update. This mode makes it easy to detect that a particular change occurred during a given update, which is useful for setting up automations that only fire when a specific change occurs.

   Was this helpful?How can we improve it?YesNoSubmit   

 Capture GPS locationYou can use a LatLong or ChangeLocation column to capture a GPS location. In apps that include these column types, the current location is polled once per minute.
There are four ways to capture the GPS location in a form:

You can assign the LatLong column an AppFormula value of HERE(). This will automatically populate the LatLong column with the most recent polled location each time a new entry is added or an existing entry is edited.
You can assign the LatLong column an Initial Value of HERE(). This will automatically populate the LatLong column with the most recent polled location when an entry is first added, but not when the entry is edited.
You can use a ChangeLocation column to automatically capture the most recent polled location when a particular data change occurs. Read more on Change column types.
You can manually capture the current location. The input field for a LatLong column has a clickable icon that lets you capture the device's current GPS location. Rather than using the polled location, with each button press the app will try to obtain the most accurate current location it can for up to 30 seconds or until an estimated accuracy of 10m is reached. This method offers the highest accuracy and displays an estimate of the accuracy (in meters) within the app.

Additionally, you can explicitly type in a LatLong value, such as 46.34,-32.34.
Troubleshoot GPS location
Whether on a mobile device or in a browser, the system will probably ask you to give AppSheet permission to access your current location.

If you are running your app within a browser, this permission request may not be very prominent. For example, some browsers bring up a subtle request near the address bar which can be easy to overlook.
If you have ever denied Location Services for AppSheet, the system will remember this and block AppSheet from retrieving location information.

Ensure that Location Services is enabled for AppSheet on your device.

For iOS devices do this.
For Android devices do this.

If you are still having trouble getting GPS location to work, try the following:

Add a new LatLong column to your worksheet.
Regenerate the table containing the new LatLong column.
Verify that the new LatLong column is present in the table and that it has type LatLong.
Open the updated application on the device that is having trouble capturing GPS location.
Edit one of the rows in the table having the LatLong column.
When the LatLong column is displayed, click the icon to the right of the LatLong column. The icon contains a blue box with a map pin inside it. This should insert the current GPS location in the LatLong field.
Ensure the LatLong field is populated with the current geolocation.

Accuracy of results
AppSheet captures location using the HTML5 geolocation API, which draws from a variety of available mechanisms to estimate the current location of the device:
"The Geolocation API defines a high-level interface to location information associated only with the device hosting the implementation, such as latitude and longitude. The API itself is agnostic of the underlying location information sources. Common sources of location information include Global Positioning System (GPS) and location inferred from network signals such as IP address, RFID, WiFi and Bluetooth MAC addresses, and GSM/CDMA cell IDs, as well as user input."
Since the actual location capture mechanisms are device dependent, maximum available accuracy may vary depending on local conditions such as network or GPS availability and reception, device hardware or operating system, and the browser running the app. As such, a consistently high accuracy cannot be guaranteed. The manual capture mode of the LatLong input provides the highest available accuracy and is recommended over use of the HERE() function in cases where high accuracy is especially important.
Coordinate system
AppSheet uses WGS84 standard for the latitude and longitude.
   Was this helpful?How can we improve it?YesNoSubmit   

 Geocode addresses
Each time you enter a new address or change an existing address, AppSheet must send the address to the Google mapping service to convert the address to its corresponding latitude and longitude. This is referred to as geocoding the address. Since LatLong fields already contain a latitude and longitude, they do not need to be geocoded.
AppSheet sends geocoding requests to Google as quickly as possible. Google imposes limits on geocoding to prevent overloading their mapping servers. After AppSheet makes a number of geocoding calls, the Google server may respond with a rate-limiting error. When Google responds with this error, AppSheet uses exponential back off between successive calls to the geocoding service. For example, AppSheet might first impose no delay between calls to the geocoding service. AppSheet makes as many geocoding calls as possible, using no delay. Then:

If Google responds with a rate-limiting error, AppSheet imposes a one-second delay between calls.
If Google responds with a second rate-limiting error, AppSheet imposes a two-second delay between calls.
If Google responds with a third rate-limiting error, AppSheet imposes a four-second delay between calls.
If Google responds with a fourth rate-limiting error, AppSheet imposes an eight-second delay between calls.

And so on. As the delay increases each time Google returns a rate-limiting error, it can take minutes, hours, or days to geocode your addresses if you have hundreds or thousands of new or changed addresses.
Once your addresses are geocoded, AppSheet caches the results on our servers to avoid the cost of geocoding the addresses again.
   Was this helpful?How can we improve it?YesNoSubmit   

 Capture imagesCapture images in your app as described in the following sections:

Get started
Configure your app to capture images
Capture images on mobile (Android/iOS) devices
Capture images in a web browser
Control image size
Annote images
How image capture works
Image storage in the cloud

Get started
Learn how to include an image in a form by using the Images in forms feature sample
Configure your app to capture images
To capture images, insert a column in your spreadsheet and include the word Image in the column header. For example, if you want to capture three images, you might name your columns Image1, Image2, and Image3. When you regenerate the table, AppSheet will automatically detect these columns and set their type to Image.
Alternatively, you can name the column anything you like and change the column type to Image when configuring column properties.
For apps that need to exclusively work with small thumbnail images, we provide a Thumbnail type. AppSheet doesn't automatically detect the difference between a regular image and a thumbnail. To explicitly choose the Thumbnail type, change the Column Type to Thumbnail.
Capture images on mobile (Android/iOS) devices
On mobile devices, the user is prompted with the choice to take a new photo or use the camera roll.
Capture images in a web browser
Your app can be run directly in a web browser; however, this impacts the behavior of image capture.
When an app is run in a web browser on a desktop or laptop, the camera isn't used for image input. Instead, the user is prompted to pick an image from the filesystem. When an app is run in a web browser on a mobile device, the camera is used for image input.
In either case, it's important to note the new or updated record with the image must be synced to the backend before the browser tab is closed. Otherwise, the captured image content will be lost. If you expect to run your app in a browser and the app captures images, do not enable delayed sync. If you do enable delayed sync, please advise your users to explicitly sync their changes before closing the browser. If the browser is used on a mobile device, be aware that simply switching away from the browser app to another app on the device may cause the browser automatically close.
Control image size
You can control the captured image size by setting the Image upload size when configuring general view settings. This sets the maximum image width to one of the following options:

Default: 600px
Low: 200px
Medium: 800px
High: 1600px
Full: use the original image size

If you have issues with device crashes or hangs while taking photos, please look at the article about troubleshooting application crashes and errors on mobile devices.

You can require that images captured in apps meet a minimum specified resolution using the Acceptable image resolution policy, as described in Define governance policies.

Annotate images
To enable users to annotate images they've captured or uploaded, use the Drawing type.
How image capture works

See how the camera function works in the Inspection sample app.

Here's how AppSheet processes the photos taken with the camera:

Any photo taken on a device with your app:
    
Uses the default camera settings on that device.
Is saved in full resolution in the camera roll on the device, unless the Save images to gallery option is disabled.


If you use the app on the desktop, the image capture function only allows you to open an image file. Using the image function on a mobile device will allow you to either upload an image from your device's gallery or to manually take a photo.
When the user presses the Sync button, the photo is uploaded at a reduced resolution to conserve network bandwidth. The image resolution used is controllable as described in Control image size.

Image storage in the cloud
By default, the captured image is saved in a subfolder in the same location as the spreadsheet.

The subfolder is called {TableName}_Images by default.
You can optionally specify a custom folder name by using the FolderLocation property of the column definition. The custom folder is also relative to the location of the source spreadsheet. This custom folder name can be a constant value or an expression that uses the column values of the table. This means images captured for certain rows can be stored in a different folder from images captured for other rows.
If your data source is a database (or some other data source that doesn't provide cloud storage), then there's no spreadsheet location to use. Instead, the platform uses the default app folder location (usually /appsheet/data/{appName}), or as configured under App Properties when you customize the About page.

It is also possible to store your images in a cloud object store.


Within the folder, each image is saved with a unique file name.

Each image file name is prefixed by the key of the row being updated, the column name, and a short representation of a timestamp. The structure of the filenames is not changeable. However, you can use a computed-key if you would like to have more meaningful names for these files.
The row in the spreadsheet is updated to contain the name of the image file just created. The image file name includes the row key as well as the column name so it can easily be correlated to the corresponding row.

   Was this helpful?How can we improve it?YesNoSubmit   

 Capture documentsTo capture PDF documents, insert a column in your spreadsheet and include the word File in the column header. AppSheet will automatically detect this new column as a File type after you regenerate the column structure. Alternatively, you can name the column anything you like and change the Column Type to File in the Data > Columns pane of the app editor.
   Was this helpful?How can we improve it?YesNoSubmit   

 Capture signatures and drawingsCapturing signatures and drawings is easy with AppSheet.
Capture signatures
Insert a column in your spreadsheet and include the word Signature in the column header. AppSheet will automatically detect this new column as a Signature type after you regenerate your columns. Alternatively, you can name the column anything you like and change the column type to Signature manually. See View and edit columns.
When configuring a Signature column, optionally you can specify the folder where the signature files are stored using the Image/File folder path property in the Type Details section.

Note: The Save externally property has no effect on your app; its value is ignored.

A background image can be provided for signature capture by setting an image URL or Image type column value as the Initial Value. 


Capture drawings
Capturing drawings is equally simple. The Drawing type provides a canvas and colored pens that allow you to capture free-form sketches within the app.
To capture drawings, insert a column in your spreadsheet and include the word Drawing in the column header. AppSheet will automatically detect this new column as a Drawing type after you regenerate your columns. Alternatively, you can name the column anything you like and change the column type to Drawing manually in the Data > Columns pane in the editor.
When configuring a Drawing column, optionally you can specify the folder where the drawings are stored using the Image/File folder path property in the Type Details section.
A background image can be provided for drawings by setting an image URL or Image type column value as the Initial Value. The user can also take a photo or select an image to use as the background image with the camera button on the Drawing input.
Troubleshoot
Some image urls will not work as background images due to the CORS policy of the server hosting the image. If the background image initially seems to work but disappears after syncing the app, this is most likely the problem. When this occurs, usually the only solution will be to find a different way to provide the image. For example, images hosted on Google Drive using the export link format do not work as background images due to CORS limitations. One alternative is to upload the image through the app itself using an Image column, then use the value that is written into the sheet as the initial value of the Drawing column.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use a barcode scannerUse a barcode scanner with AppSheet as described in the following sections:

Overview of barcode scanning with AppSheet

Supported barcode scanners
Supported barcode formats
General limitations of barcode scanning using AppSheet


Get started with a sample template
Enable barcode scanning

Enable barcode scanning using the camera on a mobile device
Enable barcode scanning using an external barcode scanner


Test barcode scanning

Overview of barcode scanning with AppSheet

Note: Barcode scanning is supported for Core and Enterprise plans only.

AppSheet can read data from a barcode or QR code using the camera on your phone or tablet, or an external barcode reader.
The following sections provide more details about barcode scanning with AppSheet:

Supported barcode scanners
Supported barcode formats
General limitations of barcode scanning using AppSheet

Supported barcode scanners
AppSheet supports two options for barcode scanning on your mobile device.




Barcode scanner


Description




System default


Provides barcode scanning out of the box.
Requires no additional set up after you enable barcode scanning in your app.




Scandit


Delivers a robust set of barcode scanning features and formats for situations where scanning conditions are more challenging (such as, poor light, damaged or bent barcodes) or when you need to scan a lot of codes.
You must have a Scandit account and register a license key with AppSheet in order to use Scandit for barcode scanning. See Use Scandit.




Supported barcode formats
AppSheet supports the barcode formats, or symbologies, out of the box.
Note: If your app requires a barcode format that isn't currently supported out of the box, contact AppSheet Support or consider using Scandit for barcode scanning.

Codabar
Code 39
Code 93
Code 128
Data Matrix
EAN-8 and EAN-13
Interleaved 2 of 5 (ITF)
PDF417
QR Code
UPC-A and UPC-E

The Scandit barcode scanner also supports the following formats:

Code 11
Code 25
Dotcode
EAN 13+2
EAN 13+5
GS1 Databar
MaxiCode
Micro PDF417
MicroQR
Truncated PDF417

Note: Not all formats supported by Scandit are enabled in AppSheet at the moment. Contact AppSheet Support if you are interested in a particular format.
General limitations of barcode scanning with AppSheet
The limitations of barcode scanning with AppSheet include the following:

Scanning is supported only when running an app on mobile devices.
Scanning is not supported:
    
When running an app in a web browser. The Scan button is not shown.
In the app editor's emulator window. The Scan button is displayed to show you how the app would look like on a mobile device, but it is not operational and always generates the same value: 111122333.


Line breaks in multi-line QR codes will be removed.

Get started with a sample template
To get started using barcode scanning, check out the Inventory Management sample template. The Inventory Management template manages inventory items and enables you to use a barcode scanner to generate the Item ID when adding a new item.
Enable barcode scanning
Enable barcode scanning as described in the following sections:

Enable barcode scanning using the camera on a mobile device
Enable barcode scanning using an external barcode scanner

By default, the System default barcode scanner is enabled. To use Scandit for barcode scanning, you also need to register your Scandit account with AppSheet and enable Scandit for barcode scanning. See Use Scandit.
Enable barcode scanning using the camera on a mobile device
To enable barcode scanning using the camera on a mobile device:

Open the app in the editor.
Go to Data  and select the table to which you want to add barcode scanning in the list.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    

If you are using the legacy editor

Go to Data, click Columns, and expand the table to which you want to add barcode scanning.





Perform one of the following tasks:


Enable the Scan setting for the desired column in the column list.


          Optionally, enable Search to enable scanned input in the app's built-in search box at the top of the app screen.


Click the Edit (pencil) icon to open the row configuration dialog, expand Other Properties, and enable Scannable.


          Optionally, enable Searchable to enable scanned input in the app's built-in search box at the top of the app screen.




Save your changes by selecting one of the following options:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.


 


After you enable barcode scanning, within the app the column will include an icon to indicate its input may be scanned:

When the icon is tapped, the device's camera will be activated to read the barcode or QR code . The scanned data will be entered as the column value.
If a column that is scannable is also searchable, the app's built-in search box at the top of the app screen will also allow scanned input, as indicated by the scan icon:
 

Enable barcode scanning using an external barcode scanner
Set the type of the column to Text. Any supported external barcode scanner that interacts with your mobile device as a keyboard when a barcode is scanned will insert the barcode into the text field on the input form.
Test barcode scanning
Test barcode and QR code scanning by running your AppSheet app on a mobile device.
Note: Barcode scanning is not available from within the browser-based app or the app editor's emulator window. See General limitations of barcode scanning with AppSheet.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use NFC scanningNear Field Communication (NFC) is a short-range protocol of communication between devices, typically between an NFC tag and a scanner.
Most modern smartphones are capable of writing to and reading from NFC tags. This, combined with the affordable price of tags (from ~0.5 USD per piece), is making NFC an attractive feature for some app creators.
A tag can be read by physically touching it with a NFC supported phone or device.
While NFC has many capabilities and formats, AppSheet is currently supporting reading records from NDEF tags such as the NTAG215.
The use of NFC in your AppSheet app falls into two categories: data capture and links
Data capture
You can write some part of data into your tag (typically an ID) and then use your app to read the value from the tag into a field in a form or the search bar.
Enabling data capture is very simple. In the app editor, go to the definition of the column you would like to scan, and mark it as NFC scannable. Once enabled, an NFC button will appear next to the text field of that column when running the app on a mobile device. Since scanning NFC tags is possible only from mobile devices, the NFC button won't appear when accessing your app from a browser. When your users click the NFC button they will be prompted to scan a tag. When they do, the tag's value will be filled in the relevant text field.

  While it is possible to write multiple records to a single NFC tag, in order to keep the UI simple, AppSheet will only use the first record in the tag.
In the editor, the button is enabled so the app creator will be able to see how the app will look like on mobile while editing. Clicking the button when you're editing the app will simulate a scan of a meaningless value.
Links to apps and deep links (Android only)

Currently, iOS devices do not support reading URLs from NFC tags. This feature is only supported for Android devices.

You can write URLs to NFC tags. When those tags are later scanned with an Android device, Android will try to open the URL with an app that can handle it -- usually the mobile device's default browser.

  You can use this functionality to write your app's URL to a tag. When users scan the NFC tag, your app will be opened on their browser. If AppSheet is installed on the device and the system settings allow it, your app will open on the user's AppSheet app itself.

  To get a link to a specific view in your app simply open it in a browser, navigate to the view you wish to link, and copy the URL from the address bar in your browser.
Requirements for NFC
There are a few components you need to get started with using NFC tags in your app.
You'll need:

An NFC tag. While any tag that supports NDEF messages should work, AppSheet NFC was tested primarily on NTAG215.
An NFC enable mobile device to read and write tags. On iOS NFC is supported from iPhone 7 (currently not on tablets) and from OS 11.0.
A third party app for writing tags. For now, AppSheet only supports reading tags so you'll need to get another app for writing. The app stores have several free NFC apps for Android that you might find useful. It's a little trickier for iOS: keep in mind that if you're using an iOS device, you'll need an external NFC writer. 

   Was this helpful?How can we improve it?YesNoSubmit   

 Display a drop-down with a simple list of valuesDisplay a drop-down with a simple list of values for columns of the following type:



Column type
Description


Enum
Users can select one value from the list of allowed values.


EnumList
Users can select zero or more values from the list of allowed values.



The following sections describe how to configure the drop-down and explore a sample app that demonstrates the use of the drop-downs in an app.
Configure the drop-down
To configure the drop-down:

Open the app in the editor.
Go to Data  and select the table to which you want to add barcode scanning in the Data panel.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    

If you are using the legacy editor

Go to Data, click Columns, and expand the table to which you want to add barcode scanning.




Click the edit (pencil) icon to the left of the column name you wish to make a drop-down list.
Enable the Show? toggle to show the information in the app.
Select Enum or EnumList in the Type field to configure a single or multiple selection drop-down, respectively.
In the Values field, click Add to add the list of values.

Consider enabling the following options:


Allow other values - enables users to enter other values in addition to the allowed values displayed in the drop-down list.


Auto-complete other values - auto-completes previously entered values to encourage consistency and minimize typos.




For Input mode, click Dropdown to format the list as a drop-down.


Configure other column properties, as required. See Configure column properties.


Click Done.


Explore a sample app
The Enum versus EnumList sample app demonstrates how to build the following drop-downs from a simple list of values:

Select one type of fruit from a list (using an Enum)
Select multiple types of fruit from a list (using an EnumList)

The following illustrates how the drop-downs appear in the app.

If you look at the column configuration for each drop-down shown above, you'll notice that the only difference between them is the Type setting, Enum versus EnumList. 
The following table summarizes the column configuration settings for each drop-down for quick reference.





Property


Single-select drop-down


Multi-select drop-down




Column name


Enum


EnumList




Show?


Enabled


Enabled




Type


Enum


EnumList




Values


Apple, Banana, and Orange


Apple, Banana, and Orange




All other values


Disabled


Disabled




Auto-complete other values


Enabled


Enabled




Base type


Text


Text




Input mode


Dropdown


Dropdown





For a description of each configuration property, see Configure column properties.
See also: Drop-downs sample app
   Was this helpful?How can we improve it?YesNoSubmit   

 Drop-down on a Ref columnYou can limit which values appear when updating a Ref column by specifying a Valid_If expression on the column. For example, in an order capture application you might limit the allowed values to open orders or to orders totaling over $1000.
Your expression must yield a list of values from the key column of the referenced table. For example, if the referenced table is Orders and that table's key column is OrderId, then the expression must yield values that can be found in the OrderId column. For example: 
SELECT(Orders[OrderId], OR([Status] = "open", [Total] > 1000))
A common mistake is to use an expression like: 
SELECT(Orders[Not the key column], ...) 
With the intent of showing a different column than the key. The drop-down will still function and show the intended column, but selected values will not match the referenced key column and will result in broken references (indicated by an ! icon). Instead, you should use row labels to control which columns are shown.
   Was this helpful?How can we improve it?YesNoSubmit   

 Drop-down from Valid_IfAppSheet displays a drop-down for fields having a Valid_If constraint that yields a list of values.

To check form input validity without creating a drop-down, see Check form input validity (Valid_If).

The Valid_If expression can be:
1. A list of constant values
For example: {100, 200, 300} 
Whenever a list of allowed values is provided, it is actually a syntactic shorthand for an expression that uses the IN() function. For example, {100, 200, 300} is the same as IN([_THIS], {100, 200, 300}).
2. A list of values from a column in another table
For example: LookupTable[ColumnC]
Where LookupTable is the name of the table containing the drop-down values, and ColumnC is the name of the column containing the drop-down values.
This is particularly useful if the list of allowed values can change while the app is being used.
3. A list of values from a column in another table where the rows in that table are filtered
For example: SELECT(LookupTable[ColumnC], [ReportDate] > Today() - 7) 
Where LookupTable is the name of the table containing the dropdown values, and ColumnC is the name of the column containing the dropdown values. [ReportDate] > Today() - 7 is an expression which filters the rows in the table to those where ReportDate is within the last week. The resulting values in ColumnC of LookupTable become the allowed list of valid values.
4. A sorted list of values from a column in another table
For example: SORT(LookupTable[ColumnC])
Where LookupTable is the name of the table containing the dropdown values, and ColumnC is the name of the column containing the dropdown values.
The list of values is sorted in ascending order. If it should be in descending order instead, use SORT(LookupTable[ColumnC], true).
Valid_If drop-downs on Ref columns
Valid_If can also be used to modify the drop-down of a Ref column (to filter the available options, for example), but there are some additional considerations to be aware of. 
   Was this helpful?How can we improve it?YesNoSubmit   

 Dependent drop-downsDependent drop-downs allow you to limit the values displayed in one drop-down based on the value selected in another drop-down. For example, this Lead Tracking app template asks for the Lead Region (America, Asia, Europe) and then for a Country within that region.
This actually requires relatively complex logic, but AppSheet tries to make it simple. Dependent drop-downs are driven by a separate lookup table.
In the sample, there is a separate Regions lookup table with two columns: Region and Country. This acts as the lookup table for allowed combinations of regions and countries. 
The Lead Region column has a regular Valid_If constraint: Regions[Region]. Therefore, when a new entry is being added, the input for this column shows three choices: America, Asia, and Europe.
Likewise, the Country column also specifies a similar Valid_If constraint: Regions[Country]. However, because it follows the Lead Region column and because both specify columns from the same lookup table Regions, AppSheet recognizes the intent and implements a dependent drop-down. 
Internally, AppSheet creates an expression to capture the allowed set of values for the Country column. The expression must say (in English):

Look at the Regions table
Filter the rows to make sure that the Region column of the table matches the value in the Lead Region column of the row being edited in the form
Now extract the Country column from those filtered rows
Eliminate any duplicates --- these are the allowed countries
Recompute this list each time the Lead Region is changed

Strictly for an expression expert, here is the full underlying AppSheet expression: IN( [_THIS], SELECT(Regions[Country], [_THISROW].[Lead Region] = [Region]))
While most app creators will never need to express something this complicated, you could in fact provide this expression as a Valid_If constraint. It is useful to know for advanced use cases. For example, instead of using an equality condition, an app creator could use inequality or richer expressions to build very expressive dynamic drop-downs.
Disable dependent drop-downs
When the AppSheet platform finds several columns that have Valid_If constraints from the same lookup table, it assumes that the desired behavior is to have dependent drop-downs. Occasionally, this may not be what you wanted.
In these cases, provide an explicit SELECT() expression instead of just providing a column set expression. In other words, instead of Regions[Region], use SELECT(Regions[Region], true).
   Was this helpful?How can we improve it?YesNoSubmit   

 Drop-down from worksheet data validation rulesBoth Google Sheets and Microsoft Excel support a built-in mechanism called data validation rules. Data validation rules allow you to constrain the values that can be entered into a worksheet cell. You can define one or more data validation rules for your worksheet. Typically, you define a separate data validation rule for each column in your worksheet where you need to constrain user entered values.
When you create an AppSheet application from a worksheet having data validation rules, AppSheet will automatically detect these data validation rules and apply them to your AppSheet application. This ensures that data values entered through your AppSheet application conform to the same rules as data values entered directly into your worksheet.

The drop-downs that AppSheet automatically creates from worksheet data validation rules have one significant limitation. AppSheet does not automatically detect changes you make to your worksheet data validation rules. Instead, each time you change a worksheet data validation rule, you must manually regenerate the corresponding AppSheet table. When you do the regenerate, AppSheet will detect the worksheet data validation rule change and update the AppSheet application to match.

Define a Google Sheets data validation rule
You can define a data validation rule in Google Sheets in two ways.

Manually type in the allowed values into the validation list.
Create a new worksheet containing a predefined set of cells that contain the allowed values.

When you have a lot of allowed values, we recommend the second approach. The first approach, manually typing the allowed values, imposes a limit of 256 characters for the entire list.
You can follow the steps listed below to define a data validation rule for your Google worksheet. We refer to the original worksheet containing your application data as the DataSheet. We refer to the new worksheet contained the allowed values as the EnumSheet.

Add a new worksheet to your Google workbook to contain the allowed values.

.
Open the EnumSheet and allocate a column for your first set of allowed values. 
Enter a column header value. For example, Fruits in cell A1.
Enter all of the allowed values into this column. For example:


In the DataSheet go the column that will contain the data values and select all of the cells in the column, excluding the first column that contains the header.
Go to the Data menu and select Data Validation.
    The Data validation rules pane displays.
Click + Add rule.
In the Criteria row select Dropdown (from a range).
In the text field, click  Select data range.
    The Select a data range dialog opens.
With the Select a data range dialog window open, click the EnumSheet tab to open the EnumSheet.
Select the range of cells in the column that contains the allowed values. For example, select Apple, Apricot, Avocado, and so on.
    The Select a data range dialog should now contain something like EnumSheet!A2:A15. The EnumSheet name appears to the left of the ! and the selected allowed values cell range appears to the right.
Click OK in the dialog.
    The Data validation rules pane will now reflect the EnumSheet name and cell range you just selected above. These are the allowed values that will be used for validation.
Click Done in the Data validation rules pane.
Optionally, you can additional columns in the EnumSheet for additional sets of allowed values. For example, you might add a column for Vegetable allowed values, another for Animal allowed values, and so forth. Repeat steps 2 through 13 for each of your allowed values.
Ensure that at least one row in the DataSheet contains data values. For each data column, choose one of the legal allowed values as the data value.
Generate your AppSheet application from the workbook (for example, use the AppSheet add-on). 
Only the DataSheet will be added to the app initially. You'll need to manually add the EnumSheet table to the app. 
    It should show up as a suggestion in the Add data dialog, as shown in the following figure.



AppSheet will read the DataSheet to get your data values and the EnumSheet to get your allowed values. Once you have created your app, view the columns to ensure all of the allowed values have been set correctly by AppSheet. 
Define a Microsoft Excel data validation rule
You can specify enum values in another sheet when working with Excel worksheets. However, one additional step is required to do this. You must use the Excel Define Name feature to name the enum values contained in the other worksheet. Do this as follows: 

Enter the enum values in a dedicated column on a separate Excel worksheet as described in steps 1 through 4 above.
On the Excel Formulas tab, click Define Name to define a new Name that refers to the worksheet and cells you created in step 1. When the New Name dialogue is displayed, enter a value such as FruitEnum in the Name attribute. Click the icon to the right of the Refers to attribute. Select the worksheet containing the enum values, and select the range of cells containing the enum values. Click OK.
In the Excel DataSheet go to the column that will contain the enum values and select all of the cells in the column. On the Excel Data tab, click Data Validation and select Data Validation from the drop-down. In the Data Validation dialog, select List from the Allow drop-down. In the Source field, enter = followed by the Name you defined in the previous step. Click OK. 
Ensure that at least one row in the DataSheet contains data values. For each enum column, choose one of the legal enum values as the data value.
Regenerate the AppSheet application and it will extract the enum values from the enum values column you created in step 1.

Once you have created your app, open the Data >Columns pane to ensure all of the enum values have been picked up by AppSheet.


 
 
   Was this helpful?How can we improve it?YesNoSubmit   

 Optimize the user experience using the new desktop design (Preview)To access your app using a desktop browser, you have the option of using the new or legacy desktop design. The new desktop design, currently in Preview, is optimized for desktop browsers. The legacy desktop design, currently enabled by default, provides an interface similar to a mobile or tablet device.
Optimize the user experience using the new desktop design, as described in the following sections:

Compare the new and legacy desktop designs
Enable the new desktop design
Best practices for configuring your app
Configure card blocks in detail views
Limitations and known issues

Compare the new and legacy desktop designs
Compare the features and layout of the new and legacy desktop designs.
New desktop design (Preview)

Note: The new desktop design is in Preview. It is not recommended for use in production apps.

The new desktop design is optimized for desktop browsers, presenting a more complete view of information with a consistent organization and structure. The new desktop design lets users navigate their apps more easily and access information in context, and provides an efficient way to edit existing records without losing context.
The following provides an example of the new desktop design:

 

As highlighted in the previous figure, using the new desktop design:

The left navigation bar contains links to both primary and menu views. Users can expand or collapse the navigation bar. When collapsed (as shown), icons and tooltips enable users to easily identify the views.
The collection (card, deck, gallery, or table) and detail views display in separate panels on the same page. To adjust focus, users can expand to a tabbed view or resize the view panels. The desktop layout is customizable for detail views when configuring the detail view options.
Users can filter a collection view by its grouped items (configured using the Group by setting).
Primary actions for a view appear in the top navigation bar in the panel.
When editing row content, you can customize the editing experience to allow users to edit the content in place (default) or edit content in a separate form. For more information, see the Desktop behavior option.
Users can view detailed information as card blocks within a detailed view (configured using Show type columns in a table).

Legacy desktop design

Note: The legacy desktop design is enabled by default. 

The legacy desktop design provides an experience similar to the mobile and tablet device.  The following provides an example of the legacy desktop design for a detail view:
 

As highlighted in the previous figure:

Detail views display on a page separate from the collection view. Users need to navigate back to see the collection view.
The navigation bar for primary views appears at the bottom of the screen. Navigation for menu views appears in a drop-down (accessible only from the collection view). 
Overlay actions appear as floating icons. 

Enable the new desktop design

Note: Use of the new desktop design is not recommended in production.

You are required to opt-in to use the new desktop design. You can toggle between the new and legacy desktop modes, as desired. 
To enable the new desk mode for your app, when configuring general settings for views, enable the Desktop mode (Preview) setting in the General section.


Best practices for configuring your app
When using the new desktop design, consider the following best practices when configuring your app:

Reconsider your use of dashboard views in the new desktop design
    For example, you may have used the dashboard view to present more information on a single page. With the new desktop design, this level of information is provided by default, without the use of a dashboard view.
Revisit design elements implemented to improve the desktop experience
    You may have configured design elements to improve the layout in the legacy desktop. These elements may no longer be needed.
Test the app interactions thoroughly
    You may discover areas in the app where you want to make minor changes.

Configure card blocks in detail views
 Configure card blocks in a detail view to improve the display of information, as shown below.

To configure card blocks in detail views, add one or more Show type columns set as the Page_Header category to the associated table. Each Page_Header column creates a new card block that includes all columns below it until the next Page_Header column.
You can configure card blocks in two ways, using virtual columns or adding empty columns to your spreadsheet, as described in Customize detail and form views using Show types.


Card blocks display only if there is sufficient width available on the page. You may need to resize the panel to view the content as card blocks.
By default, Show type columns are only permitted in form views. To include Show type columns in detail views, when configuring settings for detail views enable Include Show columns in detail views in the Detail view section.


Limitations and known issues
For the current list of limitations and known issues, see "Is there a list of functionalities that are known to not work with the new design?" in the FAQ for the Community Announcement.
   Was this helpful?How can we improve it?YesNoSubmit   

 Create apps: The EssentialsCreate an app that connects to and enables you to interact with and manage your data using a user-friendly UI from your mobile or tablet device, or desktop browser. 
You can create an app using one of the following methods:

Create an app using the My Apps page (described below) by starting with your data, a blank app, or a sample template
Create an app using Duet AI in AppSheet by simply describing your business process
Start with a sample app
Start with an idea using Spec
Use a Google Workspace add-on, such as Google Sheets AppSheet add-on or  Google Forms AppSheet add-on.

Get started
Watch an introduction to creating a no-code inspection app with AppSheet. 

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

 How to build a no-code inspection app with AppSheet
More videos at: #buildingwithappsheet
Create an app using the My Apps page
To create an app using the My Apps page:

Access My Apps:

    
Sign in to AppSheet. My Apps is displayed, by default.
Click My Apps in the top navigation. 
Select My Apps from the account profile drop-down.



For more information about the My Apps page, see Explore the My Apps page.


Click + Create to start with your own data, start by using a sample app template, start by creating a blank app, or start by using Duet AI in AppSheet.

      The app is opened in the app editor. Try out your live app in the welcome modal, then click Customize with AppSheet to proceed to the AppSheet app editor.

If you signed in with a Google account, your Workspace organization administrator must enable Google Drive for your domain for you to successfully create an app.



Next steps   
 




Explore the app editor
Explore your app in the AppSheet app editor, and use the app preview to interact with and edit your app.


Explore the My Apps page
You Explore the My Apps page where you can view all of your apps and AppSheet databases created by or shared with you.




Data management
You create apps from your data. Learn best practices for organizing and managing your data in an app-friendly way.


App design
Design a great user experience for your app.




Actions
Add actions to allow users to perform specific operations.


Chat apps
Create no-code Chat apps with AppSheet and share them with users in your domain.




Offline behavior and sync
Configure the offline and sync behavior to enable offline use of your app.


Machine learning
Use machine learning to extract information photos and images, generate predictive models, or support a voice interface in your app. 




Security
Secure your app and control user access.


Integration
Integrate technology, such as Scandit and Zapier.




Test and deploy
Test and deploy your app so that your users can access it.


Share
Share your app with users.




Manage and monitor your apps
Manage and monitor your apps, including branded apps.


Optimize
Review best practices for performance, reliability, and scaling, and understand the limits.







App development and testing is always free on AppSheet.
When you are developing and testing your app, feel free to use all of the features of AppSheet. You will not be restricted from using features that are covered under paid pricing plans. While you are developing and testing your app, you do not need to run a deployment check or enroll in a pricing plan. Our goal is to enable you to create an app that meets your needs and is reliable.
Once you finish development and testing, you should run a deployment check and subscribe to a paid plan.




   Was this helpful?How can we improve it?YesNoSubmit   

 Create apps in AppSheet using Duet AI assistanceDuet AI, an AI-powered collaborator in AppSheet, lets you create an app by describing your idea using natural language. 
For example, you might give Duet AI a description for an app that manages facility inspections. Duet AI returns an app card that you can use to design the final inspection app, as the following diagram shows:


  Create apps in AppSheet using Duet AI assistance as described in the following sections: 

Install the Duet AI in AppSheet Chat app.
Create an app using Duet AI in AppSheet.
What's next?


Note: Duet AI in AppSheet is available only to Google Workspace customers. Initially, the product is being deployed to only a subset of customers; we will expand availability to all eligible customers over time. To request access, contact your AppSheet Sales representative. 

Install the Duet AI in AppSheet Chat app
Before you can create an app within Duet AI in AppSheet, you need to install the Chat app.

If you can't install the Duet AI in AppSheet Chat app, reach out to your Google Workspace admin to enable access to your organization. For more information, Workspace admins can refer to Manage access to the Duet AI in AppSheet Chat app.

To install the Duet AI in AppSheet Chat app, perform the following steps:

Open Google Chat.
Next to Chat, click Start a chat . 
    

Note: You can't install the Duet AI in AppSheet Chat app as a Chat space.


In the list, click Find apps.

In the search field, enter Duet AI in AppSheet, and click the Chat app card when its found.
Click Chat.

Create an app using Duet AI in AppSheet
Create an app in three steps using the Duet AI in AppSheet Chat app:

Step 1: Describe your business process.
Step 2: Review the app structure and add email notifications.
Step 3: Create and customize your app.



At any time, you can do the following:

To get help, click or enter Help.
If you want to start over from scratch, enter start over.
        You'll be prompted to confirm this action because the existing app will be discarded.
To provide feedback on your experience using Duet AI in AppSheet, click .




Step 1: Describe your business process
 At the Duet AI in AppSheet chat prompt, describe what you want your app to do. In your description (also called a prompt), provide as much detail as you can.
Here are some examples:





Facility inspections
"Manage my inspection team's appointments. Our team conducts facility inspections, and every week we need to check that everything is operating correctly and submit reports."


Inventory tracker
"I want to track sales of our products in a log, and update and monitor the incoming and outgoing inventory."


Project time tracker
"I need to track employees' time. There are projects, and employees log the start and end times for their shift, and there's a timesheet that shows all of the weekly entries for the company."





 
Duet AI in AppSheet responds with an app card summarizing data that will be managed by your app, including the tables and their associated columns.
Let's use the facility inspections example:

Enter: Manage my inspection team's appointments. Our team conducts facility inspections, and every week we need to check that everything is operating correctly and submit reports.
 
Duet AI in AppSheet responds with an app card:


In this example, Duet AI in AppSheet performed the following:

Created the following tables to keep track of your data (similar to tabs in a spreadsheet): Inspection Type, Inspection, and Facility.
Created the columns, listed after each table, which are the attributes that describe each row in a table. For example, the Inspection table includes the following columns: Facility Id, Inspection Type Id, Date, and Notes.
Added links between tables. For example, in the Inspection table, the Facility Id column links to the Name column in the Facility table, and the Inspection Type ID column links to the Name column in the Inspection Type table, as the following diagram shows:



The following diagram provides an example of how your app might display and manage the records in the Inspection table. Notice that the Inspection table includes two additional columns: Status and Image. In the next step, you'll learn how to add these columns

Step 2: Review the app structure and add email notifications
Next, do the following as required:

Review and change the app structure.
Add email notifications that will be sent to you when the app data is added, updated, or deleted. 

Review and change the app structure

Review the app structure and decide if there is other information that you would like to track using your app.
If you're satisfied with the app structure, go to Add email notifications.
To make changes to the tables or columns in your app using Duet AI in AppSheet, you have two options:

Click Edit   associated with the table and columns that you want to edit to open a dialog.
At the prompt, describe the app structure changes that you want to make. When changing columns at the prompt, you must specify the associated table in the request. For a list of changes that you can make to your app structure, as well as examples of prompts, see the following table. 


 To get help, click or enter Help.




Structure 
Change
Example


Column

Add a column to track additional information (for example, the status of an inspection).


"Track status for an inspection."



Change a column name.

"Change Facility ID to Facility Name in the Inspection table."



Change a column type (for example, you might want a date to include both date and time).

"Change the inspection date to include both date and time."




Create a drop-down list to constrain a column to a limited set of options.


"For inspection status, allow users to select in progress and complete."



Add options to a drop-down list.

"For inspection status, allow users to select Incomplete."



Delete a column.

"Delete Country from the Facility table."



Table

Add a table to track a new set of information (for example, the facility location including address and phone number).

Note: After adding a table using Duet in AppSheet, you can't make any further table property changes using Duet AI in AppSheet. You can change its name and properties later using the AppSheet editor. 



"Track facility location."



Link two tables by describing the association between them.

"Allow inspector to choose the facility location when completing an inspection."



Delete a table.

"Delete the Inspection Type table."




Examples
The following examples demonstrate how to add columns and change the column type.
Add a column that's named Status:

Enter: Track status for an inspection in the inspection table
 
Duet AI in AppSheet responds with a summary of your change:


Change the Status column to a list:

Enter: For inspection status, allow users to select in progress and complete

    Duet AI in AppSheet responds with a summary of your change:


Add a column that's named Image:

Enter: Add an image to the inspection table
 
Duet AI in AppSheet responds with a summary of your change:


Add email notifications
Optionally, you can add email notifications that are sent to you (the app creator), when app data is added, changed, or deleted. In the AppSheet app editor, you can update the list of recipients later.
To add email notifications, follow these steps:

Click Show app structure to redisplay the app card.
In the app card, click Next: Add notifications.
Select the tables for which you want to receive an email notification when a record is added, updated, or deleted.


Click Save.

The app card is refreshed to show the email notifications that you added.

Step 3: Create and customize your app
When you're ready to create your app, click Create App.
Duet AI in AppSheet creates your app and opens it in the AppSheet app editor, where you can preview, customize, and share your app.
Try out your live app in the welcome screen, and then click Customize with AppSheet to go to the AppSheet app editor.

Duet AI in AppSheet creates your app using an AppSheet database and includes sample data to get you started. Before you share your app, you might want to edit or delete the sample data.

What's next?

Explore the app editor.
Explore the app preview.
Share your app with users.

   Was this helpful?How can we improve it?YesNoSubmit   

 Quick start: Create your first app by using an AppSheet database In this Quick Start, you'll learn how to create an AppSheet app by using an AppSheet database.
An AppSheet database provides an easy and efficient way to build data models for any AppSheet app without needing to use an external data source solution such as cloud-based spreadsheets or databases. See What is an AppSheet database?
After completing this quick start tutorial, you'll have a better understanding of how to do the following:

Create and customize a new AppSheet database by using existing data in a Google Sheet.
Create an AppSheet app by using an AppSheet database.
Customize the app by adding a table and a configuring a view to display the data.
Regenerate the app when changes are made to the connected data source.


To create your first app from an AppSheet database, perform the following steps:

Create an AppSheet database by importing a Sheet.
Add a reference between tables.
Change the label column of the referenced table.
Create an app by using the AppSheet database.
Add a table to the app.
Add a view to display the new table data.
Preview your app.
Update the database and regenerate your app.

Create an AppSheet database by importing a Sheet
To create an AppSheet database by importing a Sheet, perform the following steps.

Make a copy of this public Google Sheet and rename it as My Project Tracker.
    Notice that it has two tables, Tasks and Owners. For more information about copying a Google Sheet, see Create, view, or download a file.
Sign in to AppSheet.
Select Create > Database > Import from Sheets.


Navigate to and select the Sheet that you copied in step 1.

    After selecting the Sheet, a new AppSheet database is created by importing data from the Sheet and opened in the database editor. Its name defaults to the name of the Sheet from which it was copied (My Project Tracker). 
    
If you have pop-ups blocked in your browser settings, the new AppSheet database might not be opened in the database editor after it is created. In this case, you'll need to click Databases in the top navigation and then click My Project Tracker to open it in the database editor.




    As shown in the following figure, both of the tables, Tasks and Owners, were imported and appear as tabs in the AppSheet database editor. Select a table's tab to view and manage its column and row data, and create an app.




If this is the first time you are accessing the AppSheet database editor, you might see one of the following dialogs:

Welcome to AppSheet databases dialog. Click Get started to close the dialog.
Dialog to step through a tour. Click Start tutorial to navigate through the tour or Skip to skip it.



Add a reference between tables
Next, you'll add a reference to the Owners table from the Tasks table. This reference allows you to display owner information from the Owners table in a field in the Tasks table.
To add a reference between tables, perform the following steps:

In the Tasks table in the AppSheet database, double-click the Owner column to edit its settings.
In the Text field, select Link to table > Reference.


Select Owners in the Table to reference list.


Click Save.
    A warning appears about changing the column type. In this example, the data in this column is compatible with the new column type so it's fine to proceed.
Click Yes.
    Note the reference icon  now appears in the Owner column header.

    The AppSheet database processes the reference and attempts to match the corresponding rows in the Owners table with the names in the Tasks table. Since the data in the Owners table matches, the AppSheet database populates the Owner column with the correct references to the Owners rows.
To test the reference, double-click a cell  in the Owner column and change it to another owner, such as Sarah. The contents of the drop-down is populated with owner information from the Owners table.



Change the label column of the referenced table
You can select a label column for any table in an AppSheet database. The label column allows you to specify which column you wish to appear in the referenced table. As shown in the following figure, instead of displaying the Name column from the Owners table in the Tasks table, you could display the Email column by setting the Email column as the label. 

To change the label column of the referenced table:

Click the Owners tab to display the table.
in the Email column header, select More  > Use column as label.



To confirm the current label column is Email:

Note the label icon  appears in the Email column header.


In the Tasks table note that the Owner column now displays the owner's email instead of their name.



Create an app by using the AppSheet database
After you've completed the AppSheet database customizations, create an AppSheet app by using the database by performing the following steps:

Click Apps in the top right corner of the database editor.



    The Apps using Tasks pane displays.
Click New AppSheet app.



    A new app is created using the selected table and opened in the AppSheet app editor. By default, the app is named using the table name: Tasks App 

    The following figure shows the app editor and its layout.


     
    As shown in the previous figure, the app editor includes three main areas that enable you to:

Navigate the app editor to select the section you want to customize.
Based on the section selected in the navigation bar, access the learning center (shown) and customize your app to change the styles, control how your data is presented or navigated, configure security requirements, and more.
Preview your live app to interact with and make changes. 

    You can also quickly track down warnings or errors in your app.
Click  in the tools panel.



    The Errors & Warnings dialog displays.



    This warning is displayed because the Tasks table has a reference to the Owners table, which hasn't been added to the app. 
Click Go to problem in the Errors & Warnings dialog.
    AppSheet navigates to the Data page, as shown in the following figure.



    Notice that the warning message is repeated, in context, and the Owner column is highlighted in the table. You'll add the Owners table in the next step, to resolve this issue.

Add a table to the app
To address the warning message in the UI, you'll add the Owners table to the app.

In the top header of the Data navigation pane, click +.



    The Add data dialog displays. 
In the Add data dialog, click AppSheet Database.


In the Select database dialog, select My Project Tracker. 



    Note that the Connected flag indicates that this data source is already in use by the app. 
In the My Project Tracker dialog, make sure that the Owners table is selected in the list with Update, Add, Delete permissions (it should be selected by default) and click Add to app to add the Owners table to your app.


Click the Owners table in the Data navigation pane.


Notice that there is a warning message that indicates that the Email column might contain personally identifiable information. This informational warning message is temporary and can be ignored.
    
Table 'Owners' may contain sensitive data in column(s): Email

    In this case, AppSheet automatically turns on its PII setting for the Email column, which will prevent the information from being retained in the system logs. (To view the PII setting, you might need to scroll the configuration content in the center pane to the right.)



Add a view to display the new table data
Now that the Owners table has been added, you can create a view to display its data. You can choose from several different views types to display your data. In this case, you'll use a deck view to show information for each row in a "deck-of-cards" format.

Select Apps  > Views in the navigation bar.



    The Views page is displayed.
In the Data navigation pane, click + next to Primary Navigation.



    The Add a new view dialog is displayed.
Click Create a new view.



    A New View is created as shown in the following figure.


Edit the New View, as follows:
    
Change the View name field to Owners.
In the For this data drop-down, select Owners.
For View type, click deck.

    The updates are shown in the following figure.
 

You might notice that the app preview, in the right pane, is updating as you make changes. You'll preview your changes in the next step. 


In the top level toolbar, click Save to save the changes to your app.


     
    
Remember to save your app anytime you make changes!



You'll preview the app in the next step.
Preview the app
The app preview that is located in the right pane of the AppSheet app editor allows you to view and interact with your live app.

Any changes that you make in the app preview are saved to the data source, in this case the My Project Tracker AppSheet database. 

The following figure shows the various actions you can take in the app preview.

As highlighted in the figure, using app preview you can do the following:

Turn on the Edit toggle to use the visual editing tools while previewing the live app. Turn off the Edit toggle to preview the live app without showing the visual editing tools.
Preview the live app in mobile, tablet, or desktop format.
Set the email to use when previewing the live app. See also Test apps.
Access the view or table currently displayed. 


While previewing the app, you might want to turn off the Edit toggle.

To interact with your live app, you might click the row for Tom to view the list of tasks and corresponding status and due date. 

Then, click Tasks in the primary navigation bar (shown for mobile devices in the following figure) to display tasks organized by their status.

You can continue to explore the app preview on your own.
Update the database and regenerate your app
In the following steps, you'll learn how to regenerate the AppSheet app when changes are made to the connected data source.

Return to the browser tab that shows the AppSheet database editor. 

In the Due Date column header, click More   > Edit column.
      Alternatively, you can double-click the Due Date header.



In the Type drop-down, select Date and Time > Date.


Click Save.
    The following confirmation is displayed:


Click Yes to proceed.
    After a few moments, the column values are updated to Date column types.
Return to the browser tab that shows the AppSheet app editor.
Select Data  in the navigation bar, and then select the Tasks table.



    Notice the following warning message is displayed:
    
App Schema for table 'Tasks' is out of sync with the schema in AppSheet database. Please regenerate the table structure.


In the Tables toolbar in the center pane, click .



    A confirmation dialog displays.
Click Regenerate in the confirmation dialog to confirm the action.
Notice that the Due Date column type has changed to Date in the Tasks table.




Congratulations! You have created your first AppSheet app by using an AppSheet database, and learned how to customize your app and regenerate it when changes are made to the connected data source. 
What's next? You can access more quick starts to learn about other AppSheet features.
   Was this helpful?How can we improve it?YesNoSubmit   

 Explore the app editorExplore the AppSheet app editor as described in the following sections:

Explore your app
Explore your data

Explore your app
After you create your app, it is opened in the AppSheet app editor and you are greeted by the welcome screen. Try out your live app in the welcome screen, then click Customize with AppSheet to proceed to the AppSheet app editor, as shown below.
 
 

As shown in the previous figure, the app editor includes three main areas that enable you to:

Navigate your app to select the section you want to customize.
Based on the section selected in the navigation bar, access the learning center or customize your app to change the styles, control how your data is presented or navigated, configure security requirements, and more.
Preview your live app to interact with and make changes. See Explore the app preview. 
Quickly track down warnings or errors in your app. For example, click  in the tools panel to display the Errors & Warnings dialog. Click Go to problem, to navigate to the issue.


See also:

My Apps page - View all of your current apps and AppSheet databases and those shared with you.
Suggestions in the app editor - When creating apps using the app editor, suggestions are provided to assist you with app creation.
Roadmap for using AppSheet - Step through a roadmap for using AppSheet.

Navigate your app
Use the left navigation to select the section of the app you want to customize.

The following table summarizes the features that you can select in the left navigation.  





Feature


Description




Data 


Define how AppSheet connects to and manages your data. See Explore your data and Data: The Essentials.




App 


Style your app, control how your data is presented, and more. See App design.




Actions 


Create buttons for navigating in the app, making data changes, or opening external links. See Actions: The Essentials.




Automation 


Define automated processes to run in response to specific events. See AppSheet Automation: The Essentials.



Chat apps 

Create and publish no-code Chat apps with AppSheet. See Chat apps: The Essentials.




Intelligence 


Incorporate machine learning into your app, such as sentiment analysis, predictive analytics, and optical character recognition. See Machine learning.




Security 


Define the security requirements for your app, such as requiring users to sign in. See Security: The Essentials.



Settings 
Configure settings, such as theme, performance, localization, and more. See Configure app settings.



Manage 


Manage app versions, monitor usage and performance, and more. See Manage and monitor.



Learn 
Get started with AppSheet and learn more about specific features.





We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.



If you are using the legacy navigation


The following table summarizes the features that are accessible from the navigation bar in the app editor.
         

        




Feature


Description




Info


Manage informational details of your app.




Data

Define how AppSheet connects to and manages your data. See Data: The Essentials.



UX

Style your app, control how your data is presented, and more. See App design.



Behavior

Create buttons for navigating in the app, making data changes, or opening external links. See Actions: The Essentials.



Automation

Define automated processes to run in response to specific events. See AppSheet Automation: The Essentials.



Security

Define the security requirements for your app, such as requiring users to sign in. See Security: The Essentials.



Intelligence


Incorporate machine learning into your app, such as sentiment analysis, predictive analytics, and optical character recognition. See Machine learning.




Manage


Manage app versions, monitor usage and performance, and more. See Manage and monitor.







Customize your app

Customize your app in the middle pane based on the feature selected in the left navigation. For example, you can customize the data in the tables on which your app is based. 

Each page you see in your app is known as a view. You may notice that AppSheet suggests views based on the data you connected it to. You can change or customize the views in your app, as described in Views: The Essentials. Examples of different views are shown in the following figure.

Whenever you make edits to your app, the save button in the top right corner turns blue. Make sure you click on it so your edits are saved. Saved changes are immediately available to use in your app.


Explore your data 
In the app editor, go to Data   to view and edit your data structure (tables and columns). 
Tables are comprised of columns, which are the attributes that describe each row, such as Item ID, Name, Description, and so on. Rows contain the data for each individual record in your data source. The rows in each table share the same set of columns.
 In the app editor, use the table and columns settings to control how your data is displayed in the app, the data types, the initial values, and more. Click View data source to open the data source and see your data. 

Your AppSheet app connects to your data source, it doesn't import your data. Your data resides separately from your app. As users interact with your app, all changes are stored directly in the data source.


Remember that when you use the app preview in the app editor, you are interacting with the live app. Any data changes you make while interacting with the app preview are saved to your data source. 

To learn more about preparing your data, see Data: The Essentials.


   Was this helpful?How can we improve it?YesNoSubmit   

 Explore the app previewUse the app preview to interact with and make changes to your live app, as shown below. When you select an automation component within a bot in the main pane, you can also configure automation settings in this pane.

Remember that you are interacting with the live app. Any data changes you make while interacting with the app preview are saved. 


 As highlighted in the figure, using app preview you can:

Turn on the Edit toggle to use the visual editing tools while previewing the live app. Turn off the Edit toggle to preview the live app without showing the visual editing tools.
Click the mobile, tablet, or desktop icon to preview the live app in the selected format.
Set the email to use when previewing the live app. See also Test apps.
Access the view or table currently displayed. 

See also Explore the AppSheet app editor.
Use the visual editing tools

The visual editing tools are only available in the improved app editor. They are being rolled out gradually to all AppSheet users.

Turn on the Edit toggle to use the visual editing tools while previewing the live app. 

As shown above, when Edit is turned on as you position your cursor over a component in the visual editor, you can click  to edit settings for the component. In some cases, a drop-down list displays to allow you to edit data, column settings, and column order, or view type-specific settings and data sources.  
Turn off the Edit option to preview the live app without showing the visual editing tools.
Configure automation settings
When you select an automation component within a bot in the main pane, for a subset of components you can click Settings (gear icon) to configure related settings. The Settings pane replaces the app preview.


 
   Was this helpful?How can we improve it?YesNoSubmit   

 Explore the My Apps page
To access the My Apps page:

Sign in to AppSheet. My Apps is displayed, by default.
Click My Apps in the top navigation. 
Select Account > My Apps in the app editor.


The My Apps page enables you to create new and access existing AppSheet apps and databases, including those you own and those that are shared with you. 
My Apps: Apps
Click Apps to manage your AppSheet apps.

As highlighted in the previous figure, using the My Apps page for apps you can:

Create apps. See Create apps: The Essentials.
Filter apps by most recently accessed, shared with you, and owned by you
Note: Apps must be shared with View definition or Edit definition permissions in order for them to display in the Shared with me list. See Share your apps with a restricted audience.
View the sample templates that you can explore or copy to create a new app
View details for the apps that are displayed, such as name, status, owner, and time the app was last modified
Identify apps with errors that need to be addressed
Edit (in new tab), preview, copy, or delete an app by using the More  menu associated with its row
Note: Only app owners can delete an app.
Search by app name, category, or owner email
Sort apps by column
Note: If you select Recent, apps are sorted by Last modified date only; you cannot change this sort order.
Toggle between the list and grid layouts

My Apps: Databases
Click Databases to manage your AppSheet databases.

As highlighted in the previous figure, using the My Apps page you can:

Create databases. See Create and copy databases.
Filter database by most recently accessed, shared with you, and owned by you
View details for the databases that are displayed, such as name, number of tables, owner, and time the database was last modified
Edit (in new tab) or delete a database by using the More  menu associated with its row
Note: Only database owners can delete an app.
Search by database name or owner email
Sort databases by column
Note: If you select Recent, apps are sorted by Last modified date only; you cannot change this sort order.
Toggle between the list and grid layouts

See also: AppSheet databases
   Was this helpful?How can we improve it?YesNoSubmit   

 Suggestions in the app editorAppSheet is an intent-aware platform. The platform understands user intent and provides suggestions that align with what you are trying to achieve. You can use suggestions to speed up app creation and reduce errors. 
For example, when you build an automation or add a slice to a view you are presented with a list of suggestions based on the data you're working with. 

Use the search field to tailor the list of suggestions. For example, to display suggestions for filtering data using slices:

Search for expressions such as Quantity > 200 
Search for a column or table name

After selecting a suggestion, you can customize it to meet your requirements.
   Was this helpful?How can we improve it?YesNoSubmit   

 Summary of improvements in the app editorThe app editor includes navigation, app setting, and error and warning improvements to facilitate the configuration of specific features. For example, the new Settings section in the left navigation gathers together all app-wide settings and makes it more intuitive for all app creators to find these types of settings.
The app editor improvements are summarized in the following sections:

New primary navigation and consolidated app settings
New secondary navigation panel
Simplified in-context view configuration
More prominent error and warning messages
Known issues


Switch to the legacy editor
You can switch between the new navigation and legacy editor at any time by clicking  in the top navigation bar. By default, you are opted in to the improved editor. 

New primary navigation and consolidated app settings
The new primary navigation bar has a new look and feel. In additional, app settings are consolidated under Settings in the navigation bar, including settings for configuring offline and sync.

The following table summarizes the primary navigation and app setting improvements by feature, and includes the legacy navigation for comparison.



Feature
New navigation
Legacy navigation


Configure app settings
Configure all app settings by selecting Settings in the left navigation
Configure app settings by navigating to several locations in the app editor


Design your app
Select  in the left navigation
Select UX in the left navigation


Add actions
Select  in the left navigation
Select Behavior > Actions in the left navigation


Configure offline and sync
Configure offline and sync behavior with other app settings by selecting Settings in the left navigation
Select Behavior > Offline/Sync in the left navigation



 
New secondary navigation panel
A secondary navigation panel is now displayed for each primary navigation section (Data, App, Automation, and so on) that enables you to manage configuration and settings for your app.
The following shows an example of the secondary Views panel that you can use to configure and manage views:

Simplified in-context view configuration
To be able to make a specific edit to your app without jumping into a different context, there are more direct links in your view component to the table, column, or action that you want to check or edit. For example, when you are working on a deck view, you no longer need to click away to check the settings of a column or action. 

More prominent error and warning messages
Error and warning messages are communicated more prominently in locations throughout the editor, including:

App top navigation bar enables you to access a summary of all errors and warnings. For example:


     
Primary and secondary navigation panels enable you to access errors and warnings specific to displayed items. For example:



Known issues
At this time, external services can be configured using the legacy editor only. (This is a known issue that will be addressed in the future.)  
   Was this helpful?How can we improve it?YesNoSubmit   

 Configure app settingsConfigure the settings for your app as summarized in the following table.



Settings
Description


Information
Customize the information for app users and set app properties. See Customize the About page.


Theme & brand
Style your app by configuring the theme and brand, and font style and size. See Style: The Essentials.


Data
View data relationships using Spec and configure data processing settings.


Views
Configure general, view type, and localization settings. See View settings: The Essentials.


Performance
Configure settings to improve sync performance. See Offline and sync: The Essentials.


Offline mode
Configure settings to improve offline use. See Offline and sync: The Essentials.


Integrations
Configure settings for external AppSheet integrations. See Integrate AppSheet with external services.



 
   Was this helpful?How can we improve it?YesNoSubmit   

 Configure app editor settingsConfigure the app editor settings to customize the default behavior.
To configure app editor settings:


Select Editor settings from the account profile drop-down.



      For more information about the My Apps page, see Explore the My Apps page.

If you are using the legacy editor

Select Manage > Author > Editor Settings.




Configure the settings for the app editor as summarized in the following table.





Setting
Description


Expand all sections?
Expand all sections in the app editor by default. If disabled, some sections in the app editor are collapsed by default.


Show system actions?

Show the system-generated actions by default.
Note: This setting has no impact when using the improved app editor (preview); system-generated actions are always displayed.



Show system views?

Show the system-generated views by default.
 Note: This setting has no impact when using the improved app editor (preview); system-generated views are always displayed.



Show all automation components

Show all events, processes, or tasks under automation. By default, only reusable (linkable) components are shown.
See also:

View events
View processes
View tasks




Undo stack limit
Set the number of undo operations that are stored. Valid values are between 0 and 100 (defaults to 10). The greater the number of undo operations that are stored, the more memory that is required.



 
   Was this helpful?How can we improve it?YesNoSubmit   

 Save, undo, and redo changesTo save your changes, select one of the following options in the Save drop-down:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.


 
To undo an edit, click Undo (left arrow to the left of the Save drop-down) or use Ctrl-Z on PC or ⌘Z on Mac.
To redo an edit that you've undone, click Redo (right arrow to the left of the Save drop-down) or use either Ctrl-Y/ Ctrl-Shift-Z on PC or ⌘Y/ ⌘Shift-Z on Mac on Mac.
You can undo and redo changes only between saves. If you want to recover to an older saved version you can use version history instead.
By default, the last 10 changes are kept in Undo/Redo history. You can configure this number to any value between 0 and 100. See Configure app editor settings.
   Was this helpful?How can we improve it?YesNoSubmit   

 Actions: The EssentialsActions perform specific operations. Actions can be extremely helpful in accomplishing a variety of different tasks with your app, from email to copying a row. It's also possible to execute a sequence of actions.
There are four types of actions included in an app definition, as described in Action types.

Navigation: Navigate to a different view within an app
Data-change: Modify (add, delete, update) data in your app
External: Interact with an external service, such as opening the phone app on a device to start a call or sending information to an external service (such as a push notification or an SMS message
Grouped: Execute a sequence of actions in a specific order.

Besides the actions you can create in your app, other actions are automatically created. You can learn more about system actions and how to control them.
Not only can you create actions, you can also configure them to run when certain view navigation events happen using view events.
The following sections provide more information about actions:

Where do actions appear?
Where can an action run?
When does an action run?
How to show, hide, or reorder actions in a view
Create an action
Configure an action
Reorder actions in your app
Add an action to your favorites
Action types

Where do actions appear?
Quick actions
In the detail view, a button is shown for each action in your app. When the button is tapped, the action is triggered.

Bulk actions
In the table, deck, and gallery views, actions can be applied in bulk across many rows simultaneously. See Use bulk actions.
Where can an action run?
All AppSheet apps run on a device or in a browser. However, all apps are actually hosted from the AppSheet cloud service (also called the AppSheet backend) so some actions can also run in the cloud service, as follows:

Navigation actions can only run in the app on the device or in a browser.
Data- change actions can run in the app or in the cloud service. The app data is accessible and can be changed at either location.
External actions only run in the client. For example, the External: Start an email action opens the email app on the device running the AppSheet app, it doesn't actually send the email. 

When does an action run?
Every data action has to be triggered by some event that causes it to run. As the app creator, you control the trigger, as follows:

Explicit user invocation: Create an action to be shown as a visual icon or button. When the user taps or clicks on the icon or button, the app invokes the action.
Implicit user invocation: Every view in the app has some standard behaviors when a user interacts with the data in the view. For example, when a user taps on a row in a tabular view, that specific row is shown in detail in a detail view. By default, the tap-on-row event triggers a system-defined UI Navigation action that takes the user to the new view. As the app creator, you can control a subset of the triggering events associated with each view. See Run actions based on view events.
Automatic invocation in the cloud service: Define automation bots that run in the cloud service and execute actions when specific changes occur or on a schedule. See AppSheet automation: The Essentials.

How to show, hide, and reorder actions in a view
To show, hide, and reorder actions in a view, do one or more of the following:

Create an action that will display for views that use the table.
Reorder actions in your app.
Create a group action to run a set of actions, one-by-one, in order.
Configure the Only if this condition is true setting in the Behavior section for a view to control which rows show the actions and the order they are displayed.
    For example:
    
To show an action for detail views only, you can configure the setting as follows: SHOW_IF = CONTEXT("ViewType", "Detail)
To order actions as ABC for detail views and ACB for all other views, you can configure the setting for each action as follows:
        
Action A: Leave blank
Action B:  SHOW_IF = CONTEXT("ViewType", "Detail")
Action C:  Leave blank
Action B (duplicate): SHOW_IF = NOT(CONTEXT("ViewType", "Detail"))




Add a slice to filter specific actions in views. See Slice actions.
For deck views, configure the action bar.
Hide system actions.

Create an action
To create an action for a table:

Open the app in the app editor.
Go to Actions, click + in the top header of the Actions panel, and select one of the suggestions or click Create a new action.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Behavior > Actions and click + New Action or select one of the suggestions, if provided.



Enter the following information:
     
    


Property
Description


Action name
Displayed name of the action. 


For a record of this table
Table to which the action applies.


Do this

Action to be performed. Select an action from the drop-down list. See Action types.

Based on the type selected, additional configuration options may be displayed, and are described with the action type descriptions.







 Configure the action.


Save the app.


Configure an action
Configure an action by using the settings described in the following sections.

Display
Behavior 
Documentation
Inputs

 Display
All actions have configurable display options. The display options affect how the view is presented in the navigation bar along the bottom of the app display, and in the app's main menu.

Configure the action display by using the settings defined in the following table.




Setting


Description




Display name


Name displayed for the action. Enter a fixed value (T) or to a text expression (flask).

If Display name is not specified or if set to an expression that evaluates to a blank value, the action's name is used.




Action Icon


Icon to be displayed along with the action's Display name (see above). Choose an icon from the predefined list. Custom icons are not allowed. Every action must have an icon. If no icon is selected, a type-specific default will be used.



Prominence (or Position)

Control the position of the action or hide it from the display. Valid values are:

Display as primary - Display independently of scrolling, such as floating buttons on mobile devices and at the top of a view on desktop browsers.
Display prominently - Display in detail views as a button at the top of the screen (most common).
Display inline - Display alongside the associated column.
Do not display (or Hide) - Don't display in any view.

The following illustration provides an example of the location of an action based on this setting.

Note: For table views, if an action is set to Display inline for a specific column, the action replaces the column content instead of displaying alongside it. If you want to see both the action and the content, you should create another column to attach the action to. For example, attach the action to the Email column so that both the  Name column contents and the action item display in the table row, as shown in the following figure.





Behavior
All actions have configurable behavior options that control which rows to display the action and whether or not it requires confirmation before being applied.
Configure the action behavior by using the settings defined in the following table.




Setting


Description




Only if this condition is true


Expression that controls which rows display the action.




Needs confirmation?


Toggle that controls whether or not the action requires confirmation.



Confirmation Message
Confirmation message to display if Needs confirmation? is enabled.



Documentation
Expand the Documentation section and enter a descriptive comment for the card view that will enable collaborators to easily understand its purpose.
Inputs

This section is available to the Data: set the value for some columns in this row data-change action only. 

You can add inputs to dynamically configure an action, as follows:

When the action is used in the app, a dialog displays to prompt the app user to enter values for the specified inputs.
When this action is invoked from a referenced action (whether in the running app or in an automation), the referenced action can specify a binding expression using the input values. 
When the action is used in the Run a data action step type and Set row values is selected, the app creator can set input values when configuring the step.

In the action, use the following expression to access the input values: [_INPUT].[inputname]
Let’s assume we want to ask the app user to provide the notes that will be saved in the Details column. To do so, for the Change Status action, expand the Advanced section and add an input value, such as Notes, with an initial value of n/a. For example:



Then, you can use the input value to set the value of the Details column by using the expression: [_INPUT].[Notes]



When the app user clicks the Change Status button, they will be prompted with a dialog that asks them to provide the details. 


For more information and examples, see Set input values dynamically in data-change actions.
To add inputs that can be used to dynamically configure the action:

Expand the Advanced section.
Click Add adjacent to the Inputs setting.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field. 
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Reorder actions in your app
Reorder actions in your app. 

Notes: 

The order of actions in the app editor aren't impacted; only the order of actions in your app.
Position settings and format rules might impact the visibility of actions.


 To reorder actions in your app:

Open the app in the app editor.
Go to Actions .
Position your cursor over the table name associated with the actions you want to reorder and click .
    The Reorder actions for table dialog displays.
Click  to drag an action to a different order.
Repeat to reorder other actions.
Close the dialog.

Add an action to your favorites
To easily access frequently used actions, add them to your favorites. 
 To add an action to your favorites:

Open the app in the app editor.
Go to Actions .
Position your cursor over the action in the Actions panel and select More > Add to favorites.

Remove an action from your favorites by positioning your cursor over the action in your favorites and clicking x.
Action types
The following summarize actions that can be performed for each type.

Navigation action types
Data-change action types
External communication action types
Grouped action type

Navigation action types
The navigation action types are listed below.
App: copy this row and edit the copy

Copies the current row and opens it in a form view.


App: edit this row

Enables users to edit a row in the current table.
When editing content on mobile, tablet, or legacy desktop devices, the content is opened in a separate form. 



When editing content using the desktop design, you can customize the editing experience using the Desktop behavior option by selecting one of the following options:

Edit in place: When editing content, make all fields editable in the currently displayed detail view. This is the default setting.

        
Note: At this time, Edit in place isn't honored when the detail view is included in a dashboard view.


 


Consider the following when using Edit in place for the desktop browser:

If there are Show_If conditions that take into account the CONTEXT(), the conditions may apply to desktop, or mobile and tablet devices, or both.
If you specify a different column order (by using the Column Order setting) in the form and detail views, then the two views have different functional behaviors.






Open a form: When editing content, edit it in a separate form. 





App: export this view to a CSV file


Downloads the rows in the current view to a CSV file. This action only works on desktop browsers and not in iOS or Android apps.
Options:

CSV file locale: Locale of the exported CSV file.

See the following sample templates:

Export CSV
Export CSV of filtered rows

To send CSV files in an email, see Use CSV templates.



App: go to another AppSheet app


Opens a different AppSheet app.
Options:

Target: App deep link to navigate to when the action is triggered. This can be an expression to compute the value at the time the action is triggered. This uses the same structure as the app column type.




App: go to another view within this app


Navigates to another view in the current app.
Options:

Target: View deep link to navigate to when the action is triggered. This can be an expression to compute the value at the time the action is triggered. This uses the same structure as the app column type.



App: import a CSV file for this view

Uploads the rows in a CSV file to the current view as described in Import a CSV file for this view.


App: open a form to add a new row to this table

Opens a form that enables users to add a new row to the current table.
















Data-change action types
The data-change action types are described below.
Data: delete this row

Deletes the current row.


Data: execute an action on a set of rows

This bulk action option is an expression based version of bulk select. This automated version selects the rows using an expression rather than a user, such as yourself, selecting the bulk actions using your applications user interface. 
Options:

Referenced Table: Table whose action will be executed.
Referenced Rows: Rows to act on from the referenced table.
Referenced Action: Action to apply to the referenced rows.

See also: SELECT()


Data: set the value of some columns in this row


With this action type, you can set or update the value of a field on the current row.
Options:

Set these columns: Columns and values to be updated when the action is triggered. You can specify an expression to compute the value that will be run at the time the action is triggered.
Inputs (under Advanced): Input values that can be set by the action. See Advanced configuration.

Common uses:

Marking a task as complete
Updating a ticket priority
Assigning a record to someone
Adding or subtracting a number
Setting a date or time to the current time
Setting a Lat/Long column to HERE()

You cannot set the value of a column that:

is the key column
Contains an App formula
Is a ChangeCounter, ChangeLocation, or ChangeTimeStamp column

Check out the Maintenance Overview app for an example.



Data: add a new row to another table by using values from this row 


 By creating a new action and specifying which separate table data should be added to and defining each column added, rows of data can quickly be updated and moved across all tables in your application.
Options:

Table to add to: Select the table you want to add the new row to.
Set these columns: Values for the columns.

The action setup shown below produces the effect of copying the Email and Course values from the current row of the student table, and using the TODAY() and TIMENOW() expressions, to log the Email, Course, current date and time as a new row in the attendance table:




External action types
The external action types are described below.

External: go to a website


Navigate to a URL of your choosing.
Options:

Target: URL to navigate to when the action is triggered. This can be an expression to compute the URL that will be run at the time the action is triggered.
Launch External: Enable to launch the web site in the device's browser and not directly in the app.

Common use case:

Google searching a value from the row: CONCATENATE("https://google.com/search?q=", [Search Column Name])



External: open a file


Opens a viewer for a file on the device running the AppSheet app.
Options:

To: File to open. This can be an expression to compute the value at the time the action is triggered.






External: start an email


Opens the email app on the device running the AppSheet app. For an example, see Click to send email.
Options:

To: Recipient of the email. This can be an expression to compute the value at the time the action is triggered.
Subject: Subject of the email. This can be an expression to compute the value at the time the action is triggered.
Body: Body of the email.



External: start a phone call


Opens the phone app on the device running the AppSheet app. For an example, see Click to send email.
Options:

To: Recipient of the phone call. This can be an expression to compute the value at the time the action is triggered.




External: start a text message


Opens the messaging app on the device running the AppSheet app. For an example, see Click to send email.
Options:

To: Recipient of the message. This can be an expression to compute the value at the time the action is triggered.
Message: Message to send. This can be an expression to compute the value at the time the action is triggered.




Grouped action type
The grouped action type is described below.
Grouped: execute a sequence of actions

Run a set of actions, one-by-one, in order. This can be used to do multiple things when an action button is pressed.
Options:

Actions: Actions to run, in order of execution.

For an example,  see the Go to Resource action in the Resource Portal sample template.




   Was this helpful?How can we improve it?YesNoSubmit   

 Use bulk actionsBulk actions allow you to quickly execute an action on a set of rows. Bulk actions are supported in a table, deck, or gallery view that has one or more actions or that allows users to delete records.
There are two ways to perform bulk actions:

App creators can add a Data: execute an action on a set of rows action to automatically select rows using an expression. See Data: execute an action on a set of rows for more information.
App users can use bulk select to manually select the rows to execute an action on  (described below).

Use bulk select
As an app user, if you work with applications that contain to-do lists, site management, or other daily reporting functions, using bulk select will enable you to work more efficiently. 
For example, to use bulk select in an expense tracking application that contains new expenses that require approval:

Click   in the table, deck, or gallery view. Alternatively, you can long-press any row to enter selection mode.


Once in bulk selection mode, tap on rows to select them. As you select rows, actions will appear in the top right corner of the screen. 
    
Note: Only actions that are valid for all selected rows will appear.



Tap an action (such as approve) to update all the selected rows.
    If the app has delayed sync enabled, the changes will be queued; otherwise a sync will be triggered.



   Was this helpful?How can we improve it?YesNoSubmit   

 Use system actionsEach action definition represents an individual task or transition that can be explicitly invoked by the user of an app. See Actions: The Essentials.
When you're customizing the behavior of your app, you can create your own, but there are also a number of system actions. These are actions that are automatically created by the AppSheet system based on the column structure of a table. System actions represent the default behavior of an AppSheet app; you can think of them as behavior that comes with the app out of the box.
The most common example of system actions are per-column system actions. Every column of type Email has an automatically-created Email system action. This is shown as an email envelope icon next to any email address value shown in an app view. Clicking on it launches an email to that email address. Similarly, any LatLong value has a map pin icon next to it. Clicking on the icon opens a map and shows the location of that value on the map.

If you are using the legacy app editor, you can show or hide system actions by default. See Configure app editor settings.

Control system actions
In most apps, there is no reason to ever modify or control the system actions. They are designed to work correctly without the app creator's intervention.
However, there are instances where the app creator may want to control these actions. For example, you may want to:

Enable calling only a subset of phone numbers
Change the icon shown for email actions
When using the desktop design (preview), control how users edit content (in place or in a separate form)

System actions can be edited like any other action. However, there are some caveats:

Only some of the properties of the action can be changed --- in particular, the presentation properties and the condition that determines when it should be shown.
If the table's column structure changes, the system will automatically delete and re-create system actions. Any changes made by the app creator will be lost if the system deletes the action. 

Hide system actions
In some cases, you may want to hide the system action icons from your user to provide a cleaner look to your app. In that case, you can select any of the system actions and enable the Do not display option. This means that the action is still there if you want to use it, but won't be displayed from the user. This way you can show the user only the icons they need.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use dynamic inputs for data change actions by using the INPUT() function
Note: The INPUT() function and the ability to bind the inputs to dynamic values is in a beta release mode.
 
Going forward, use the new INPUT syntax described in Set input values dynamically in data-change actions. The legacy syntax (described in the following article) will be turned off sometime in June 2024. For information about the new syntax and recommended migration plan, see the community announcement.

Data change actions are logical operations that modify data values. The desired new values are defined by expressions. In many cases, that value is constant (for example, an action to ApproveOrder sets the status of the Order to "Approved") or it has a well-defined expression (for example, an action to EstimateDeliveryDate sets the estimated delivery date of the Order to the maximum of the delivery dates of each of its sub-orders).
However, there are also situations that need a dynamic input specified either by the user in an app dialog, or specified by another invoking action. This is where the INPUT() function can be used.
Let’s consider an app with Orders and Customers. Let us say there is a ChangeStatus action on an Order that changes a status to "Complete" and also records a comment. This would be implemented in AppSheet as a SetColumnValue action with two columns that are set by expressions (Status: “Complete”, and Notes: “n/a”). For the app user, this action shows up as a “ChangeStatus” button in their app.


Let’s assume we want to ask the app user to provide the notes that will be saved. To do so, the ChangeStatus action would set the value of Notes to INPUT("NotesInput", "n/a"). This means it is a special text input called "NotesInput" with a default value of "n/a". When the app user clicks the ChangeStatus button, they will be prompted with a dialog that asks them to provide the notes.


Now let’s also assume we occasionally want to cancel a customer’s account. In that case, we want a single CancelAccount action on the Customer record that will go to all the orders of that customer and set their status to “Complete” with the notes saying “Account cancelled”. To do this, a Reference Action that can be defined on the Customer. This action can specify a set of Orders to be acted on (those that are created for this customer) and an action to invoke on them (ChangeStatus). Now in order to pass the desired values (“Account Cancelled”) for the notes column to the ChangeStatus action, the Reference Action definition has the ability to bind the NotesInput value to an expression (in this case, constant text "Account Cancelled", but in general, it can be any expression that is appropriate in the context of a Customer).


Here is an example of an action that sets the value of a column. It uses an INPUT() function.

Here is an example of an action that references another action and binds its inputs to dynamic values.

The INPUT() function can be used in any expression but will always evaluate to its default value except for the specific usage scenarios below.
Scenario: In a Data Change Action that sets the value of a column, the INPUT() function must be used as the top-level expression (for example, Notes assigned to INPUT("NotesInput", "n/a"))

When this action is invoked via a user button click in the app user interface, it will prompt a dialog that asks the user to provide the value.
When this action is invoked from a Reference Action (whether in the running app or in an automation), the Reference Action can specify a binding expression.

   Was this helpful?How can we improve it?YesNoSubmit   

 Set input values dynamically in data-change actions
This feature is being rolled out gradually. 

Data change actions are logical operations that modify data values. The desired new values are defined by expressions. In many cases, that value is constant (for example, an action to Approve Order sets the status of the Order to "Approved") or it has a well-defined expression (for example, an action to Estimate Delivery Date action sets the estimated delivery date of the Order to the maximum of the delivery dates of each of its sub-orders). However, there are also situations that need to set an input value dynamically either by the user in an app dialog, or specified by another invoking action. 
Set input values dynamically in a data-change action, as follows:

When the action is used in the app, display a dialog to prompt the app user to enter values for the specified inputs. See Set input values dynamically for columns in a row by prompting user.
When the action is used in an automation, the app creator sets custom input values when configuring the step. See Set input values dynamically when running an action on a set of rows in an automation.
When the action is invoked from a Referenced Action (whether in the running app or in an automation), the Referenced Action can specify a binding expression using the input values. See Set input values dynamically when running an action on a set of rows (referenced actions).

In the action, use the following expression to access the input values: [_INPUT].[inputname]
To learn how to add input values when configuring an action, see Inputs.

Input values ([_INPUT].[inputname]) and INPUT() functions can't be used in the same action or task. They can be used in the same automation or app.

Set input values dynamically for columns in a row by prompting user
When an action is used in the app, you can display a dialog to prompt the app user to enter values for the specified inputs.
For example, consider an app with Orders and Customers. Let's say there is a Change Status action on an Order that changes the status to "Shipped" and also records a comment. In AppSheet, this would be implemented as a Data: set the values of some columns in this row action with two columns that are set by expressions: 

Status: “Shipped”
Details: “Some notes" ("n/a" by default)

For the app user, this action shows up as a “Change Status” button in their app.
Let’s assume we want to ask the app user to provide the notes that will be saved in the Details column. To do so, for the Change Status action, expand the Advanced section and add an input value, such as Notes, with an initial value of n/a. For example:



Then, you can use the input value to set the value of the Details column by using the expression: [_INPUT].[Notes]



When the app user clicks the Change Status button, they will be prompted with a dialog that asks them to provide the details. 


To learn how to add input values when configuring an action, see Inputs.
Set input values dynamically when running an action on a set of rows in an automation
You can set input values dynamically when running an acton on a set of rows in an automation by adding a Run a data action step and selecting Set row values. When an action is used in an automation, you (the app creator) can set custom input values when configuring the step.
For example, the following Run a data action step executes the Change Status action (defined in the previous section). For each step that runs the action, you can add custom details by setting the input value, Notes.

Set input values dynamically when running an action on a set of rows by using referenced actions
When the action is invoked from a Referenced Action (whether in the running app or in an automation), the Referenced Action can specify a binding expression using the input values.
Let's assume we occasionally want to cancel a customer’s account. In that case, we want a single Cancel Account action on the Customer record that will go to all the orders of that customer and set their status to “Complete” with the notes saying “Account cancelled”. To do this, a Referenced Action that can be defined on the Customer by adding a "Data: execute an action on a set of rows" action. This action can specify a set of Orders to be acted on (those that are created for this customer) and an action to invoke on them (Change Status). Now in order to pass the desired values (“Account Cancelled”) for the notes column to the Change Status action, set the Notes value to an expression in the the Referenced Action field (in this case, constant text "Account Cancelled", but in general, it can be any expression that is appropriate in the context of a Customer).
For example:


   Was this helpful?How can we improve it?YesNoSubmit   

 Run actions based on view events
View events allow you to specify actions to run when certain events occur, such as selecting a row in a table view or saving a form. These actions can replace default navigation behaviors, enabling you to create streamlined custom navigation within your apps.  
The following sections describe how to run actions based on view events:

Supported view event types
Configure an event action


Notes:


Multiple actions for one event can be combined by providing a grouped action.
Not all view types currently support event actions.
To configure Form Saved events, you may need to create a new form reference view first.
Actions based on different tables than the view will not appear in the drop-down. If you don't see an action in the list, make sure the data sources match.



Supported view event types
The following view event types are supported:

Row selected (table, deck, and gallery views)
Form saved (form views)

Row Selected (deck, gallery, and table views)
The Row Selected event is triggered when a user taps on an individual record in a deck, gallery, or table view. If you specify an action, it will replace the default behavior of viewing the record details in a detail view (even if the action does not cause its own navigation). Example use cases include the following:

Navigating directly to the edit form when selecting a row
Quickly changing the value of a status column without the need to open the details view 

Form Saved (form views)
The Form Saved event is triggered when a user saves an add or edit form. If an action is provided that causes navigation, it will replace the default navigation behavior (including auto-reopen and finish view settings). Unlike the row selected event, if a form saved event action is provided that doesn't cause navigation (such as an update row action or a navigation action whose condition is not met), the default navigation behavior will still occur.
Configure an event action
You can configure event actions within the Behavior view settings for the supported view types.
To configure an event action:

Create the event action, as described in Actions: The Essentials.
Configure a view. 
Expand the Behavior section and select the action in the  Event Actions drop-down for the event type.


Note: Only actions based on the same source table as the view are eligible to be selected as Event Actions. System-generated actions such as View Map associated with Address columns or View Related associated with Ref columns can also be selected. The default Auto assign option corresponds to the built-in behaviors normally associated with each event.

   Was this helpful?How can we improve it?YesNoSubmit   

 Export this view to a CSV fileThis action downloads the rows of a view to a CSV file.

Export only works for applications that require sign-in, and only when the app is running in a browser. It is not supported for public applications.

Invoke an "export this view to a CSV file" action
Once you have created the Export action as described in the sections below, you can invoke it as follows:

Open the application in a browser. Export only works when the app is running in a browser.
Navigate to the table view having the Export action.
Click the Export button. (If you do not see the Export button, you may need to edit the Export action and choose a different Prominence on the Appearance tab.)
The Exported CSV file should appear at the bottom of the browser screen.

Create an "export this view to a CSV file" action
To create an Export This View to a CSV File action:

Open the app in the app editor.
Go to Actions, click + in the top header of the Actions panel, and click Create a new action.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Behavior > Actions and click + New Action.



Give the action a meaningful name by setting the Action name property.
Use the For a record of this table dropdown to select the table from which the records should be downloaded. Views based on the table you select are eligible for export.
In the Do this dropdown, select App: export this view to a a CSV file (not a row-level action)
Set the CSV file locale property as described in configure the CSV locale.
Expand the Appearance tab.
Give the Export button a meaningful name by setting the Display name property.
Select an Action icon for the Import button.
    You can enter export in the search window and hit Enter to narrow down the list of icons. One of the icons showing an arrow leaving a document is often a good choice.
Select a Prominence to control how prominently the Export button is displayed.
Click Save.

Row filtering
The app creator and app user can control which rows are exported by:

The app creator can base the View on a Slice having a Row filter condition. Only rows that match the Row Filter Condition are exported.
The app creator can specify a LINKTOFILTEREDVIEW() with a filter expression. Only rows that match the filter expression are exported.
The app user can specify a Search Term in the Search box for the view while running the app. The app user can search any field for which Search? is true. Only rows that contain the Search Term are exported.
The app user can specify one or more Search Filter conditions using the Filter drop-down in the Search box while running the app. The app user can search any field for which Search? is true. The app user can apply Search Filter conditions for any combination of searchable fields. Only rows that match all of the Search Filter conditions are exported.

These row filtering techniques can be combined. For example, the app creator could define a View on a Slice having a Row Filter Condition. The app creator could then define a LINKTOFILTEREDVIEW() using that slice which has its own filter expression. Finally, the app user could use the Search box to specify a Search Term or one or more Search Filter conditions while running the app. Only rows that match all of these filtering conditions are exported.
Exported row sort ordering
You can control the exported row sort ordering by specifying Sort by for the View.
Column filtering and column ordering
You can control which columns are exported and the order of those columns by basing the View on a Slice and specifying Slice Columns for the Slice.
Specifying Column Order for a Table View currently has no effect on which columns are exported or the order of those columns.
Private tables
CSV Export can be used to export data from private tables.

  The app creator must first create an App: export this view to a a CSV file action for the Private table, as described above.

  The app user can then sign-in to AppSheet using their account, invoke the application, and invoke the App: export this view to a a CSV file action, as described above. AppSheet will locate the Private table belonging to the signed-in user and export the contents of the Private table to the CSV file.
Sample applications with an export action

Export CSV
Export CSV of filtered rows

Troubleshoot
If CSV export fails see Troubleshoot CSV export.
   Was this helpful?How can we improve it?YesNoSubmit   

 Import a CSV file for this viewThe App: import a CSV file for this view action uploads the rows in a CSV file through the specified view. You can use this action to:

Add one or more new records to an AppSheet table.
Update one or more existing records in an AppSheet table.
Both add one or more new records to an AppSheet table and update one or more other existing records in an AppSheet table.


Import only works for applications that require sign-in, and only when the app is running in a desktop browser and not when it is running on a iOS or Android device. It is not supported for public applications.

Invoke an "import a CSV file for this view" action
Once you have created an Import action as described in the sections below, you can invoke it as follows:

Open the application in a desktop browser. 
Navigate to the table view having the Import action.
Click the Import button. (If you do not see the Import button, you may need to edit the Import action and choose a different Prominence on the Appearance tab.)
Use the File Open dialog which is displayed to select the CSV file you wish to import.
An Import CSV Started dialog like the following will be displayed.


When the Import finishes successfully, an Import CSV Finished dialog like the following will be displayed.


If an error occurs, an Import CSV Failed dialog like the following will be displayed. Refer to the Troubleshooting guidelines section below.



Considerations for the CSV file size
AppSheet imposes a 4-minute time limit when importing a CSV file. We do this to ensure that all users get fair access to the system. Keep this time limit in mind when creating your CSV file.
The following work all counts towards the time limit:

Time to compute initial value expressions and virtual field app formulas.
Time to check and update Change fields.
Time to verify that each field contain a value of the appropriate type.
Time to enforce Required, Required_If, and Valid_If conditions.
Time to add or update the records to the table. This time depends, in part, on which provider the table uses. For SQL providers we batch read and write operations for efficiency.
Time to re-read the added or updated records to obtain after images, if automations are present.
Time to process the automations, if any.

As you can see, the time required to import a CSV file depends on a lot of factors and can be hard to predict. In general, the more rows and columns in the CSV file, the longer the import time. We suggest you start with a batch size of a few hundred to a few thousand records, and experiment to see how long CSV import takes for your table. Then adjust your batch size to stay comfortably within the time limit.
Create the "import a CSV file for this view" action
Do the following to create an App: import a CSV file for this view action:

Open the app in the app editor.
Configure the table settings for the table you wish to import into and ensure both Adds and Updates are checked for the Are updates allowed? property.
Go to Actions, click + in the top header of the Actions panel, and click Create a new action..
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Behavior > Actions and click + New Action.



Give the action a meaningful name by setting the Action name property.
Use the For a record of this table drop-down to select the table in which the records should be added or updated.
In the Do this dropdown select App: import a CSV file for this view (not a row-level action).
Set the CSV file locale property as described in configure the CSV locale.
Expand the Appearance tab.
Give the Import button a meaningful name by setting the Display name property.
Select an Action icon for the Import button. You can enter import in the search window and hit Enter to narrow down the list of icons. One of the icons showing an arrow going into a document is often a good choice.
Select a Prominence to control how prominently the Import button is displayed.
Click Save.

CSV file format
Each row in the CSV file corresponds with a record to be added or updated in the table, except for the first row which must be a header row.
Each column in the CSV file corresponds with a field in the table. The header row contains the field names of the columns in the table. The column names in the CSV header row must exactly match the field names in the table including capitalization. The columns in the CSV file may occur in any order. They need not match the field order of the table.
It is not necessary to include a column in the CSV file for every field in the table. This is explained further below.
CSV file with unicode data
If your CSV file contains Unicode data, make certain the file is save in Unicode format. For example, on Microsoft Windows you can:

Open the CSV file in Notepad.
From the File menu select Save As...
In the Encoding dropdown select any of the UTF values such as UTF-8 or UTF-8 with BOM (Byte Order Mark).
Click Save

For example, this is necessary if:
The file contains any of the five French accent marks:

ç – la cédille (the cedilla)
é – l'accent aigu (the acute accent)
â/ê/î/ô/û – l'accent circonflexe (the circumflex)
à/è/ì/ò/ù – l'accent grave (the grave accent)
ë/ï/ü – le tréma (the trema)

The file contains Greek, Russian, or Arabic characters.

Α α, Β β, Γ γ, Δ δ, Ε ε, Ζ ζ, Η η, Θ θ, Ι ι, Κ κ, Λ λ, Μ μ, Ν ν, Ξ ξ, Ο ο, Π π, Ρ ρ, Σ σ/ς, Τ τ, Υ υ, Φ φ, Χ χ, Ψ ψ, and Ω ω. (Greek characters)
А, Б, В, Г, Д, Е, Ё, Ж, З, И, Й, К, Л, М, Н, О, П, Р, С, Т, У, Ф, Х, Ц, Ч, Ш, Щ, Ъ, Ы, Ь, Э, Ю, Я (Russian characters)

The file contains Unicode currency signs such as:

The Pound Sign £
The Euro Sign €
The Yen Sign ¥
The Cent Sign ¢

The file contains Unicode signs such as:

The Degree Sign °
The Copyright Sign ©
The Registered Sign ®

The file contains Fraction signs such as:

The One Quarter Sign ¼
The One Half Sign ½
The Three Quarters Sign ¾

The file contains Unicode superscripts or subscripts.
Add records
Each CSV Row value must normally include the key field value of the record being added. However, if the key field contains an Initial value, you can omit the key field value because the system will initialize the key field to that value. For example, you should omit the key field value when the key field has an Initial value of UNIQUEID() or RANDBETWEEN().
If no CSV column is present for a field of the table, the table field's Initial value will be used to give the field a value.
When a record is added:

All fields are initialized to initial values and all app formulas are computed.
The field values you specify in the CSV row are applied.
App formulas are computed and change fields are updated.
Required, Required_If, and Valid_If conditions are enforced.
The record is added to the table.
Automations, if any, are invoked.

Update records
Each CSV row must specify the key value of a table record to be updated.
The CSV file should contain a column for every updatable field in the table except Virtual and Change columns. If you include a Virtual or Change column, the column value you specify will be ignored. If the CSV file omits an updatable column, the field's "Initial value is used.
When a record is updated:

All fields are initialized to initial values and all app formulas are computed.
The field values you specify in the CSV row are applied.
App formulas are computed and change fields are updated.
Required, Required_If, and Valid_If conditions are enforced.
The record is updated in the table.
Automations, if any, are invoked.

CSV row data values
Each column's values must be suitable for its column type.
The value for a Yes/No column can be specified in several equivalent ways.
  All of the following values are equivalent ways of specifying TRUE.
  Field values within quotes are case-insensitive. For example, "TRUE", "True", "true", and "TruE" are equivalent.

"MyBool": true 
"MyBool": "True"
"MyBool": "true"
"MyBool": "T"
"MyBool": "t" 
"MyBool": "Yes"
"MyBool": "yes" 
"MyBool": "Y"
"MyBool": "y"

  All of the following values are equivalent ways of specifying FALSE.
  Field values within quotes are case insensitive. For example, "FALSE, "False", "false", and "FalsE" are equivalent.

"MyBool": false 
"MyBool": "False"
"MyBool": "false"
"MyBool": "F"
"MyBool": "f" 
"MyBool": "No"
"MyBool": "no" 
"MyBool": "N"
"MyBool": "n"

Private tables
CSV Import can be used to import data into private tables.

  The app creator must first create an App: import a CSV file for this view action for the private table, as described above.

  The app user can then sign in to AppSheet using their account, invoke the application, and invoke the App: import a CSV file for this view action as described above. AppSheet will locate the private table belonging to the signed-in user and import the CSV file contents into that private table.
Troubleshoot
If CSV import fails see Troubleshoot CSV Import.
   Was this helpful?How can we improve it?YesNoSubmit   

 Configure the CSV localeHow configure the CSV localeWhen you configure either the Import a CSV file for this view or Export this view to a CSV file action, you must specify the locale of the CSV row data in one of two ways.

You can select one of these supported locales from the CSV file locale dropdown. The locale defaults to English (United States). The locale you choose applies to all users of the action.
You can supply a locale expression that yields the locale identifier for one of these supported locales such as "en-US" for English (United States), "en-GB" for English (United Kingdom), or "de-DE" for German (Germany). This allows you to customize the locale for each user. For example, you might store the locale identifier in a field of UserSettings or retrieve it from a normal table using a LOOKUP expression. See topic "Storing the Locale in UserSettings" below for more details.

Locale and data format
The locale must match the format of the data in the CSV file. This is important for data values who's format varies by locale. For example, when Locale is English (United States), date values must be entered in M/d/yyyy format; when Locale is English (United Kingdom), date values must be entered in dd/MM/YYYY format; when Locale is German (Germany), date values must be entered in dd.MM.yyyy format.
See Supported locales for the date and time format patterns.
The following data types are locale dependent:

Date
DateTime
Decimal
Percent
Price
Time

Locale and CSV delimiter
The locale also dictates the delimiter used between data values in the CSV file. The delimiter normally complements the decimal number separator.

When the decimal number separator is period, the delimiter is comma.
When the decimal number separator is comma, the delimiter is semicolon.

When the locale is English (United States):

Dates are in M/d/yyyy format.
Times are in h:mm:ss tt format.
Decimal, Price, and Percent values use period as the decimal separator.
CSV data values are delimited by commas.
LatLong values should be enclosed in quotes. For example: "37.300000, -113.050000"

When the locale is English (United Kingdom):

Dates are in dd/MM/YYYY format.
Times are in HH:mm:ss format.
Decimal, Price, and Percent values use period as the decimal separator.
CSV data values are delimited by commas.
LatLong values should be enclosed in quotes. For example: "37.300000, -113.050000"

When the locale is German (Germany):

Dates are in dd.MM.yyyy format.
Times are in HH:mm:ss format.
Decimal, Price, and Percent values use comma as the decimal separator.
CSV data values are delimited by semicolons.

Store the locale in User Settings
You can store the locale in UserSettings as follows:

Open the app in the app editor.
Go to Data  > User Settings.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Go to the Data  > User Settings tab and expand _Per Users Settings.



Choose an available User Settings field and give it an appropriate name such as CsvLocale.
Set the field's Type to Text.
Set the field's Initial value to a supported locale ID  such as de-DE.
Click the Save button.
Go to Actions .
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Behavior > Actions.  



Open the Import or Export action.
Click the expression (beaker) icon following the CSV file locale property and enter the following locale expression: USERSETTINGS(CsvLocale)
Click the Save button.

   Was this helpful?How can we improve it?YesNoSubmit   

 Edit multiple rows using CSV export and import
You can edit multiple rows in a table by:

Exporting the rows of a view to a CSV file using the Export this view to a CSV file action.
Updating the row data in the CSV file. When the key value in the CSV row matches the key of an existing table record, then that table record will be updated when the CSV file is Imported.
You can also add new rows to the CSV file.
    
If the key value specified in the CSV row does not match the key of an existing table record, then a new record with the specified key will be added to the table.
If the key value is omitted from the CSV row and the table's key field contains an Initial value of UNIQUEID() or RANDBETWEEN(), then the system will add the new row and initialize the row's key field to the Initial value.


Importing the rows of the CSV file to the view.

Import and Export are symmetric. If you Export in a locale it is best to Import in that locale.
This action only works on desktop browsers and not on iOS or Android devices.
   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot CSV ExportResolve problems with CSV ExportIf the CSV Export data action fails, the following tips may help you resolve the problem.

Export only works for applications that require sign-in, and only when the app is running in a browser. It is not supported for public applications.

Export fails after about two minutes
There is a 2-minute elapsed time limit on how long CSV Export is allowed to run. Once that time is exceeded, the CSV Export will be cancelled and no CSV file will be produced. We do this to ensure that no single user monopolizes the resources of the system to the detriment of other users.
CSV Export time limit checking is enforced in various places in the code, but primarily when evaluating expressions. As a result, some CSV Exports may exceed the time limit and succeed, some may be cancelled after running more than the time limit, and some may be cancelled promptly when the time limit is reached.
The CSV time limit is more likely to be exceeded if one or more of the following conditions are true.

The table you are exporting from contains a lot of rows be it a Google Sheet, Excel worksheet, or SQL database. This is typically not a problem unless there are a very large number of rows.
There are expensive filters condition expressions being evaluated to decide which rows to export. Sometimes these filter condition expressions can be simplified while yielding the same result.
There are expensive virtual column expressions being used in the table being exported. Expensive virtual column expression computations are one of the primary reasons that the time limit may be exceeded. Sometimes these virtual column expressions can be simplified while yielding the same result.

You can see performance information by opening the app in the Editor, going to Manage > Monitor > Performance Profile, and clicking Launch Performance Analyzer. Look for ExportView operations. Click the binoculars icon to see the performance information.
Note: We currently display very little detailed performance information for CSV Export. We hope to remedy this in the future.
When possible, consider partitioning a single CSV Export into two or more smaller CSV Exports.
Unexpected rows appear in the Exported View when using Search Filter conditions
This can occur when rows in the exported view contain Number, Decimal, Price, Percent, or Ref field values that are blank. The server expression system may include rows in your view where the field value specified in the Search Filter is blank. This is the result of a bug in the way the server expression system compares blank field values. You can often fix this problem by changing the Blank value comparison mode setting from Legacy to Consistent.
For more information about configuring the Blank value comparison mode setting, see Configure the behavior of comparison operators. 
Note: If you see bad side effects after changing from Legacy to Consistent mode, you can always revert to Legacy mode.
The expression is valid but its result type '<type>' is not one of the expected types: Text
This error message displays when the expression specified in the CSV file locale property of the Export action does not yield a text value. Update the expression to return a valid locale identifier.
Export CSV failed because CSV file locale is missing.
This error message displays when the expression specified in the CSV file locale property of the Export action yields an empty string rather than a valid locale identifier. Update the expression to return a valid locale identifier.
Export CSV Failed. CSV file locale 'en-XX' is invalid.
This error message displays when the expression specified in the CSV file locale property of the Export action yields an invalid locale identifier. Update the expression to return a valid locale identifier.
Export phone numbers with leading zeros to Excel
If you export Phone or Text type fields that contain leading zeros, the leading zeros may not be displayed when you open the CSV file in Microsoft Excel. The leading zeros are present in the CSV file. You can verify this by opening the CSV file in Microsoft Notepad. To get the leading zeros to be displayed in Microsoft Excel, use the Second and more 'surgical' way described in this FAQ. 
   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot CSV ImportResolve problems with CSV ImportIf the CSV Import data action fails, the following tips may help you resolve the problem.

Import only works for applications that require sign-in, and only when the app is running in a browser. It is not supported for public applications.

EnumList field import fails with "failed Valid_If condition"
You may see the failed Valid_If condition error if you import a CSV file containing an EnumList field. Though, this issue can occur regardless of whether the EnumList field was imported. For details, see Troubleshoot "failed Valid_If condition" for EnumList fields.
The expression is valid but its result type '<type>' is not one of the expected types: Text
This error message displays when the expression specified in the CSV file locale property of the Import action does not yield a text value. Update the expression to return a valid locale identifier.
Importing records to table: TestCsvImport failed because CSV file locale is missing.
This error message displays when the expression specified in the CSV file locale property of the Import action yields an empty string rather than a valid locale identifier. Update the expression to return a valid locale identifier.
Import CSV Failed. CSV file locale 'en-XX' is invalid.
This error message displays when the expression specified in the CSV file locale property of the Import action yields an invalid locale identifier. Update the expression to return a valid locale identifier.
Row key field '<field Name>' value is missing.
If the CSV file header does not contain the table's key column name, or if the CSV file header does not exactly match the table's key column name, you may see an error such as the following:
Row key field 'Name' value is missing.
This happens when the table's key column name cannot be found in the CSV file header.
In the example above, the table's key column name was Name but the CSV file header contained name which was not capitalized.
Field '<field Name>' cannot be converted to type '<type>' using locale '<locale name>'.
If the wrong locale is specified for the CSV Import data action, you may see an error such as the following:
Error: Row having key 'Bob' in table 'TestCsvImport' containing value '25/12/2021' in field 'OrderDate' cannot be converted to type 'Date' using locale 'English (United States)'.
This happens because the CSV file locale you specify for the Import data action determines how field values in the CSV file which are locale sensitive are parsed. For a list of locale sensitive data types see Locale and Data Format.
In the example above, the date field OrderDate in the CSV file contained a date value in English (United Kingdom) dd/MM/YYYY format. The Import data action specified a CSV file locale of English (United States) so all dates are expected to be in M/d/yyyy format. The error occurred because 25 is not a valid month value.
Only one CSV header column was found
If the wrong locale is specified for the CSV Import data action, you may see the error:
Failed to get rows due to: Only one CSV header column was found. It has the value 'Name,Date,DateTime,Decimal,Price,Count'. It is possible that the wrong Locale was specified and hence the wrong column delimiter ';' was used. If you are attempting to Import CSV data, please verify that the proper 'CSV file locale' is being specified in the Import data action.
This happens because the locale you specify for the Import data action determines which CSV delimiter is used to parse the CSV header row. For example, if you specify locale de-DE then the expected CSV delimiter is semicolon. If the CSV header row delimiter is actually comma, then the CSV header row will not be parsed correctly and this error will result.
Timeout occurred or import is taking too long
If your CSV file contains a large number of rows or columns, CSV Import may exceed the 4-minute time limit. The complexity of your app formulas and the number and complexity of your automation processes can also have a large effect on the CSV Import time. See Choose a CSV file size for more details.
You can use the Performance Analyzer to better understand CSV Import performance. In the Editor go to Manage > Monitor > Performance Profile and click Launch performance analyzer to launch the performance analyzer.
Find and expand the ImportCSV record to see where the time is going.

If your table includes Virtual Fields, check the time required to compute the app formulas for those fields.
If you have automation processes that are triggered by the CSV Import, check the time required to process them.

   Was this helpful?How can we improve it?YesNoSubmit   

 Offline and Sync: The EssentialsAppSheet apps can be used on a mobile device even when that device is offline and disconnected from the network. This is possible because the information needed to run the app (the app definition, the data, and optionally images and documents) is stored locally on the mobile device. If you are running the app in a web browser, see Run in an offline browser.
If you have security filters in your app, they allow you to partially sync the app with data in the spreadsheet. 

One important precondition for all offline access is that the app must initially be launched on the device when it is online. This allows the needed information to be downloaded and stored locally.

The following sections describe how to configure and use offline and sync:

Configure offline and sync
Configuration properties
Delayed sync
Considerations for offline use
Launch offline
Prolonged offline use
Offline with sign in
Run in an offline browser

Configure offline and sync
 To configure offline and sync: 

 Open the app in the app editor.
Select Settings > Offline mode.
Expand each section and configure the offline mode properties, as required.
Select Settings > Performance.
Expand each section and configure the performance properties, as required.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy navigation

 To configure offline mode:

Open the app in the app editor.
Select Behavior > Offline/Sync.
Expand each section and configure the properties, as required.
When you are done, save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






Configuration properties
Configuration properties that you can use to configure offline and sync are summarized in the following sections:
Offline mode properties
Configure the properties for offline use. For more information, see Where is my data cached?



Property
Description


The app can start when offline
Enable the app to start even when there is no internet connection. Changes will not be synced until the next time the user is online. See Enable app to start when offline.


Store content for offline use
Make all images and files available for offline access. See Cache images and documents.



Sync performance properties
Configure the performance properties.

Sync from your app to the cloud
Sync from the cloud to your data source

Sync from your app to the cloud
Configure the properties for sync from your app to the cloud.



Property
Description


Sync on start
Sync data every time the app starts to make sure the user has the latest data.


Delayed sync
Only sync after a change when the user initiates a sync; the app doesn't sync after every change. See Delayed sync.


Automatic updates
Automatically send changes made by the current user as they occur. Automatically retrieve changes made by other users approximately every 30 minutes. See Configure automatic updates.



The following table summarizes the interactions between the Delayed sync and Automatic updates property settings. 



Properties
Immediate sync 
Auto sync (every 30 minutes)
Wait for sync to complete
Manual sync required?



 Delayed sync
 Automatic updates
Tip: Best for most use cases.

Yes
Yes
No
No



 Delayed sync 
 Automatic updates 
Tip: Best for apps that are expected to work offline or where you want to control when sync occurs.

No
No
Yes (mobile)
      No (desktop preview)
Yes



  Delayed sync 
  Automatic updates 
Tip: Best for apps with data that is updated by automation or by the data source directly.

Yes
Yes
Yes (mobile)
      No (desktop preview)
No



   Delayed sync 
   Automatic updates

Yes
No
Yes (mobile)
      No (desktop preview)
No



Sync from the cloud to your data source
Configure the properties for sync from the cloud to your data source.

Note: The following properties require an AppSheet Core plan or above. See AppSheet subscription plans.




Property
Description


Server caching

Store data on the AppSheet server instead of fetching from your cloud provider every time. This improves syncing for large tables, but will only be used for rarely updated, read-only data.



Delta sync

Only update tables that have changed since the last sync. This improves syncing, but can't be used in certain cases (for example, spreadsheets with external formulas or when virtual columns need to be updated at each sync). See also Improve the speed of sync.



Quick sync

Turn on to instantly see other users' changes as they are saved. Users only see changes made by other users that are using the same version of the app.
 
For best results, we recommend turning on Start on sync and Automatic updates when using Quick sync.
 
You shouldn't use this feature if your app uses advanced security filters, if your data sources compute values automatically (for example, if your Google Sheets data source uses formulas), or if your app has virtual columns that require a complete sync to be computed properly.
 
For complete details, see Use Quick sync to instantly see other users' changes.

Individual data updates will be cached on AppSheet servers. If you have strict data residency requirements, you may not want to use this feature.





Delayed sync
Sync is the step that sends data updates from the device to the backend and retrieves the latest app definition and data from the backend to the device. If you choose Delayed Sync for your app, the app will not sync data immediately when an edit, delete, or add occurs. Rather, your changes will be queued up until you explicitly choose to sync. You should select this option for apps that are expected to work in offline environments or where you want to control when sync occurs. For example, you can use Delayed Sync to control when you use network data bandwidth.
Intermittent connectivity
Apps that don't enable Delayed Sync will attempt to synchronize changes every time that data changes on the device. However, even in a connected environment, there may be intermittent connectivity problems that prevent synchronization from succeeding. In this case, AppSheet automatically queues changes and defaults to delayed sync behavior to prevent the loss of data. Even repeated sync retries will not cause duplication or corruption of data, except for the special case where you use RowNumber as your key. For more information, see What is a key?
Viewing content offline
All spreadsheet/table data is automatically copied to the device so that it is available offline. However, images and documents are not copied to the device by default, because they may be large. You can enable Offline Content Caching to tell AppSheet to copy images and documents to the device. As with all other offline data caching, the images and documents are copied to the device when the app is initially run on the mobile device while online. The images and documents are refreshed as needed when Sync occurs. You can learn more about caching in this article: Where is my data cached?
Depending on the number and size of your images and documents, it may take several minutes for all of your content to be downloaded and saved on the device. Even if the images or documents are displayed by the client, this does not mean that the content has been downloaded and saved. When you first download the content, you should connect your device to the network, launch the application, and wait for a few minutes before disconnecting. Then go offline and check whether all of the images and documents have been downloaded and saved on the device. If not, reconnect and allow even more time for the images and documents to be downloaded and saved.
Note that offline content viewing of images and documents only works when the links to the images or documents use relative paths as described in Work with PDF files.
Considerations for offline usage
Review the following considerations for offline usage for the following data types:

Maps
Videos
Audio files

Maps
It's possible to capture the user's current location with a LatLong input because this can use the device's GPS. However, you won't be able to display the position in the map view while the app is offline. AppSheet is unable to cache Google map data for offline use because it would violate Google's terms of service. Google's own Maps app does offer downloading of map regions for offline use, but they don't make this feature available for third-party apps that use maps. 
Videos
Video column data types are unavailable offline, are read-only, and do not (currently) support data capture. However, you can use the data type to play video content. The Video type supports MP4 video URLs or YouTube embed URLs of this format: https://www.youtube.com/embed/{id}
Audio files
File column data types are not stored locally at the moment, unlike images and other data.
Launch offline
If you have used the lightweight deployment mechanism, you are familiar with launching apps from their home screen icons. By default, a mobile device needs to be online in order to launch an app from its home screen icon. Once launched, the app can then function offline or with intermittent connectivity.
However, if you wish to launch the app when the device is offline, you must configure The app can start when offline option. You must do this before installing the app on your device. If your app has already been installed to the home screen, the shortcut must be deleted and installed again after enabling the offline option. Otherwise you will need to launch it from the AppSheet app itself.
Prolonged offline use
You should not run for prolonged periods (multiple days or weeks) while completely offline and without connectivity. There are two reasons for this:

The app creator may make modifications to the app definition, and the user's app falls out of date.
There may be changes to the underlying data. If the offline app makes its own data changes, an eventual sync will apply the older updates at a much later time and override changes made by other users.

Offline with sign in
If your app requires sign-in, your users will occasionally be asked to sign in again when their authentication expires.  This will only occur during a sync when the device has connectivity.
Run in an offline browser
Some customers choose to run the app in a web browser (fullscreen or in an iframe). This is particularly useful when running on mobile platforms like Windows Phone where the mobile app isn't supported.
The browser must be online when the AppSheet application is first loaded. Once the app is loaded, it can be used when the device is offline or has intermittent network connectivity. However, offline image and document caching will not work. You can keep working in this manner offline as long as the page isn't closed or unloaded. Saved changes will persist across page reloads or browser restarts for all data types except images or documents in a form.  For images or documents, sync must be performed before that browser tab is closed-- otherwise, the captured image or document content will be lost.
   Was this helpful?How can we improve it?YesNoSubmit   

 Sync: Between the app and the backendLearn how the local copy of your data is kept in sync with the backend spreadsheet.
See also: Offline and Sync: The Essentials 
Apps built with AppSheet are designed to handle intermittent connectivity loss, or full offline operation. This is achieved by maintaining a copy of the relevant data locally on the mobile device (securely, of course). As a side-effect of this design, we have to consider when and how the local copy of the data stays in sync with the backend spreadsheet.
There are three cases to consider:

Changes are made in the app and need to be propagated to the backend.
Changes are made to the backend data (either directly, or by other users of the AppSheet app) and these need to be propagated to the app.
Changes are made to the app definition itself and need to be propagated to the app.

All of these occur as part of Sync. There are four ways in which Sync may be invoked:

If this is the first time the app is being invoked on a specific device, Sync is automatically invoked when the app is started. This fetches the latest app definition along with the data needed to run the app.
For apps that work primarily online and want close to synchronous behavior, the app creator should disable the Delayed Sync setting. Every time the app user saves any edit, add, or delete action, this not only makes the change locally on the device but also immediately invokes Sync.   
If the app has local changes that have not been propagated to the backend, Sync   is highlighted in the app. Clicking  will manually invoke the Sync function. For apps that work primarily offline, the app creator should enable the Delayed Sync setting, and the app users will explicitly invoke Sync when they have network connectivity.
The app creator can also enable the Sync on Start option. When this is enabled, the app syncs every time it is started by the user.

Each Sync action itself has three steps that occur sequentially:

Any local changes are sent to the backend and applied to the backend data in the order they were originally executed.
The latest app definition is fetched down to the mobile device. If no change has occurred since the last Sync, this step is optimized.
The latest backend data is fetched down to the mobile device. If no change has occurred since the last Sync, this step is optimized.

   Was this helpful?How can we improve it?YesNoSubmit   

 Where is my data cached?By default, AppSheet does not cache spreadsheet data on the server. However, for read-only apps, server-side data caching significantly improves the speed perceived by app users during a Sync. In other words, the mobile app can get the data directly from AppSheet's servers without having to wait for the data to be fetched from the backend cloud storage platform (for example, Google Drive or Dropbox). 
By default, AppSheet does cache spreadsheet data on the mobile client in order to allow continued app usage despite transient loss of network connectivity (for example, getting into an elevator). However, full and seamless offline behavior needs to be explicitly enabled in the app definition.
Configure settings for offline use
 To configure settings for offline use: 

 Open the app in the app editor.
Select Settings > Offline mode.
Configure the settings under Offline Use.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy navigation

 To configure offline mode:

Open the app in the app editor.
Select Behavior > Offline/Sync.
Configure the settings under Offline Use.
When you are done, save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






Cache images and documents
By default, AppSheet does not cache images and documents that are referenced by the spreadsheet data for offline access.  To explicitly require AppSheet to cache images and documents, when configuring settings for offline use under Offline Use enable Store content for offline use.
After this option is enabled, image and document downloads will happen asynchronously during initial app load. Subsequently, the entire app and its image and document content will be available offline.
Enable app to start when offline
By default, your device needs to be online to start an AppSheet app from the home screen icon. Of course, it can then function despite transient loss of connectivity.
To enable the app to start when offline, when configuring settings for offline use under Offline Use enable The app can start when offline.

Your data is never stored on AppSheet servers
    The AppSheet web service is an intermediary between the mobile app and the backend spreadsheet. Importantly, it does NOT have a persistent copy of the spreadsheet so there is no danger of your data being compromised via the AppSheet web service. There are two caveats to this statement:



You can optionally ask AppSheet to cache spreadsheet data in our service in order to improve performance. If so, this data is cached in-memory in our server for up to five minutes at a time.


AppSheet caches resized copies of images used by the apps. Image resizing is important to conserve network bandwidth to mobile devices.




   Was this helpful?How can we improve it?YesNoSubmit   

 Can I have my app update automatically?
The AppSheet editor performs automatic updates by default. Changes made by the user are automatically sent as they occur. Changes made by other users are retrieved by the editor every 30 minutes. 
See also: Automatic updates
You can disable automatic updates and enable delayed sync to sync the app only when the user clicks Sync. 
To disable automatic updates and enable delayed sync:

 Open the app in the app editor.
Select Settings > Performance.
Under Sync: App to Cloud:
    
Enable Delayed sync.
Disable Automatic updates.


When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


 

If you are using the legacy navigation

 To disable automatic updates and enable delayed sync:

Open the app in the app editor.
Select Behavior > Offline/Sync.
Under Sync: App to Cloud:
        
Enable Delayed sync.
Disable Automatic updates.


When you are done, save the app by selecting one of the following:
        
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.






   Was this helpful?How can we improve it?YesNoSubmit   

 Configure automatic updatesWhen configuring offline mode, if you enable Automatic updates in the Sync: App to Cloud section, there are two things that happen: 

When a user makes a change locally, the change starts being pushed back to the server. If the device is connected, sending will be attempted; if updates fail it will take longer. When working normally, this happens immediately. 
It takes about 30 minutes to read back the latest data from other users' changes. Changes are applied to a particular user's app when they navigate away from the place where the change was made. The 30-minute timeframe exists so as to mitigate the amount of work for the server. 

Automatic updates is enabled by default. 

If you disable Automatic updates, you have to sync changes manually. If the updates aren't happening, that's a sign you may have an error and need to sync manually as well to figure out what's causing the issue. 
   Was this helpful?How can we improve it?YesNoSubmit   

 Use Quick sync to instantly see other users' changesThe Quick sync setting allows you to instantly see other users' changes as they are saved. Users only see changes made by other users that are using the same version of the app.
You shouldn't use this feature if your app uses advanced security filters, if your data sources compute values automatically (for example, if your Google Sheets data source uses formulas), or if your app has virtual columns that require a complete sync to be computed properly.
 

Configure Quick sync
Security filter support


If users change data directly in the data source (for example, editing directly in Google Sheets) or through another non-AppSheet system, the app will not reflect this updated data until the next sync.


Individual data updates will be cached on AppSheet servers. If you have strict data residency requirements, you may not want to use this feature.

Configure Quick sync
To configure the Quick sync setting, see Configure offline and sync. Quick sync is turned on by default.
For best results, we recommend turning on Start on sync and Automatic updates when using Quick sync.
Security filter support
Simple security filters that rely on row-scoped calculations (such as value comparisons) or user settings are supported for use with Quick sync. More complex security filters, for example those that rely on values from referenced tables, virtual columns, and other data outside the scope of the row, are not currently supported.
For example, the following simple security filters are supported:

Constants, such as =TRUE and =FALSE 
Value comparisons, such as[Status]='Pending'
User settings and email checks, such as [Assigned To]=USEREMAIL()

The following complex security filters are not supported at this time:

References in expressions like [Order].[Assigned To]=USEREMAIL()
SELECT(), FILTER(), and other expressions that are table scoped, such as SELECT(Table1[Col1], TRUE) 

   Was this helpful?How can we improve it?YesNoSubmit   

 Optical Character Recognition (OCR)

This feature is available to AppSheet Enterprise accounts only. See AppSheet pricing.



What is OCR?
OCR is a technology that allows you to access the text or writing that appears in an image. With AppSheet's OCR feature, you can speed up data entry by automatically filling out your forms from an image.
Watch a video to learn more about OCR.
AppSheet OCR
What kinds of images work with OCR?
AppSheet's OCR feature can be used when you need to scan multiple documents that all have a fixed layout. The image may contain printed text or handwriting. Some examples of this include:

A standardized paper form
USPS shipping labels
Invoices from a single company

Some cases where AppSheet's OCR feature will not work include:

Business cards (which do not adhere to a standard format)
Forms that use checkboxes
Apps that do not have an internet connection

How do I use OCR in my app?
AppSheet's OCR feature is currently in beta. You can access it in the AppSheet editor under Intelligence > OCR.
To get started with OCR, you will need at least four example images and the values that should be extracted from them. AppSheet will inspect the given examples and come up with a general template to match against new images.
Once you have your examples, you can create a new OCR model:

Open your app in the editor.
Go to Intelligence .
    The Intelligence panel opens.
Click + adjacent to the OCR Models heading.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to the Intelligence > OCR Models pane and click + New OCR Model.



Rename the OCR model by updating the name field.
Select the table that contains the image examples in the Table drop-down.
Choose the image column that has the examples inputs in the Image Column drop-down.
Set the Output Columns to include the columns that contain the extracted data.

Save the app by selecting one of the following options:
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Once you save your changes, your custom OCR model will be created. AppSheet will show the patterns that were found in each example and inform you of any issues that happened along the way.
For example, let's say we're extracting information from pictures of a conference badge. We'll create a new OCR model that will operate on the Badges table, extracting from the Badge image column, and returning the First Name, Last Name, Organization, Twitter Handle, and Role from the image.
After the OCR model has finished training, it's available for use in your app. Your columns will automatically be initialized using the extracted values from the image. Behind the scenes, AppSheet has added special OCR formulas to initialize the values of your columns.

   Was this helpful?How can we improve it?YesNoSubmit   

 Predictive models

This feature is available to AppSheet Enterprise accounts only. See AppSheet pricing.



Predictive models perform a statistical analysis of your app data in order to make predictions about future data. Some examples include:

Categorizing customer feedback, given examples of feedback and the categories they belong to
Predicting customer churn, given examples of customers and whether they churned
Estimating the cost of a project, given examples of previous projects and how much they cost

Predictive models work by using machine learning algorithms to generalize from your historical data. Machine learning has two phases:

The training phase, when your historical training data is analyzed and a new predictive model is created
The prediction phase, when your predictive model makes predictions on data that was not included in your training data

Google Cloud Machine Learning
Behind the scenes, AppSheet uses Google Cloud's Machine Learning Platform to create predictive models. This means that during the training phase, your data is accessed by AppSheet's code running on a Google Cloud service. During the prediction phase, your model is privately hosted on another Google Cloud service.
Create a new predictive model


To create a predictive model:

Open your app in the editor.
Go to Intelligence .
    The Intelligence panel opens.
Click + adjacent to the Predictive Models heading.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to the Intelligence > Predictive Models pane and click + New Predictive Model.



Rename the predictive model by updating the Name field.

Configure the training model, including:

Training Data Table: This is the table in your app that holds your historical data that is used as input to the machine learning algorithm.
Column To Predict: The column in your training data that you want to make future predictions about. The column to predict must be Yes/No, Enum, Ref, Price, Decimal, or Number.
(Optional) Model Inputs: The columns in your training data that contain relevant information for making a prediction. If this is left blank, AppSheet will automatically infer which columns are relevant. If you need to override AppSheet's decision, then you can explicitly specify the relevant columns.


Save the app by selecting one of the following options:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Model training
Once the editor refreshes, you will be shown a live status of your model as it is being trained. Training generally takes less than a minute, but depends on the size of your training data.

Once your model has finished training, you will be shown feedback about your model's accuracy and information about how it makes predictions. The particular information shown will depend on the type of column that your model is predicting.

Making predictions
Once your model is trained, you can incorporate it into your app in a few different ways. The easiest way to use your model is to flip a switch in your model's configuration that will either:

Add a virtual column to your table that will hold your model's output prediction, or
Add an initial value to your prediction column

 

You can also use the PREDICT("Your Model Name Here")  formula to incorporate your model's predictions in other parts of your app.
Examples
These videos show a few examples of how to use predictive models.

Categorizing customer feedback
Estimating a scientific measurement

 
   Was this helpful?How can we improve it?YesNoSubmit   

 Smart Assistant view

This feature is available to AppSheet Core accounts and above. See AppSheet pricing.


The assistant view allows you to interact with your app with your voice, similar to Siri or Google Assistant.

Notes:

The assistant view currently works with English and Spanish language commands.
When running your app in a desktop, the assistant view speech recognition only works in the Google Chrome browser.


Get started
Learn how Smart Assistant works with your AppSheet app. 

Note: The steps to enable the Smart Assistant view are out of date in this video. See Enable the Assistant view.

AppSheet Assistant Demo - National Parks
Sample template
Use the Facility Inspections template for an example of the Smart Assistant view.
Enable the Smart Assistant
To enable the Smart Assistant:

Open your app in the editor.
Go to Intelligence  and click Smart Assistant under Options.


 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to the Intelligence > Smart Assistant pane.



Turn on Enable Smart Assistant.
Select the locale to use for Smart Assistant from the Locale drop-down.

This will create a new Assistant view in the menu of your app:

Customize the Assistant view
To customize the Assistant view, 

If you are using the legacy editor

To customize the Smart Assistant view, click Show system views on the  UX > Views pane and expand and edit the Assistant view definition. 




Use the Assistant view
Below is a summary of the types of commands that you can use in the Assistant view.
View data
You can navigate to different tables and rows in your app using commands similar to the following:

"Show me my customers" to navigate to a table called Customers
"Go to orders" to navigate to a table called Orders
"Go to Bob Barker" to navigate to the row with label Bob Barker

Filter data
You can filter your data using commands similar to the following:

"Show me all open orders" to navigate to the Orders table and display rows where the enum Status column equals Open
"Show me orders from last week" to filter on a Date column in the Orders table
"Products that cost at least $5"

You can combine multiple filters in a single command:

"Let me see Bob Barker's open orders from today"

You can also apply filters step by step:

"Show me the open orders"
"Just the ones from today"

If you have a LatLong column in your table, you can filter by distance:

"Stores that are less than 5 miles away"

Run actions
When viewing a particular record, you can use a voice command to run actions.

"Go to Bob Barker"
"Send him an email"
"Add a new order for Bob for November 1st"

Limitations
Right now, you cannot filter by Text type columns. You can work around this limitation by converting your Text columns to Enum. For example, if you want to filter your data by State, make sure that your State column is an Enum with a list of states as its enum values.
   Was this helpful?How can we improve it?YesNoSubmit   

 Test appsBefore you deploy your apps, make sure you have tested them.

Test apps using app preview
Test the install link
Considerations when testing apps

Test apps using app preview
The simplest way to test your app is in your browser. The app preview shows a live version of your app. Use the links in the top banner to preview your app on a mobile or tablet device, or in a full-screen browser on your desktop. Use the Preview App as field to test the app using an individual user account. 

To test an app using Preview App as, you must share the app with the individual user. After sharing the app, you might have to refresh the page. If you share the app only with a domain, testing an app won't work as described for an individual user.
 
Remember that you are interacting with the live app. Any data changes you make while interacting with the app preview are stored. 


The following video shows how to preview an app as another user to test its functionality.
Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.
Quick Tip Friday - Preview App as Another User
Test the app install link
Before deploying the app you should send yourself the install link and test that it opens on your mobile devices.
Considerations when testing apps
There are a few differences in how the app behaves running in-browser vs on a mobile device:

On a mobile device and in full-screen browser desktop mode, the app can launch with cached local data without the need for a sync. If a stable version is set, both will show the stable version rather than the latest version. Since they launch with cached data, they will not show the latest version of the app or the latest data until completing a sync. The sync-on-start and automatic update options can be used to keep the data up-to-date.
In the mobile and tablet preview modes, the app will not launch with local data and will always sync the latest version when the page loads. Subsequent syncs will stay fixed on that version, so if you make changes to the app, the preview page should be reloaded to see the latest version.
Device-based features like barcode and NFC scanning only work on mobile devices, so the buttons to start scanning for scan-enabled columns will not appear when the app is run in-browser in full-screen desktop mode. The form-factor preview modes do show these buttons since they simulate running the app on mobile devices, but in this setting they simply input a placeholder value.

   Was this helpful?How can we improve it?YesNoSubmit   

 Deploy: The EssentialsDeploying your app is an exciting step in the process of app creation. However, before you deploy your app, you need to make sure everything is ready to go. Go to Manage  > Deploy in the app editor to:

Run a deployment check and see what, if anything, needs to change in your app before deploying it.
Determine in what stage of deployment your app is. Once you have deployed your app, you can see that it's deployed, and you have the option to return it to its prototype state.
Convert your app into a white label app and pause your app. You can learn more about white label native apps and more about how to update them. You can create and deploy white label apps for both iOS and Android.

There are a couple of different ways to deploy your app: instant deployment and traditional deployment. You can also undeploy your app.
You can also deploy your app using an install link, accessible from the Share apps dialog. If you have an older phone, you can also deploy from an install link using a slightly different method.

Before deploying apps, you should make sure you have tested them.

Quick intro
Watch the following video for an introduction to sharing and deploying your app.

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

Sharing and deploying your app with AppSheet
Put the finals touches on your app
If you're at the phase of your app-building process where you'd like to add a description, an image, or other information, go to the Info tab of the editor to make these customizations.
Instant deployment
If you're building an app for your team or employees, it's easiest to use instant deployment. Deploying an AppSheet app using instant deployment is as simple as clicking a link in an email and following a few simple instructions.
Instant deployment is possible because the AppSheet apps you build are hosted by the AppSheet Hosting app installed on your mobile device. When you deploy and run your app, it will appear to run on its own, but it is actually hosted by the AppSheet Hosting app. While not a perfect analogy, you can think of your AppSheet app being hosted in the AppSheet Hosting app much like a web page is hosted in a web browser.
You distribute your app by sending your users an install link by email. When your user clicks this install link on their mobile device:

The user is asked to install the AppSheet Hosting app on their device. They will be taken to the iTunes Store for iOS or the Google Play Store for Android. If the AppSheet Hosting app is already present on the device, this step is skipped.
The app icon for your AppSheet app is added to their home screen.
Clicking on this app icon launches the AppSheet app.

Beyond the obvious simplicity of this approach, there are a few other benefits:

Your apps are instantly available. There is no delay between app creation and app deployment.
Changes to your apps are instantly available, too.
All apps automatically benefit from any new features we provide, issues we fix, and performance improvements we make.

Traditional deployment
The traditional deployment model is to create and submit each app separately to an app store (iTunes Store for iOS and Google Play Store for Android). Your users then find and download the app from the app store.
You should consider this model if:

The app store discovery and distribution model is important to you.
You're aiming for large-scale consumer adoption of your app.

Once you have created and tested your app using instant deployment, you can generate a white label version of the app. This creates the app package you must submit to the appropriate app store. Be aware that you must go through the approval process mandated by the Google Play Store or iTunes App Store, and your app must conform to the policies of that store.
In order to get your apps onto your device, you must first download the AppSheet app from your device's app store. Any subsequent apps you create essentially run through the AppSheet app.
If you are an app creator, it's a good idea to install the AppSheet mobile app on your mobile device even if you won't be a user of the app. You may want to test your app on your own device before launching to your users. You can find the AppSheet app by searching for AppSheet in the iTunes store (for iOS devices) or Google Play store (for Android devices).
When you launch the AppSheet app, it asks you to sign in, after which it starts an App Gallery (itself an app created by AppSheet). The App Gallery lets you browse and run your apps, apps that have been shared with you, or public samples on your mobile device.

This becomes a convenient mechanism for app creators to test their apps on their own mobile device in the process of building and modifying the app definition, without having to actually install the apps themselves to the home screen.
You can distribute your app by sending your users (or yourself) an install link by email. You'll be able to enter in the email addresses (or full domain) of those with whom you'd like to share the app. For more information, see Share: The Essentials.
The following provides an example of the email:

When your users click on the link from a mobile device, they're asked to install AppSheet on their device (AppSheet is also available in the app stores).
Undeploy your app
If you want to permanently remove an app, you can simply delete it. The next time any existing users sync the app, it will no longer run.
If you just want to remove specific users from an app that requires user sign-in, removing them from the app allow list suffices. The next time they sync, the app will prompt them for sign-in and that will fail. See Share: The Essentials.
   Was this helpful?How can we improve it?YesNoSubmit   

 Perform a deployment checkTo perform a deployment check:

Open your app in the app editor.
Go to Manage  > Deploy.
Click Deployment Check.
Click Run deployment check.
Review the report:
    
If the app is ready to deploy, click Move app to deployed state.
Otherwise, click Continue editing to fix any deployment issues identified.



The Deployment Check does the following:

Validates the app definition and underlying data. Any errors or warnings will be highlighted.
Ensures a launch icon and app description are present.
Performs a security review.
Ensures the app's features are compatible with your pricing plan.


   Was this helpful?How can we improve it?YesNoSubmit   

 Deploy from an install linkDeploy your app to users by sending an install link.
How does a user install your app with the install link? The link points to a page with instructions depending on the combination of platform and web browser they're using.

Chrome and Firefox on Android
Chrome fallback to old experience
Other browsers on Android
Chrome and Safari on iOS

Chrome and Firefox on Android
Chrome has features that allow AppSheet to detect whether it is installed on a user's device, greatly simplifying the installation process. First, the user is taken to a page like this:

If AppSheet is already installed, tapping Install will open the app you shared (Driver Dispatch in this example) and create a shortcut to your app on the user's home screen.
If AppSheet is not already installed, tapping Install will take the user to the following page:

Tapping Go will open the Play Store, where the user can install AppSheet. When the user opens AppSheet for the first time, they'll be taken to your app and a shortcut to it will be placed on their home screen.
Chrome fallback to old install experience
On some older phones, AppSheet cannot automatically create shortcuts for you, so the user has the option to create it using a different approach: on the install page, in the bottom right, tap on the gray text that says Having issues with creating shortcuts? Then tap on the green Old Install button as shown in the following figure.
 

After that, the user will see a page like the below. Follow the old instructions to create a shortcut.

Other browsers on Android
Browsers other than Chrome are less sophisticated, so this process is a bit more complicated. Once the user opens the link, they'll be taken to a page like this:

The user is presented with two options: one for when AppSheet is installed, and one for when it isn't. If AppSheet isn't installed, the user should install AppSheet from the Play Store. When the user opens AppSheet, they'll be taken to your app (Driver Dispatch in this example), and a shortcut to the app will be placed on their home screen.
However, if AppSheet is already installed, tapping the second button will launch AppSheet with the correct app and create a shortcut on the home screen.
Chrome and Safari on iOS
The email the user receives will contain a button to install your app.
For Chrome browsers, clicking Install opens the app in a web page.
For Safari browsers, clicking Install will open a web page that describes the app and displays a banner displays that recommends that the user download the AppSheet app. If AppSheet is not already installed, clicking the banner will take the user to the App Store to install AppSheet, then install your app itself. Once your app is installed, the user will be given the option to create a shortcut to it on their home screen, as shown in the following figure.

 
   Was this helpful?How can we improve it?YesNoSubmit   

 Deploy from an install link on older devicesInstall your app on an older phone.
To learn more about the different aspects of deploying your app, see Deploy: The Essentials.
How does a user install your app with the install link? When a user clicks on an install link from a mobile device, a web page opens and asks them to take two steps to install the app:

The first step is to install AppSheet from the app store. This is required only the first time the user is installing an AppSheet app. If the AppSheet mobile app is already installed, this step can be skipped.
The second step is to create a home screen shortcut so your app appears on the device home screen.

When the user clicks on the icon, your app will be launched. The actual process of creating a home screen shortcut varies slightly based on the device OS and version:

On iOS, there is a smooth builtin experience in Mobile Safari to create the home screen icon. The user simply follows the instructions on the screen.
On Android, the native browser differs depending on version and device. We only support Android version 4.2 and above. Many of the older browsers lack the ability to install a home screen shortcut. Consequently, we encourage users to use Chrome on Android devices. Our install links work well with Chrome.

   Was this helpful?How can we improve it?YesNoSubmit   

 Branded apps: Establish your own brandingEstablish your own branding through creating branded versions of your app.
To learn more about the different aspects of deploying your app, see Deploy: The Essentials.
The Branded Apps section in the Manage > Deploy tab of the editor enables you to create branded versions of your AppSheet app for Android and iOS, so your app can be distributed as a direct download from the Android or iOS app stores without the need to download the AppSheet app. Whether or not you make use of this deployment path, you may also choose to create branded apps in order to remove AppSheet branding and better establish your own brand within the app.
When you build your app with AppSheet, there are a few different places where the AppSheet brand is normally visible to the users of the app. Many of these are suppressed in a branded app, but for technical reasons, some are not:

In the  menu of the app, there are options to Go to the App Gallery or to Create a New App. These do not appear in a branded app.
The splash screen shown when the app is launched features the AppSheet logo. This does not appear in a branded app when distributed as a standalone native app. For iOS deployment you can provide your own icon instead, however the phrase "Powered by AppSheet" does still appear in small print at the bottom of the screen.
In email sent from the Share dialog or automations there is a "powered by AppSheet" email suffix. This does not appear in a branded app.
In the email sent from the Share dialog or automations, the email originates from noreply@appsheet.com. This also occurs in a branded app. For security reasons, AppSheet cannot send email directly from your email address. To avoid this behavior in the Share dialog, the button can be disabled in UX > Options. For automation, if you need email to originate from your own address, consider using a webhook to connect to your own email service.
On the third-party authentication screens (such as with Google Drive), the user will see that AppSheet is asking for permission to access their user information. Similarly, the first time the app needs to take actions that require permission such as accessing the current location or the camera, users will see that appsheet.com is requesting this access. This also occurs in a branded app. Since the branded app still connects to the cloud provider through the AppSheet service, these cannot be easily removed.
From some views in the app, the Share button shares the data being viewed, but from other views it shares a link to install your app via the AppSheet app. This also occurs in a branded app. Since publication of the app occurs outside the AppSheet system, we do not obtain links to the published apps. To avoid this behavior of the share button, the button can be disabled in UX > Options.

The use of the branded apps requires one of the advanced subscription plans. See the AppSheet pricing page.
   Was this helpful?How can we improve it?YesNoSubmit   

 Users: The EssentialsWhat is an active user? 
Whenever we refer to users, we mean active users. 
AppSheet counts active users when determining the number of licenses you need to purchase for your app. Starting from when your app is first fully deployed, Appsheet tracks the number of users that access the app for recurring trailing periods of 30 days. Anyone that opens the app within these trailing periods is an active user. For each trailing period, AppSheet will track the number of active users and then determine how many licenses you need to purchase.  
Suppose your company has 200 employees, but you only plan on having 50 employees actively use your app. Then, you'd purchase 50 licenses.
Your number of active users can vary, depending on whether your subscription plan is secure or public. 
Secure
If the app is secure, it requires users to sign in with their e-mail. AppSheet will count each individual e-mail as one user. For example, if an employee signs into an app with the same e-mail on two devices, they will still be considered only one user. AppSheet supports having the same user logged in on up to five devices at a time.
Public
If an employee opens a public app on two devices, AppSheet will count two guest users rather than one.
Note: If you are on a secure subscription plan, make sure that all your deployed apps require users to sign in so you aren't paying more for guest usage. 
How many users can I have?
While you are prototyping your app for free, you can have up to 10 active users. Once you fully deploy an app, you will need to subscribe to either a secure or public plan. With a secure plan, you will need a subscription with as many licenses as active users. Note that your license count will not automatically adjust with your number of active users, you will need to adjust your license count as your user base fluctuates. With a public plan, you will pay a fixed amount per month per app. If you start to increase the number of people using your deployed app, you will need to update your pricing plan. Details can be found on our pricing page. 
Connecting with your app users
Share your app with users, as described in Share: The Essentials.
In the Users pane of the app editor, you can control user access to your app and interact with your users. There are two tabs in the Users pane:

Users - Set the authentication provider, manage roles and app versions for individual users, or send a reminder notification to individual users.
Broadcast Notifications - Send a push notification to your users. See Broadcast notifications to your users.

Tips and tricks
Learn tips and tricks for user access from the AppSheet Community:

Users tips and tricks
Users Q&A

   Was this helpful?How can we improve it?YesNoSubmit   

 Share: The EssentialsAppSheet allows you to share your apps with users in different ways instead of providing an app store. When you are ready to share your app, you need to decide whether to share it with anyone (public) or a restricted audience.




User audience


Description




Anyone (Public)


Share your app with anyone by enabling public access to your app.
Note: Not recommended for apps that are used internally by your organization or that access sensitive data.




Restricted audience


Share your apps with a restricted audience to control who can use the app and optionally view or edit the app definition in the app editor.
Specifically, you can share your app with:

Individual users
All users in a domain
All signed-in users
Users in an existing domain group, as described in Domain Integration: The Essentials (Enterprise plans only)





After sharing an app, you might want to notify users by sending them a link.
See also: Restrict sharing of apps
Quick intro
Watch the following video for an introduction to sharing and deploying your app.
Sharing and deploying your app with AppSheet
Share your app with anyone (public access)

Notes:

Public access is not recommended for apps intended to be accessed internally by your organization or for any apps that access sensitive data.
Unless you are an Enterprise customer, you will need to purchase a separate public Publisher Pro plan.


Share your app with anyone by making it public if and only if the following statements are true:

Access to your app does not need to be secure for any reason and your app does not access sensitive data
You are not concerned about the number of active users accessing your app

To share your app with anyone (public access):

Open your app in the app editor.
Select Security > Require sign-In.
Disable Require user signin?
Respond to the following prompts to confirm you understand the security implications of making an app public.
Note: If you do not respond to the prompts, your app will not be made public.
    
Yes, the data in the app is public - You acknowledge that security and access control is not required for all the data in this app.
Yes, I am authorized to set up an insecure app - You acknowledge on behalf of your organization that you knowingly take on the risks of running an insecure app.


Click Save.

After sharing an app with anyone, you might want to notify users by sending them a link.
Share your apps with a restricted audience
Note: To control access to apps by a restricted audience, you must require user sign-in, which is enabled by default.
When you notify users about your app, you have no control over how the notification is forwarded. Links to your app could be shared on a popular Twitter feed – which could be viewed as good or bad! Your app may reach a much broader audience than you had intended. In addition, you may want to be able to revoke access to an app if an employee leaves the company, for example.
Share your apps with a restricted audience to control who can use the app and optionally view or edit the app definition in the app editor. After an app is shared with users, they can access it from the Shared with me section of the Apps Gallery, as described in Access your apps.
For example, the following shows how to share apps with a restricted audience using the Share app dialog.

Share your apps with a restricted audience as described in the following sections:

Share your app with individual users
Share your app with all users in a domain
Share your app with all signed-in users
Send reminder notifications to individual users
Search for individual users or domains with shared access
Modify or remove shared access to your app
Manage app permissions for individual users
Copy all users with shared access
Understand app collaboration and data security

You can also share apps with existing domain groups, as described in Domain Integration: The Essentials.
Share your app with individual users
To share your app with individual users:

Open your app in the app editor.
Ensure that you have configured your app to require user sign-in. See Require sign-in: The Essentials.
Click the Share icon in the title bar.
    
The Share app dialog displays.

Enter the email address of the user with whom you want to share your app, such as ahamilton@example.com, and press Enter. Repeat to share with additional users.
Select one of the following app permissions:
    Note: See also Understand app collaboration and data security.

Use app - Users can use the app, but can't view or edit the app in the app editor.
View definition - Users can view and copy the app in the app editor, but can't edit the app. See also Let another user copy your app.
Edit definition - Users can edit the app in the app editor.
Note: Only one user should edit an app at a time. If two users attempt to edit an app at the same time, conflicts may occur when the app is saved.



To manage advanced permissions for an individual user, enable the Advanced toggle.

Perform one or more of the following tasks:
    
Change the user role to User or Admin. For information about leveraging the user role in your app, see USERROLE(). The role defaults to User.
Change the app version available to the user to Default, Latest, or Stable. For information about app versions, see Maintain a stable app version.



Optionally, you can send an email notification to users to invite them to install and access your app. To send a notification, select Notify users and modify the notification message, as required. Or you can notify users later.
Confirm that you are not a robot at the reCAPTCHA verification prompt.

Click Send.
    Or Share if you disabled Notify users.
Optionally, click and change the authorization provider used for user sign-in.
Click Done.

Share your app with all users in a domain
Sharing your app with all users in a domain enables them to use the app. To permit users in a domain to view or edit the app definition, you must add them as individual users and set the permissions accordingly.
Note: As a security precaution, AppSheet prevents you from sharing your app to a widely used domain name, such as gmail.com.
To share an app with all users in a domain:

Open your app in the app editor.
Ensure that you have configured your app to require user sign-in. See Require sign-in: The Essentials.
Click the Share icon in the title bar.
    
The Share app dialog displays.

Enter the name of the domain to which you want to share your app, such as example.com, and press Enter.
Repeat to share with additional domains.
Confirm that you are not a robot at the reCAPTCHA verification prompt.

Click Share.
Optionally, click and change the authorization provider used for user sign-in.
Click Copy sharing links to copy app links to send directly to users.
Click Done.

Share your app with all signed-in users
Note: Enable this option when you do not need to restrict access to a specific list of users but still want to access user-specific information like email, or use personalization features like security filters or private tables.
To share your app with all signed-in users:

Open your app in the app editor.
Select Security > Require sign-In.
Enable Require user signin.
Enable Allow all signed-in users.
Respond to the following prompts to confirm you understand the security implications of making an app available to all signed-in users.
Note: If you do not respond to the prompts, your app will not be made available to all signed-in users.
    
Yes, this is a public app - You acknowledge that security and access control is not required for all the data in this app or that you will maintain correctly configured security filters for all the data in this app.
Yes, I am authorized to set up a public app - You acknowledge on behalf of your organization that you knowingly take on the risks of data exposure for any data that you have not placed behind a correctly configured security filter.


Click Save.

To remove shared access by all signed-in users, disable the Allow all signed-in users.
After sharing an app with all signed-in users, you might want to notify users by sending them a link.
Send reminder notifications to individual users
To send reminder notifications to individual users if they have not accessed your app:

Open your app in the app editor.
Click the Share icon in the title bar.
    
The Share app dialog displays.

View the individual users to which the app has been shared in the Users section.
Note: If a user has not accessed the app, you'll see the reminder icon and Invited by their name.

Click the reminder icon to send a reminder invitation to the user.

Search for individual users and domains with shared access
To search for individual users and domains with shared access:

Open your app in the app editor.
Click the Share icon in the title bar.

    The Share app dialog displays.
Enable the Advanced toggle.
Enter a string in the search dialog to filter the list.
    Search is case insensitive.

Modify or remove shared access to your app
After sharing an app, to modify or remove shared access:

Open your app in the app editor.
Click the Share icon in the title bar.
    
The Share app dialog displays.

Perform one of the following tasks:
    
Modify app permissions for individual users.
Remove shared access by an individual user or domain by selecting Remove from the app permissions drop-down.


Click Done.

Manage app permissions for individual users
After sharing your app, to manage app permissions for individual users:

Open your app in the app editor.
Click the Share icon in the title bar.
    
The Share app dialog displays.

Change the app permission for an individual user, as desired.
    Note: See also Understand app collaboration and data security.

Use app - Users can use the app, but can't view or edit the app in the app editor.
View definition - Users can view and copy the app in the app editor, but can't edit the app. See also Let another user copy your app.
Edit definition - Users can edit the app in the app editor.
Note: Only one user should edit an app at a time. If two users attempt to edit an app at the same time, conflicts may occur when the app is saved.



To manage advanced permissions for an individual user, enable the Advanced toggle and perform one or more of the following tasks:
    
Change the user role to User or Admin. For information about leveraging the user role in your app, see USERROLE(). The role defaults to User.
Change the app version available to the user to Default, Latest, or Stable. For information about app versions, see Maintain a stable app version.




Copy all users with shared access
To copy all users with shared access:

Open your app in the app editor.
Click the Share icon in the title bar.

The Share app dialog displays.
Click Copy users.

Understand app collaboration and data security
Apps shared with view or edit permissions are displayed in the Co-Authored Apps section of My Apps. Only one user should edit an app at a time. If two users attempt to edit an app at the same time, conflicts may occur when the app is saved.
A co-author can only add a new table to the app from a team-shared data source. A co-author cannot add a new table to the app from either the app author's cloud file system or the co-author's cloud file system. The following table provides more details.




Source


Description




Team-shared data source


AppSheet allows a co-author only add a new table to the app from a team-shared data source.
For fully collaborative environments, AppSheet provides team collaboration capabilities including the ability to define team-shared data sources. If the app owner is part of a team with team collaboration capabilities, then every co-author can access and utilize data sources that are marked as team-shared.




App author's cloud file system


AppSheet does not allow a co-author to add a table from the original app creator's cloud file system for security reasons. The app creator might intend to allow the co-author permission to help with one app, but might inadvertently expose the app creator's entire cloud file system.




Co-author's cloud file system


AppSheet does not allow a co-author to add a table from the co-author's cloud file system. An app typically runs as the app creator. This means that the data sources and access tokens of the app creator are used during app execution. Allowing a co-author to add tables from their own cloud file system could lead to the situation where no single author could view and change all of the apps' data. That might also mean that no single author could investigate or fix problems with an app.




Notify users about your app
After sharing your app, you may want to notify users by sending them a link. For example, you might:

Include a link in an email campaign
Publish the link to a web site
Post the link to your Twitter account
Send the link in an SMS message

You can also enable users to share a link to your app.
Send users a link to your app
To send users a link to your app:

Open your app in the app editor.
Click the Share icon in the title bar.
    
The Share app dialog displays.

Click Copy sharing links.
Copy the links to access your app in the editor, browser, or mobile device.
Send the link to users using your preferred method.

Also, when sharing your app with individual users, you have the option to notify them by email and send them a reminder notification if there is no response.
Enable users to share a link to your app
By default, users can share a link to your app with other users by selecting Share in the app menu. Details about how to install the app are populated in an email that you can customize and send to one or more users.

Note: If the current view is a Detail view, the view details are shared instead of installation information.
If your app is configured to require user sign-in or you want to limit app sharing, you can disable this feature.
To disable the ability for users to share your app:

Open the app in the app editor.
Select UX > Options.
Enable the Disable share button.

   Was this helpful?How can we improve it?YesNoSubmit   

 Restrict sharing of appsRestrict the number of users an app creator can share an app with using the following governance policies:



Policy
Description


Require direct sharing


Requires that access is only granted to users explicitly shared to an app in the sharing dialog. Only individual users users added directly to an app can access it, ensuring that sign-in is required and all access is explicitly managed through the sharing dialog. Restricts app access as follows:

Require user sign-in
Prevent all signed-in users from accessing the app (disable Allow all signed-in users)
Disable Require domain authentication





Restrict app sharing

Restricts app sharing as follows:

Prevents the sharing of apps with an entire domain using the Share dialog
Limits the number of users that the app can be shared with using the Share dialog (defaults to 5, but can be customized)

See also: Share: The Essentials

 





  For example, the following share request returns an error because the number of users in the domain exceeds the maximum number of users the app can be shared with.




Notes:

To fully restrict sharing, both policies must be set and active. 
You can  restrict sharing of all, prototype, or deployed apps by adjusting the Target setting to All Apps, Prototype Apps, or Deployed Apps, respectively.
Existing apps will continue to function for users until they attempt an activity that is in violation of the policy. For example, if a user attempts to save an app that has been shared with more than 5 users, they will need to reduce the number of shared users (to 5 or below) in the Share dialog before they can save the app. 



To restrict sharing of apps:

Access the Policies page by selecting one of the following:
    
Admin > Policies in the top navigation 
Policies from the account profile drop-down


Select the scope, Team or Account.
Click + Account Policy or + Team Policy to add an account or team policy, respectively.
Select Require direct sharing from the Policy Template drop-down.
Click Next.
The policy is preconfigured for you. You can modify any of the field values. See Add a predefined policy for a description of each field. 
    
Important: If you modify the Condition field, ensure that you retain the functionality defined below:
AND([AuthRequired] = true, [DomainAuthRequired] = false, [AllowAllSignedInUsers] = false) 


Click Save.
Click + Account Policy or + Team Policy to add an account or team policy, respectively.
Select Restrict app sharing from the Policy Template drop-down.
Click Next.
The policy is preconfigured for you. You can modify any of the field values. See Add a predefined policy for a description of each field. 
    
Important: If you modify the Condition field, ensure that you retain the functionality defined below:
AND(COUNT([Users]) <= 5, COUNT([AllowListDomains]) = 0) 


Click Save.

   Was this helpful?How can we improve it?YesNoSubmit   

 Broadcast notifications to your usersSend a push notification to your app usersAs an app creator, you sometimes need to send important information to your app users. You can do this using the Broadcast Notifications feature in AppSheet. Broadcast Notifications allow you to send a push notification to your users' devices.
To send a notification:

Open the app in the app editor.
Go to Manage  > Deploy > Broadcast Notifications.

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    If you are using the legacy editor

Select Manage > Broadcast Notifications.


Enter the following information into the form:
    
Title: Short summary of the notification.
Body: Description of the notification.
Deep Link: Optional deep link. When the user taps on the push notification, users will be taken to this location in your app. If you leave this field blank, the default view in the app will be used.



Notifications will be sent to all users who have installed the native AppSheet app on their device and have opened your app.
   Was this helpful?How can we improve it?YesNoSubmit   

 Access your appsAccess apps using the App GalleryOn mobile devices, AppSheet apps are best accessed using the centralized App Gallery that includes the apps shared with the user. From this App Gallery, mobile shortcuts can be created to add each app to the user's home screen.

Access the App Gallery
Add a home screen shortcut to Android mobile devices

Access the App Gallery
The App Gallery is best accessed using the native AppSheet iOS or Android application, but can also be accessed by desktop users using a browser.
Open the App Gallery
Three app views are available in the App Gallery:
Recent
Displays apps most recently accessed by the user sorted into categories, such as Today and This week.
Shared with me
Displays apps that the user has been invited to use, either by direct email invitation or domain permission. See also Share: The Essentials.
Owned by me
Displays apps that the user owns. (This view is only visible if the user owns an application; it will not display to app users who do now own any applications.)
Add a home screen shortcut on Android mobile devices
On Android devices, users can install app shortcuts from the app without using the installation link. Open the app menu in the top left, click Add Shortcut, and follow the instructions to add the app icon to your home screen.

   Was this helpful?How can we improve it?YesNoSubmit   

 Manage identical appsTo make an application that has different data for each user, you have two options. You can either create a separate app for each user, or you can make one app with only the information pertinent to each user.
Option 1: Use multiple spreadsheets
Make app copies using multiple spreadsheets: copy the app repeatedly and switch it to a different spreadsheet for each user. This is simple and gives you a lot of control. You can make changes to each app if you want. Of course, it can be tedious if you have many apps to create and maintain.
Option 2A: Use row filters with a single app
Use row filters for a single app using a single spreadsheet -- row filters can achieve a similar effect with a single app. Different users of the app can see different subsets of the data. In particular, consider adding slices in the Editor using the 'Matches the user name' or 'Matches the user email' condition to filter the right data to the right user. Then send the same link to each user.
Option 2B: Use row filters with multiple apps
Use row filters for multiple apps using a single spreadsheet -- row filters can achieve a similar effect with multiple apps. You can slice the data as in the above example, but instead of using multiple slices, just use one slice per app per user. Then send each user their unique app's link.

Build apps with different update permissions for different classes of users
You can also build multiple apps with the same data, but different update permissions for different classes of users, through limiting them to particular tables, views, and actions.
   Was this helpful?How can we improve it?YesNoSubmit   

 Share sample apps in your public portfolioYou can share an app with other users by adding it to your public portfolio. Other users can view or copy your portfolio apps and data, but they cannot modify them. 
Users access your public portfolio at the following URL to copy shared apps and data: https://www.appsheet.com/portfolio/your-account-ID
Note: The data in your portfolio is visible to the public. Never include confidential data in an app shared to your portfolio.
To share a sample app to your public portfolio:

Open the app in the app editor.
Ensure that the app is deployed.
Select Manage  > Collaborate & Publish.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Select Manage > Author.



Expand the Team Work section.
Turn on Make this a public sample?
To hide the app definition details from AppSheet users in the public portfolio, turn on Hide app definition. In this case, users won't have the option to copy the app or view the app details.
Click Change visibility.
In order for your public portfolio to be available, you must customize your portfolio description as follows:
    
Select My account.
Click the Collab tab.
Enter a description in the Portfolio Description field.





   Was this helpful?How can we improve it?YesNoSubmit   

 Concurrent usage with multiple usersAppSheet apps allow multiple users to add, update, and delete data concurrently. This leads to the natural question -- how do we deal with multiple people updating the same data at the same time?
The simple rule is that the last writer wins.

When a user adds, updates, or deletes a record on their mobile device, the user's change is queue in the client device or browser. When the client syncs their change, the client submits the add, update, or delete request to the server.
When the server receives the add, update, or delete request resulting from the client's sync, the server performs that request. If two or more client requests arrive for the same table at or near the same time, the server normally serializes the client requests and performs them one by one. As a result, the second client request is only performed after the first client request is completely performed.
The unit of change is a single row. Fortunately, many applications work so that no two clients are likely to update the same row at the same time. For example, one client may be updating a record for one customer while a second client is updating a record for a different customer. These two concurrent updates will not collide.
If two clients happen to change the same row at nearly the same time, the last client's change is what persists. This is referred to as "the last writer wins" conflict resolution strategy.
Even if someone updates the data directly in the spreadsheet (not through the app), this is treated like any other data update.

There are three cases during client sync when "the last writer wins" conflict resolution strategy may be used.
UpdateExistingRecord on add
If the user adds a row when a row with the same key already exists, then that row is updated with the data contained in the second client's add request. When this occurs, the Audit History record for the second Add operation will include the UpdateExistingRecord property. This property contains the key of the existing record that was updated.
This can sometimes occur if a single client submits the same add request multiple times. For example, the client might submit the add request and then lose network connectivity before the server can respond to the original add request. This leaves the client uncertain if the add request was received and processed by the server. In this case, the client resubmits the add request when network connectivity is later restored.
The server attempts to detect and properly respond to duplicate client requests. The server remembers the most recent request from each client for up to 24 hours. If the client resubmits the same request again, the server detects the duplicate request and responds with the same answer it would have returned for the original request. By remembering the most recent request and response for each client, the server attempts to handle duplicate client requests gracefully. It avoids performing the client's add request twice.
If the client loses network connectivity for longer than 24 hours, the server may no longer remember the original client request. If the client resubmits the add request thereafter, the server will attempt to perform the add request for a second time. When it performs the add request and detects that the record already exists, it will include the UpdateExistingRecord property in Audit History for the second add request. The UpdateExistingRecord property will contain the key of the original record.
If your application contains automation workflow rules that are triggered by add operations, those rules will be triggered again when the second client add request is submitted more than 24 hours after the first client add request.
You can detect when this has occurred by looking at the Audit History Stop record for the second add request. If it contains the UpdateExistingRecord property, then the add has been submitted by the client twice with a delay of 24 hours or more between the first and second add request. You will also see that the add start Audit History records for both client add requests contain the same clientId and requestId property values.
DeleteDeletedRecord on delete
If the user deletes a row but no row with that key exists, then that change is ignored. When this occurs, the Audit History record for the delete operation will include the DeleteDeletedRecord property which contains the key of the already deleted record.
UpdateDeletedRecord on update
If the user edits a row but no row with that key exists, then that change is ignored because clearly some other user explicitly deleted it first. When this occurs, the Audit History record for the edit operation will include the UpdateDeletedRecord property which contains the key of the deleted record.
   Was this helpful?How can we improve it?YesNoSubmit   

 Launch app shortcut from the Home screenWhat happens when the user clicks on an app shortcut to launch the app?
Remember that your app is actually hosted on the AppSheet mobile runtime, as described in Deploy from an install link. So when the user launches your app, it first loads the AppSheet app (which you do not see) and then starts your app. The whole process only takes a few seconds, after which the user can start using your app. Your app looks and behaves exactly as it did in the emulator on our website.
   Was this helpful?How can we improve it?YesNoSubmit   

 Create app launchers or launch apps and URLs from AppSheet appsIf you have used AppSheet's App Gallery, you know the value of having a list of apps that you can easily access from a single app. 
You can create your own app launcher that launches AppSheet apps. This allows you to create a suite of solutions. It simplifies deployment because you can now deploy one app and simply change a back-end spreadsheet to add or update other apps.

Get started by using the sample app launcher
Create an an app launcher
Use deep links in an app launcher
Create a URL launcher
Launch an app by using the URL

Get started by using the sample app launcher
The App Portal is a sample app launcher that you can use as an example to build your own.

Create an app launcher

Create a spreadsheet table for the app launcher.
    An app launcher table has three fields.
    
App Name: Name of the app.
Image: Public URL for the image or a reference to a file in your cloud provider. See Display images and documents.
App Link: App name you obtain from the link to the app. For example, if the link to the application URL is https://www.appsheet.com/template/showdef?appName=ClassAssignments-71626, enter ClassAssignments-71626 in this field.




Create the app launcher app using the spreadsheet. See Create apps: The Essentials.
Open the app launcher in the editor.
Go to Data .
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


 
Go to Data > Tables and expand the table.




Make sure that the column types are configured as follows:
    


Column
Type


App Name
Name


Image
Image or Thumbnail


App Link
App




Create a view of type gallery, table, or deck.
Save the application.

The linked app will load when you click or tap on the image in the app launcher application.
Use deep links in an app launcher
The app name (for example, ClassAssignments-71626) is actually a link to the initial view of the named app. Instead of starting with the initial view, you can specify deep links to specific views of the app. For example, you can:

Open the app with a specific view displayed
Navigate to a different view in the current app

See App column type (deep link).
Create a URL launcher
You can create your own URL launcher application that launches web sites based on the web site's URL.
To create a URL launcher:

Create a spreadsheet table for the URL launcher.
    The URL launcher table has three fields.
    
URL Name: Name of the URL.
Image: Public URL for the image or a reference to a file in your cloud provider. See Display images and documents.
URL Link: URL you wish to launch.




Create the URL launcher app using the spreadsheet. See Create apps: The Essentials.
Go to Data .
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


 
Go to Data > Tables and expand the table.




Make sure that the column types are configured as follows




Column
Type


URL Name
Name


Image
Image or Thumbnail


URL Link
URL




Create a view of type gallery, table, or deck.
Save the application.

The website will load when you click/tap on the web site's image in the URL Launcher application.
Launch an app by using the URL
You can provide a URL to users of an app by email or other media and direct them to a given view in an app that is already installed. This can be accomplished by providing an AppSheet URL.
To access the AppSheet URL, perform the following steps:

Go to App  > Views.
Select the view in the left navigation that you want to link to.
Under Behavior, copy the URL provided in the App Link field.



See also: App Column type (deep link)
   Was this helpful?How can we improve it?YesNoSubmit   

 Run your app in an iFrame on a web pageIn some cases, you may want to host your app within an existing web page. Technically, the app is hosted within an iframe element that is embedded on the web site. In fact, this is exactly how the app emulators work on the AppSheet web site.
Be aware only apps that do not require sign-in can be hosted in an iframe. In addition, some functionality will not work when your app is hosted in an iframe. Offline behavior is severely limited, the scanner does not work, the camera behavior is altered, and mobile-only features like push notifications will not work.
To host your public app on a webpage:

Get the ID of your app --- the easy way to find this is to open your app editor and click on the link above the emulator that says Preview other device sizes. Look at the URL bar in the browser. It should show a URL of the form www.appsheet.com/template/mobilepreview?appId=b3756bde-b741-4609-bf7d-e2eee77852d6. The ID of this app is b3756bde-b741-4609-bf7d-e2eee77852d6. Each app has a unique ID, so make sure to get the ID of the app you want.
Add an HTML element to your web page --- Use the following type of iframe code structure: <iframe src="https://www.appsheet.com/preview/b3756bde-b741-4609-bf7d-e2eee77852d6" />. Make sure to replace the app ID in this example with the ID of the app you actually want to show. You can set width and height settings appropriately. For example, to show the approximate dimensions of a mobile phone, try: <iframe src="https://www.appsheet.com/preview/b3756bde-b741-4609-bf7d-e2eee77852d6" width="320" height="568"/>.
If you want the hosted app to automatically refresh the app definition and the data every time the web page is opened, you can set a "refresh" option. Likewise, if you want the hosted app to abandon any unsaved data every time it is opened, you can set a wipe option. Here is an example of embedding an app with both options enabled:

<iframe src="https://www.appsheet.com/start/b3756bde-b741-4609-bf7d-e2eee77852d6?refresh=1&wipe=1" width="320" height="568"/>

   Was this helpful?How can we improve it?YesNoSubmit   

