 AppSheet automation: The EssentialsAppSheet automation enables you to automate common business processes and document-based workflows. 


A subset of features, such as sending emails or triggering bots with schedule events using AppSheet automation, are not fully supported with a free plan. That is, you can configure these features, but they won't execute as expected. See Subscribe to a paid plan.


Benefits
Benefits of AppSheet automation include:

Unifies AppSheet’s intent-aware, no code-platform with process automation.
Offers intelligent process authoring and runtime with rich connectivity allowing users to author and execute their business processes using entities.
Addresses the long tail of human-centric processes, document-based workflows, and application integration use cases.
Enables you to reuse components in other automations.

Get started
 Watch an introduction on AppSheet automation.

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

How to automate processes with AppSheet Automation using Google Workspace for business
Get started using AppSheet automation:

Enroll in the on-demand, self-paced course: Building No-Code Apps with AppSheet: Automation 
Walk-through AppSheet automation: How to automate with AppSheet automation
Learn about the benefits of AppSheet automation: Reclaim time and talent with AppSheet automation

Next steps
Learn more about automation.




Build automations
Build automations using reusable components to accelerate app development.


Create automation tasks
Add and configure the tasks that are triggered by the processes in your automations, including:

Send email
Send SMS messages
Send notifications
Create and save files
Call webhooks
Call scripts





Use templates
Customize content using templates in an automation using formats such as Google Docs or Microsoft Word.


Use document processing
Extract content from documents in a folder or compile folder contents. 




Use external eventing
Trigger a process when a data change happens in Google Sheets.


Tips and tricks
Learn tips and tricks for automation from the AppSheet Community:

Automation tips and tricks
Automation Q&A





   Was this helpful?How can we improve it?YesNoSubmit   

 AppSheet automation: The ComponentsAppSheet automation is a robust extension of AppSheet’s no-code platform that enables you to automate common business processes and document-based workflows.

Key components in AppSheet automation
About component reusability with AppSheet automation

Key components in AppSheet automation
The key components in AppSheet automation are illustrated in the following figure.

The following table summarizes the key components in AppSheet automation.




Component


Description




Bot


Defines the automation you want AppSheet to run.




Event


Identifies the data change, schedule, or Chat app interaction that triggers the bot.




Process


Describes the set of steps performed when the bot is triggered.
A step can:

Run a task or data action
Branch on a condition
Wait for a condition or period of time
Call a process
Return values





Task


Defines a task-based step in a process, such as send an email.



Action
Defines an action-based step in a process, such as add an entry to a table.



Document processing


Allows you to automatically extract useful content from document files that are stored as PDF, GIF, PNG, JPEG or TIFF files.




About component reusability with AppSheet automation
AppSheet automation encourages reusability, allowing you to build components once and reuse them in various automations to save time and accelerate development. You can create events, processes, tasks, and actions that can be reused in other components. For example, you can reuse actions and tasks within new processes, reuse events and processes within new bots, and so on. For more information, see Reuse automation components.
   Was this helpful?How can we improve it?YesNoSubmit   

 Bots: The EssentialsUnderstand and manage bots as described in the following sections:

What is a bot?
Explore bot management
Add a bot
Configure a bot
Set the icon for a bot
Rename a bot
Add a comment to a bot
Copy a bot
Monitor a bot
Test a bot
Enable or disable a bot
Delete a bot

See also Monitor automation.
What is a bot?
A bot defines the automation you want AppSheet to run: 
when something happens (an event) perform a set of activities (each activity is a task and a set of tasks is a process).

Bots can perform a wide variety of functions. For example:

Create and send an email, SMS message, or notification regarding the modified record.
Further update the modified record.
Update the parent record of the modified record.
Add, update, or delete child records belonging to the modified record.
Call a webhook to invoke an external web service.


A subset of features, such as sending emails or triggering bots with schedule events using AppSheet automation, are not fully supported with a free plan. That is, you can configure these features, but they won't execute as expected. See Subscribe to a paid plan.

You can perform a wide variety of other functions because once the bot is triggered, it is capable of working on any table and doing almost anything. Once enabled, bots run in the background to listen for events or trigger processes on a schedule even when you are not directly using an app. To terminate the process automation, you can disable the bot.
For example, the Confirmed appointment bot is configured to trigger the User notification of confirmed appointment process anytime an Appointments record is updated to notify the user that their requested appointment has been confirmed. The bot continues to listen for the appointment update events and fire the associated process when the event occurs until it is disabled.

Learn more about how bots are triggered and not triggered, and the relationship between the application version and bots.

How bots are triggered

Bots can be configured to trigger a process based on a data change event or according to a predetermined schedule.
Bots with data change events
You can create bots that are triggered by a data change event, such as:


Data is added, updated, or deleted. For example, you can trigger a bot when:


A new row is added.


An existing row is updated. For example, the update may occur as the result of editing a row in a form view, or performing a quick edit, or invoking a client action through a user button click.


An existing row is deleted.




A data change action is invoked on the AppSheet client.


An add, update, or delete is performed using the AppSheet API.


The data change that triggers a bot can be any type of data change that arrives at the server. For example, you can add an extra table column whose only purpose is to trigger a bot. Then, you can create a client action button that updates the extra column's value. Clicking the action button triggers your bot.
After the data change is synced to the server, AppSheet:


Makes the appropriate changes to the spreadsheet or database.


Ensures that any formulas in the spreadsheet are re-computed to use the latest data values.


Determines whether your bot should be triggered.


To further restrict when a bot is triggered, you can specify the following:


Type of data changes that trigger the bot when configuring the event. For example, you could trigger a bot for the following data changes: 


All changes


Adds only


Adds and updates


Adds and deletes


Deletes only


Updates and deletes


Updates only






Condition that triggers the bot when configuring the event. For example, you could trigger a bot when:


A new row is added to the Inspections table, and the value in the InspectionPassed column is FALSE.


A row is updated in the Orders table, the value in the OrderAmount column is over $500, and the value in the DeliveryDate column is within 10 days of the current date.




Whether a bot can trigger other bots and, if so, whether to sync data changes only after this bot and all bots that it triggers complete their execution when creating a bot.



Note: In some cases, user access to table data is limited for security reasons as governed by security filters on the table. AppSheet provides the ability to enable a security bypass to allow access to the table data strictly for purposes of evaluating the condition to determine whether the bot should be run.

Bots with scheduled events
Alternatively, you can use a bot that is triggered on a schedule you specify. Just like a data change-triggered bot, a scheduled-triggered bot is capable of working on any table and performing a wide variety of functions. See also Events: The Essentials and  Understanding bot scheduling and retry.



How bots are not triggered


Bots are not triggered by:


Changes made directly to the spreadsheet or database
            Changes you make directly to the spreadsheet or database do not go through the AppSheet server, so they do not trigger AppSheet bots. For example, if you update a Google Sheet directly, Google Sheets does not notify the AppSheet server about the change. Since the AppSheet server is unaware of this change, it does not trigger any AppSheet bots.
             

For Google Sheets only, you can enable external eventing to set up a bot that triggers a process when a data change happens in Google Sheets. For more information, see External eventing with Google Sheets.



Data change actions invoked by a bot unless that bot that makes that data changes has been explicitly configured to trigger other bots.
            Data change actions that are invoked by bots do not trigger other AppSheet bots. For example, if a client device performs an add, update, or delete that triggers a bot, and that bot invokes a data-change action, that data change action will not invoke any bots.


Changes made through another AppSheet application, even if that application is using the same underlying spreadsheet or database table
            This is true even if the two AppSheet apps share the same underlying spreadsheet or database table. For example, you might have a Payroll app and a separate Personnel app that share an Employees table. Bots defined in the Payroll app will only be triggered by adds, updates, or deletes to the Employees table that are performed through the Payroll app. Adds, updates, or deletes to the Employees table that are performed through the Personnel app will not trigger bots defined in the Payroll app. In short, bots only work within a single AppSheet app; they do not work across two or more apps, even if those apps share common underlying spreadsheet or database tables.






Application version and bots


Each time you change your application, AppSheet creates a new version of your application. These changes may include changes to your bots.
AppSheet includes the application version each time a user submits their adds, updates, or deletes to the server. This is essential because the user may be submitting changes based on an older version of your application.
When invoking bots, AppSheet invokes the version of the bots that match the user's version. This may result in invoking an older version of your bot. You can detect when this occurs by examining the audit history. The audit history includes the application version number.
After the user has submitted their changes, the AppSheet client performs a sync that retrieves the latest data and application version. Any future changes will be submitted using that application version.



Explore bot management

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.
This section explores how to manage bots using the new editor (preview) only. 

Go to Automation   > Bots.
The Bots panel is displayed and the first bot in the list is opened in the editor.

As highlighted in the previous figure, you manage bots by performing the following tasks:

Add a bot
Edit a bot by selecting it in the Bots panel
Manage bot components, including events, processes, steps, and tasks
Configure a bot
Enable or disable a bot
Monitor a bot
Manage a bot:
    
Rename a bot
Test a bot
Copy a bot
Delete a bot


View error and warning messages that are related to bots by clicking the error or warning indicator in the bot header
Search all bots 

Add a bot
To add a bot:


Open the app in the app editor.


Go to Automation  > Bots and click + in the top header of the Bots panel.


 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor

Go to Automation > Bots and click + New Bot.  




Perform one of the following tasks:


Choose from the list of suggestions. AppSheet Automation is an intent-aware platform. The platform understands user intent and recommends configuration options that align with what you are trying to achieve. For example, selecting the following bot suggestion would create a fully configured bot:
          When employees record is updated, send an email


Create a custom bot. Click Create a new bot.



Add and configure an event.
Configure the process, including the steps and tasks.
Optionally, do one or more of the following:
    
Configure the bot
Set the icon for the bot
Rename the bot
Add a comment to the bot


Save the bot by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




 Configure a bot
 To configure the bot to trigger other bots:

Go to Automation  > Bots and select the bot you want to configure in the Bots panel.

    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    If you are using the legacy editor

Go to Automation > Bots and expand the bot for which you want to set an icon.


 Expand the Options section.

Configure the following advanced settings to control the behavior of your bot:



Option
Description


Trigger other bots

Enable this option to allow data change steps in this bot to execute other bots that are listening for the same data change events. Disable this option to prevent data change events triggered by the current bot from triggering other bots.

 


For scheduled events, this setting is valid in the following scenarios:

If ForEachRowInTable is enabled and a data change step is included in the process. 
If ForEachRowInTable is disabled and a Call a process step that includes a data change event is included in the process.


If enabled, the following policies are enforced to avoid infinite event-trigger loops: 




An event that is a result of a data change made by the bot cannot subsequently trigger the same bot.


If two or more bots trigger one another continuously in succession, the maximum number of triggers that can be initiated between them is 5. For example:


Bot A triggers Bot B


Bot B triggers Bot A


Bot A triggers Bot B


Bot B triggers Bot A


Bot A triggers Bot B







Wait for execution to complete


Note: This option is available only if the Trigger other bots option is enabled.

Enable this option to instruct the app to sync data changes only after this bot and all bots that it triggers complete their execution. Disable this option to instruct the app to sync data after this bot completes its execution, even if there are triggered bots still executing in the background.






 Save the bot by selecting one of the following:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Set the icon for a bot
The bot icon can provide easy identification.
To set the icon for a bot:

Go to Automation  > Bots and select the bot you want to configure in the Bots panel.

    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    If you are using the legacy editor

Go to Automation > Bots and expand the bot for which you want to set an icon.


 Expand the Options section.
Search for and select the desired icon in the Bot icon field.

 Save the bot by selecting one of the following:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




  
Rename a bot
To rename a bot:

Go to Automation  > Bots and double-click the bot you want to rename in the Bots panel.

    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    If you are using the legacy editor

Go to Automation > Bots and expand the bot that you want to rename.


Position your cursor over the bot you want to rename in the Bots navigation panel.
Select More   > Rename in the bot header.
Rename the bot.

Alternatively, you can double-click the name of the bot in the Bots panel and edit the name.
Add a comment to a bot
To add a comment to a bot:

Go to Automation  > Bots and select the bot you want to rename in the Bots panel.

    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    If you are using the legacy editor

Go to Automation > Bots and expand the bot for which you want to set an icon.


Expand the Documentation section.
Enter a descriptive comment for the bot that will enable collaborators to easily understand its purpose.

Copy a bot
Copy the contents of a bot. A numeric value (such as 2) is appended to the bot and event names to ensure they are unique.
To copy a bot:

Go to Automation   > Bots.
Select the bot you want to copy in the list.
Select More   > Duplicate in the bot header.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor


To copy a bot:

Go to Automation > Bots.
Expand the bot you want to copy.
Click Copy in the bot heading.


 




 Monitor a bot
Use the AppSheet automation monitor to monitor automation in your apps and keep a track of the bot executions that were successful, encountered errors, and are still pending
To monitor a bot:
To copy a bot:

Go to Automation   > Bots.
Select the bot you want to monitor in the list.
Click Monitor in the bot header.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor


To monitor a bot:

Go to Automation > Bots.
Expand the bot you want to monitor.
Click Monitor in the bot heading.




Test a bot
Copy the contents of a bot. A numeric value (such as 2) is appended to the bot and event names to ensure they are unique.
To copy a bot:


To add a comment to a bot:

Go to Automation  > Bots and select the bot you want to test in the Bots panel.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

     

    If you are using the legacy editor

Go to Automation > Bots and expand the bot you want to test.


Select More   > Test in the bot header.

 Enable or disable a bot
You can disable the bot to temporarily stop the automation. Then, re-enable it. 
To enable or disable a bot:

Go to Automation   > Bots.
Select the bot you want to enable or disable in the list.
Select Enable or Disable in the bot header.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor


To disable a bot:

Go to Automation > Bots.
Expand the bot you want to delete.
Click Disable in the bot heading.




Delete a bot
Delete a bot to permanently remove it.
To delete a bot:

Go to Automation   > Bots.
Select the bot you want to delete in the list.
Select More   > Delete in the bot header.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy editor


To delete a bot:

Go to Automation > Bots.
Expand the bot you want to delete.
Click Delete in the bot heading.






   Was this helpful?How can we improve it?YesNoSubmit   

 Events: The EssentialsManage an event in a bot as described in the following sections:

What is an event?
Add an event to a bot
Configure an event
Copy an existing event
View events
Edit an event
Delete an event
Example: Trigger a schedule event on a specific date

What is an event?
Events can occur:

When there is a data change.
On a specific schedule.
Based on a Chat app interaction.

Data Change events
Data Change events occur when there is a change to an entity (table) - new data is added, or existing data is modified (for example, status of a service ticket is changed) or deleted.

External Data Change Events: If you want events to fire based on manual or direct updates to the underlying data sources, external configuration is necessary. Currently only Sheets and Salesforce data sources are supported. For more information, see Sheets and Salesforce.

 Events generated due to an app action or as a result of data change due to an API call will fire without any external configuration.


The following example shows a Data Change event triggered by adds only to the Appointments table.

Schedule events
Schedule events occur periodically at a set time (for example, every Monday morning at 9 AM).

To reference columns in a table, you must turn on the ForEachRowInTable settings. See Configure schedule events.

The following example shows a Schedule event.

Chat events
Chat events occur based on Chat app interactions, as described in Configure Chat events. The following example shows a Chat event.

Before you can add a Chat event, you must configure your Chat app with AppSheet.


Add an event to a bot
To add an event to a bot:

Create a bot.

Perform one of the following:


To reuse an existing event, select an event under From this App.
          For more information, see Reuse automation components.
To create a new event, do one of the following:
          
Click Create a custom event.
Select an event from the list of Suggestions.
              AppSheet Automation is an intent-aware platform. The platform understands user intent and recommends configuration options that align with what you are trying to achieve. For example, selecting the following suggestion would configure a process and Send an email task for you:
When Available record is updated, send an email





Configure the event.

When you are done, save the task by selecting one of the following:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure an event
Configure an event by selecting the event in the app editor and using the settings described in the following sections.

Configure a data change event
Configure a schedule event
Configure a Chat event

Configure a data change event
For a data change event, configure the following settings:




Setting


Description



Linking

Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.










Event name


Name of the event.




Event Type


Select Data Change.




Data change type


Select the data change types that trigger the event.




Table


Table referenced by the event. Select an existing table in the list.
Click View definition to view the structure of the selected table. See Tables: The Essentials for more information about adding tables.




Condition


Condition to check before triggering the event.




Bypass Security Filters?


Toggle to indicates whether to execute as though there are no security filters on the data sources. This setting allows automated tasks (that run as the app owner ID) to continue working. It is useful for generating reports or performing other tasks that require more information.



Event icon
Expand the Appearance section and select an icon for the event.


Descriptive comment
Expand the Documentation section and enter a comment that describes the purpose of the event.



Configure a schedule event

A subset of features, such as sending emails or triggering bots with schedule events using AppSheet automation, are not fully supported with a free plan. That is, you can configure these features, but they won't execute as expected. See Subscribe to a paid plan.

For a schedule event, configure the following settings:




Setting


Description



Linking

Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.










Event name


Name of the event.




Event Type


Select Schedule.




Schedule


Set the schedule and time for the event.



Time zone

Set the time zone for the schedule event.




ForEachRowInTable


Flag that specifies whether to operate on each row in the specified table.
Turn on ForEachRowInTable if you want to run a process for each row of data in the table. When turned on, the option to specify a filter condition appears. 
 
Turn off ForEachRowInTable if your process doesn't rely on data in a table. When turned off, you can select any event except Run a data action as a valid step type in the process.


Only turn off this setting if your process doesn’t rely on data in any table.






Table



Note: This field only displays if ForEachRowInTable is enabled.

Table referenced by the event. Select an existing table in the list.
Click View definition to view the structure of the selected table. See Tables: The Essentials for more information about adding tables.




Filter Condition



Note: This field only displays if ForEachRowInTable is enabled.

Filter condition to use to identify which rows in table are impacted.




Condition


Condition to check before triggering the event.




Bypass Security Filters?


Toggle to indicates whether to execute as though there are no security filters on the data sources.



Event icon
Expand the Appearance section and select an icon for the event.


Descriptive comment
Expand the Documentation section and enter a comment that describes the purpose of the event.



Configure a Chat event
For a Chat event, configure the following settings:




Setting


Description




Event name


Name of the event.

Note: The name will be displayed in Chat.





Event Type


Select Chat.




Chat interaction


Chat interaction that triggers the event:

Slash command - Slash command is issued in the Chat space.
Added to space - Chat app is added to a Chat space.
Removed from space - Chat app is removed from the Chat space.





Name 


Note: Valid only if Slash command is selected as the Chat interaction.
Slash command that triggers the event.




Description


Note: Valid only if Slash command is selected as the Chat interaction.
Description of the slash command that triggers the event. 




Copy an existing event
When you copy an event, the name of the new event defaults to the name of the current event followed by a unique number (starting with 1 and incrementing), such as My Event 1.
To copy an existing reusable event:

Open the app in the editor.
Go to Automation  > Events.
Select the event you want to copy in the Events panel.
Select More > Duplicate.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


To copy an existing event:

Select Automation > Events.
Select the event you want to copy.
Click Copy in the event heading.




View events
To view an event in a bot, select Automation  > Bots, select the bot in the Bots panel, and click the event in the main panel.
To view all events by table, select Automation  > Events. By default, only reusable (linkable) events are shown. To view all events, turn on Show all automation components, as described in Configure app editor settings.

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

 

If you are using the legacy editor


To view all events, select Automation  > Events. Events are organized based by table.
If an event is used by one or more bots, it displays a reusability indicator (number adjacent to the event name) to indicate the number of bots using the event. In the example below, the Scheduled: Every day event is a reusable component that is used in  two  bots.

Click the number to view the list of bots that are using the event. For more information, see Reuse automation components.



Edit an event

Note: If an event that is reused, consider the impact to all bots before editing the event.

To edit an event, view the event in the app editor, edit the configuration, and save your changes.
Delete an event

Note: If a reusable event is used in multiple bots, consider the impact to all bots before deleting the event. If you try to delete an event that is used by one or more bots, AppSheet will prompt you to confirm the operation, as shown:







 To remove an event from a bot in the editor, select Remove in the drop-down menu. It is removed from the bot but retained on the Events tab.


To delete a reusable event:



Select Automation  > Events.
Select the event you want to delete in the Events panel.
Select More > Delete.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

 If you are using the legacy editor


 To delete a reusable event:

Select Automation > Events.
Expand the event you want to delete.
Click Delete in the event heading.



Example: Trigger a schedule event on a specific date
Trigger a schedule event automatically at predetermined dates obtained from the app's data. This can be done using the Condition setting of the scheduled report.
For example, suppose you have a table called Tasks. Each row in this table is a task that you have to perform, and each task has a Date column that stores the date when you have to perform the task. You can set up a scheduled report that will automatically send you an alarm message to remind you of the task at 7:00 am on the day the task is supposed to be carried out.

  To do this, in the app editor, configure the schedule event as follows:




Setting


Setting




Event name


Any event name




Event Type


Schedule




Schedule


Daily




Time


7:00 am




Time zone


Set according to your time zone




For EachRowInTable


Enable




Table


Tasks




Filter Condition


TODAY()=[Date]




Here's how the schedule works. Every day, at 7:00 am, the schedule will go through each task in the Tasks table and check the date of the task. If the date of the task is the current date, the schedule will be triggered, and an alert message will be sent.
Note: This design will not work if you want to trigger reports at specific times (hours and minutes) obtained from the app's data.
   Was this helpful?How can we improve it?YesNoSubmit   

 Processes: The EssentialsRun a set of activities in your bot using a process as described in the following sections:

What is a process?
Add a process to a bot
Create a process
View processes
Edit a process
Delete a process

What is a process?
A process combines tasks into composite activities. A process represents a typical business process, such as an order approval.
A process may run a simple set of tasks sequentially, such as send an email or create a file. A more complex process might take hours or days to complete if it includes more time-consuming activities, such as:

Loop over many records and call a task for each of them
Call other processes
Wait for a human to respond to something


A process contains the following elements:

An input (a row in a table this process will work on)
A sequence of steps

For example, in the screenshot below you can see a sample Handle Daily event process that contains the following elements:

Table: A row in the Tasks table.
Step: Send an email


Add a process to a bot
Add a process to a bot using AppSheet in one of the following ways:

Create a new process
    See Create a new process.
Reuse an existing process (if a linkable process is available)
    In the Then run... drop-down select a linkable process. See Reuse automation components.

Create a new process
AppSheet Automation enables you to build processes once and reuse them in various automations to save time and accelerate development. See also About component reusability with AppSheet Automation.
To create a new process:

To create a new process within a bot, simply add steps to the process in the Then run... section.
To create a reusable process, select Automation  > Processes and click + in the Processes panel.


If you are using the legacy editor


To create a new process:

When creating or editing a bot, select Create new process in the Run this Process drop-down list.
Select Automation > Processes and click New Process.




To copy an existing process:

Select Automation  > Processes.
Select the process you want to copy in the Processes panel.
Click More   > Duplicate in the process heading.

The existing process is copied. The name of the new process defaults to the name of the current process followed by a unique number (starting with 1 and incrementing), such as Onboard new employees 1.

If you are using the legacy editor

To copy an existing process:

Select Automation > Processes.
Select the process you want to copy.
Click Copy in the process heading.

The existing process is copied. The name of the new process defaults to the name of the current process followed by a unique number (starting with 1 and incrementing), such as Onboard new employees 1.




View processes
To view all processes, select Automation  > Processes. Processes are organized by their table association or under Other if there is no table association.
By default, only reusable (linkable) processes are shown. To view all processes, turn on Show all automation components, as described in Configure app editor settings.
If a reusable process is used by one or more bots, it displays a reusability indicator (number in the process header) to indicate the number of bots using the process. Click the number to view the list of bots that are using the process. For more information, see Reuse automation components.
Edit a process

Note: If a process is reused, consider the impact to all bots before editing the process.

To edit a process, view the process in the editor, edit the steps, and save your changes.
Delete a process

Note: If a reusable process is used in multiple bots, consider the impact to all bots before deleting the process. If you try to delete a process that is used by one or more bots, AppSheet will prompt you to confirm the operation.


To delete a reusable process:

Select Automation  > Processes.
Select the process you want to delete in the Processes panel.
Click More   > Delete in the process heading.

 

If you are using the legacy editor


 
To delete a process:

Select Automation > Processes.
Select the process you want to delete.
Click Delete in the process heading.
To delete a process used in a bot:
Select Automation > Bots.
Select Remove from the Then run... process drop-down.




   Was this helpful?How can we improve it?YesNoSubmit   

 Steps: The EssentialsA step is a basic element in a process that defines a task to be carried out. A process can have several steps.
Add a step in a process and configure the step type, as described in the following sections. For more advanced automations, you can use values from a previous step in a non-reusable action or task.
Add a step in a process
To add a step in a process, click Add a step in the process flow and do one of the following:


Choose from the list of suggestions
AppSheet Automation is an intent-aware platform. The platform understands user intent and recommends configuration options that align with what you are trying to achieve. For example, selecting the following bot suggestion would configure a step with a basic Send an email task for you:
When a new NationalParks record is created, send an email


Create a custom step
Click Create custom step, select a step type from the drop-down list, and configure the step as described in the following sections.


Supported step types
The supported step types are described in the following sections.

Run a task


The Run a task step type allows you to run a specific task, such as Send an email. For a complete list of types, see Supported task types.
In the following example, the Send welcome email step runs a task named Send an email against the data provided to the process, such as a new employee record.





Run a data action


The Run a data action step type allows you to perform a data change action on your app, including one of the following:

Add new rows: Add rows to the selected table.
Delete row: Delete the current row.
Set row values: Set values for specific columns using the Expression Assistant. To add additional columns, click Add.
Run actions on rows: Run the selected action on one or more rows in the selected table. Specify the rows using the Expression Assistant.
Grouped actions: Run a group of actions. To add actions, click Add.






Branch on a condition


The Branch on a condition step type allows you to implement conditional logic in your process. For example, if <condition> , then <do step>, else <do another step>. The condition value can be any valid expression.





Wait

The Wait step type allows the process to pause execution and before resuming:


Wait for a condition to evaluate to TRUE or a timeout period to be reached


Wait for a period of time



Note: Process execution will not resume at the exact time that time period is met. There may be a delay of up to 5 minutes. For example, if the timeout period is set to 5 minutes, process execution may not actually resume for up to 10 minutes (factoring in the potential 5 minute delay). Therefore, the Wait step does not support use cases where accurate timing is required.

Wait for a condition
Wait for a condition to evaluate to TRUE (based on a data change) or a timeout period to be reached before resuming execution.

 
Add a Wait step to the process flow and configure the following settings:




Setting


Description




Wait for


Select A condition from the drop-down list.




Condition


Enter an expression that defines the condition that if TRUE enables execution to resume.




Custom timeout


Optionally, enable Custom timeout and do the following:


Enter an expression in the Period field that specifies the maximum amount of time to wait before resuming execution if the condition does not evaluate to TRUE. See Date and Time Expressions. The minimum period is 5 minutes and the maximum period is 30 days. Values outside of the minimum and maximum range will result in an error.


Optionally, add one or more steps to the Timeout branch that will run in the event that the custom timeout is reached. Use Return values as the last step to exit the process flow after the Timeout branch completes; otherwise, execution returns to the main process flow.


If Custom timeout is not enabled, the process execution will terminate after 30 days if the condition does not evaluate to TRUE.




 
Wait for a period of time
Wait for a period of time before resuming execution.

 
Add a Wait step to the process flow and configure the following settings:




Setting


Description




Wait for


Select A period of time from the drop-down list.




Period


Enter an expression that specifies the period of time to wait before resuming execution as a Duration value. See Temporal types. The minimum period is 5 minutes and the maximum period is 30 days. Values outside of the minimum and maximum range will result in an error.








Call a process


 The Call a process step type allows you to invoke another process within the same application. You can pass data to the process being invoked using literal values or expressions.

Select one of the following options to process the input:


Add: A new row will be created using the data you supply. If another row exists with the same key, that row will be updated and used.


Lookup: The row will be retrieved using the key. Any additional columns will be used to update the row. (Only non-composite keys are supported.)









Return values


The Return values step type allows you to return specific values from within your current process. Typically it's the last step in your process. The return values are accessible to the process that calls your current process via the Call a process step.
You might want to have a parent process invoke a child process, and use the return value of the child process to determine the next steps to be performed. The parent process calls the child process and references the returned value using the following format: [child-process-name].[return-value]
For example, a child process, Send for approval, contains a Return values step that returns two values ApprovalAmount and ApprovalDecision, as shown below:

The parent process calls the child process using the Call a process step and references the ApprovalDecision value from the child process using the expression [Send for approval].[ApprovalDecision].



Use values from a previous step in a non-reusable action or task
For a non-reusable action or task (that is, Linking is disabled for the action or task), you can use values returned from a previous step in your automation flow.
For example, you can use the email address returned from a previous step when configuring the To setting for a Send an email task: [Step].[Email]

 
   Was this helpful?How can we improve it?YesNoSubmit   

 Tasks: The EssentialsDefine the tasks you want to run in a process in your bot:

What is a task?
Supported task types
Add a task to a bot
Copy an existing task
View tasks
Edit a task
Delete a task

What is a task?
A task is a simple activity that runs quickly. For example, you can send someone a message (email, SMS), change data, or call an external service.
You add a task as a step in a process. Tasks can be reused across processes.

Supported task types
AppSheet supports the following types of tasks:

Send an email
Send a notification
Send an SMS message
Call a webhook
Create and save a file
Call a script
Send a chat message

Add a task to a bot
Add a task to a bot as a step in a process using AppSheet:

Click Add a step in the process flow
Select Run a task.
Optionally, do one of the following:
    
Choose from the list of suggestions. AppSheet Automation is an intent-aware platform. The platform understands user intent and recommends configuration options that align with what you are trying to achieve. For example, selecting the following bot suggestion would configure a basic Send an email task for you:

        When a new NationalParks record is created, send an email
Reuse an existing task. Click Custom task and select an existing task from the list.


Select the task type and configure the task.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


Add a task to a bot as a step in a process using AppSheet in one of the following ways:

Choose from the list of suggestions. AppSheet Automation is an intent-aware platform. The platform understands user intent and recommends configuration options that align with what you are trying to achieve. For example, selecting the following bot suggestion would configure a basic Send an email task for you:

When a new NationalParks record is created, send an email
Reuse an existing task. When creating a custom step in a process, click Run a task and select an existing task from the list.
Create a custom task.

When creating a custom step in a process, click Run a task, then select Create new task in the Task to run list to create a reusable task and include it in the existing process.
Select Automation > Tasks and click + New Task to create a reusable task that can be used in any bot process.






Copy an existing task
Copy an existing task. The name of the new tasks defaults to the name of the current task followed by a unique number (starting with 1 and incrementing), such as My Task 1.
To copy an existing reusable task:

Select Automation > Tasks.
Select the task you want to copy.
Click Copy in the task heading.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


 
To copy a task:

Select Automation > Tasks.
Select the task you want to copy.
Click Copy in the task heading.




View tasks
 To view all tasks, select Automation  > Tasks. Tasks are organized by table.
By default, only reusable (linkable) tasks are shown. To view all tasks, turn on Show all automation components, as described in Configure app editor settings.
If a reusable task is used by one or more bots, it displays a reusability indicator (number in the task header) to indicate the number of bots using the task. Click the number to view the list of bots that are using the task. For more information, see Reuse automation components.
Edit a task

Note: If editing a reusable task, consider the impact to all processes before editing the task.

To edit a task, view the task in the app editor, edit the configuration, and save your changes.
Delete a task
 Deleting a reusable task that is used in one or more processes may negatively impact the execution of those processes. If you try to delete a task that is used by one or more processes, AppSheet will prompt you to confirm the operation, as shown:

To delete a reusable task:

Select Automation > Tasks.
Select the task you want to delete.
 Click More   > Delete in the task heading.

To delete a task used in a bot:

Select Automation > Bots.
Select the task in the process flow.
Click .


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

 

If you are using the legacy editor


 
To delete a resuable task:

Select Automation > Tasks.
Select the task you want to delete.
Click Delete in the task heading.

 To delete a task used in a bot:

Select Automation > Bots.
Locate the task in the process flow.
Click More   > Delete.

 



   Was this helpful?How can we improve it?YesNoSubmit   

 Set input values dynamically in tasks
This feature is being rolled out gradually.

 When a task is reused in multiple steps in an automation, the app creator can dynamically configure the task for each step by setting input values.

Input values ([_INPUT].[inputname]) and INPUT() functions can't be used in the same action or task. They can be used in the same automation or app.

To add inputs when adding a task to a bot:

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]

For example, the following Send an email task has defined a Message input that is used in the message body ([_INPUT].[Message]). When the task is used in a step, the app creator can customize the message that appears in the email (for example, Thank you!).


    Was this helpful?How can we improve it?YesNoSubmit   

 Reuse automation componentsAppSheet Automation enables reusability, allowing you to build components once and reuse them in various automations to save time and accelerate development. You can create events, processes, tasks, and actions that can be reused in other components. For example, you can reuse actions and tasks within new processes, reuse events and processes within new bots, and so on.
Manage component reuse as described in the following sections:

Enable or disable automation component reuse
Reuse an automation component
View the linked components
View all reusable components
Edit or delete a reusable component
Disable reusability for an automation component

Enable or disable automation component reuse


Automation component reuse is:

Disabled by default when you create a component within a bot.
Enabled by default when you create a component as a stand-alone component (for example, Automation > Events).



When configuring a component within a bot, you can enable reuse by expanding the Linking panel and enabling the Linking setting. For events and tasks, the Linking panel appears in the Settings panel, as shown:

For processes, the Linking panel appears in the center edit pane.
You can also enable or disable linking when viewing all reusable components

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


When configuring an automation component from the relevant tab (for example, Automation > Tasks), you can enable reuse by expanding the Linking panel and enabling the Linking setting, as shown:


Note for processes: You can enable or disable reusability for a process only by using the Automation > Processes tab. To view all reusable and non-reusable processes, click Show unlinked. (Non-reusable processes are hidden, by default.)

Similarly, when configuring an automation component within a bot, you can enable reuse by expanding the Linking panel and enabling the Linking setting in the Settings panel, as shown:


Note for actions: You can enable or disable reusability for an action only by using the Settings panel when configuring the action. 

To disable automation component reuse, disable the toggle.



Reuse an automation component
When you enable automation component reuse, that component will be included as a suggestion when adding components to your bots.
For example, when adding a new task to a process, the relevant reusable automation components are listed as suggestions:

To reuse a process, when editing a bot, select Swap in the Then run... drop-down and select a linkable process in Select a linkable process dialog. 
View the linked components



 View the linked components that are currently using the component in the Linking panel. 
For example, in the component Settings panel, you can:

View the number of linked components in the linking lozenge
Expand the Linking panel to view the full list of linked components
Click a linked component to navigate to it in the relevant component tab





View all reusable components
After you enable at least one reusable (or linkable) component for a type (event, process, or task), you can view all reusable components of a given type by selecting the type in the fly-out menu. For example, select Automation > Tasks to view all reusable tasks.



We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


 View all reusable and non-reusable components on the relevant tabs (such as, Automation > Processes).
Reusable components display the number of linked components in the linking lozenge. Non-reusable components do not display the lozenge. To show only reusable components, click Hide unlinked. Then, to show all components, including non-reusable components, click Show unlinked.




Edit or delete a reusable component
When editing or deleting a reusable component, your changes affect all linked components. Ensure that your changes do not negatively impact the operation of the linked components.

Before you delete a reusable automation component, consider removing the component from other bots or processes that use it.


If you are using the legacy editor


 If you try to delete a reusable component that is used by one or more bots, AppSheet will prompt you to confirm the operation. For example:






Disable reusability for an automation component

Before you disable reusability for an automation component, consider removing the component from other bots or processes that use it. See View the linked components.

 When configuring an automation component, disable reusability by selecting More   > Disable linking in the Settings panel.

We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

 

If you are using the legacy editor


 To disable reusability:

When editing a component on its relevant tab (such as, Automation > Tasks), expand the component, expand the Linking panel, and disable the Linking toggle.


           
When editing a component within a bot, expand the Linking panel in the Settings panel, and disable the Linking toggle.








   Was this helpful?How can we improve it?YesNoSubmit   

 Example automationsThe following examples illustrate some of the ways you can define tasks that can be triggered by data change events. See the ClickToSendEmailsample app to see some of these examples.
Send email when a row is added, updated, or deleted
You can create an event that sends a email when a row is added, updated, or deleted. For example, you might send an email each time an Order is added or updated. 
The ServiceRequests table and the On Add in ServiceRequests_Action1 task illustrate how to send an email each time a new Service Request is created. For example:


The ServiceRequests table contains the customer's name in column Name, the customer's email address in the Email column, and an Enum value that indicates whether the service request is Pending, Active, or Completed.


The On Add in ServiceRequests_Action1 task can be triggered on the AppSheet backend service each time a new row is added to the ServiceRequests table. It can then generate an email and send it to the email address contains in the Email column.


Send email when a row is updated to have a specific column value
You can create an event that sends an email when a row is updated to have a specific column value. For example, you might send an email when the Status column in the ServiceRequests row is updated to contain the value Active.

AND(
  ("Active" = [_THISROW_AFTER].[Status]),
  ([_THISROW_AFTER].[Status] <> [_THISROW_BEFORE].[Status])
)

In this expression, note the use of [_THISROW_BEFORE] and [_THISROW_AFTER]. These are system-provided references that refer to the state of the row before and after the change was made, respectively. This is really useful in order to check if the value of a field changed from one value to another.
Because [_THISROW_BEFORE] and [_THISROW_AFTER] are references, you use a dereference expression to access the value of a specific column in the referenced row.
Send email when a row is updated to have two or more specific column values
The ServiceRequests table and the On Change in ServiceRequests_Action1 task illustrate how to send an email when a new service request is in Active state and all needed parts are in hand. For example:


The ServiceRequests table contains the customer's name in column Name, the customer's email address in column Email, an Enum column that indicates whether the service request is Pending, Active, or Completed, and a Yes/No column that indicates whether parts are on order.  


The On Change in ServiceRequests_Action1 task can be triggered on the AppSheet backend service each time a row in the ServiceRequests table is updated. For example, the following expression sends email to the email address in the Email column when either the Status or PartsOnOrder columns are changed, the Status is Active, and there are no PartsOnOrder. By checking whether Status or PartsOnOrder have just changed, we avoid sending email when some other column in the row has changed that is irrelevant to whether the service request is being worked on.



AND(
  ("Active" = [_THISROW_AFTER].[Status]),
  NOT([_THISROW_AFTER].[PartsOnOrder]),
  OR(
    ("Active" <> [_THISROW_BEFORE].[Status]),
    [_THISROW_BEFORE].[PartsOnOrder]
  )
)

Send email that includes file attachments
You can create an event that allows the user to control the file attachments appended to the email. For example, you might have a brochure for each product you offer. Each brochure might reside in its own PDF file. The customer could select which products they are interested in and you could attach the appropriate PDF file for each product to the email.
The Customers table and the On Change in Customers_Action1 task illustrate how to send an email that includes one or more file attachments selected dynamically by the client. For example, the app user can select the images or PDF documents to include with the email by selecting values from an EnumList. For example:


The Customers table contains the customer's name in column Name, the customer's email address in column Email, and an EnumList of potential email attachments in column Attachments.


When the user edits a row in the Customers table they can select one or more values from the Attachments EnumList. In our case, the user can select Apple, Banana, or Orange, or any combination of the three. When Apple is selected, the file Apple.pdf is included as an email attachment. Likewise for Banana and Orange. The user selected values are stored in the Attachments field of the Customers row.


The On Change in Customers_Action1 task can be triggered on the AppSheet backend service each time the Customers table is updated. For example, the following expression determines if column Attachments has a value and if its value has changed. If so, it sends email to the email address contained in the Email column.



AND(
  ISNOTBLANK([_THISROW_AFTER].[Attachments]),
  ([_THISROW_AFTER].[Attachments] <> [_THISROW_BEFORE].[Attachments])
) 
 
The event can determine which PDF files to attach to the email using the following expression:

<<IFS(IN("Apple", [Attachments]), {"Apple.pdf"}) + IFS(IN("Banana", [Attachments]), {"Banana.pdf"}) + IFS(IN("Orange", [Attachments]), {"Orange.pdf"})>>
 
The Apple.pdf, Banana.pdf, and Orange.pdf files must reside on the server in the application folder. 
Send an email from an Action button
You can use an action button on the app to perform a data change. As a result, a single click of an action button in the app can trigger a customized email message that is sent to one or more recipients by the AppSheet backend service. You can label the action button to make it clear that an email will be sent when the action button is clicked.

  The Orders table and the On Change in Orders_Action1 task can be used to send email from an action button. For example:


The Orders table includes the email column Email and the numeric column EmailsSent.


When the user is viewing a row in the Orders table, they can click the Email This Order action button. That increments the value in column EmailsSent.


The On Change in Orders_Action1 task can be triggered on the AppSheet backend service each time the Orders table is updated. For example, the following expression determines if column EmailsSent has changed. If so, it generates an email and sends it to the email address contains in column Email.



AND(
  ISNOTBLANK([_THISROW_AFTER].[EmailsSent]),
  ([_THISROW_AFTER].[EmailsSent] <> [_THISROW_BEFORE].[EmailsSent])
)

Choose and send a report from a list of reports
The Reports table and the ReportOpenOrders_Action1 and ReportActiveServiceRequests_Action1 tasks can be used to choose and send a report from a list of reports. For example:

The Reports table contains a list of reports each of which has a report name and description.
A user can go to the  menu, select the Reports view, choose a report from the list of Reports, and click the Create action to trigger the selected report.
The Create action updates the value in the LastRun DateTime field of the chosen Reports record.
The Reports record update triggers either the ReportOpenOrders_Action1 and ReportActiveServiceRequests_Action1 task depending on the Name contained in the Reports record.
The event generates a report and sends it to the appropriate email recipients.

Send an email only after adding a parent record and all of its children
When you add a parent record along with one or more child records, AppSheet first adds the parent record followed by each of the child records. This can make it difficult to trigger an automation only after all of the child records have been added. 
You can can use the following technique to ensure that all parent and child records are added before the automation runs.
This technique uses a Form Saved event to trigger a data-change action which triggers the task only after the child records have been added.
For example:


The child table must contain a Ref field to the parent table. Set the Is a part of property of the Ref field to On. This makes it possible to add child records when the parent record is added.


Add a Text field to the parent table. Call the field Status and set its Initial value property to "" (blank). The Status column controls whether the event fires.


Create a Data Change action for the parent table which sets the Status column's value to "Run".


Create a second Data Change action for the parent table which sets the Status column's value to "" (blank).


Create a Composite Action for the parent table that invokes the two Data Change actions above. This Composite Action invokes the first Data Change action to set the Status column's value to "Run", and the second Data Change action to set the Status column's value to blank. These two Data Changes will be sent to the server as separate updates. The first update fires the event, while the second update prevents further updates from firing the event.


Go to the UX > Views tab. Click Show system views. Select the form for the parent table. Expand Behavior. Find Event Actions and set its Form Saved property to the Data Composite action created in the previous step.


Set your event's Event Type property to Updates only. Set its Condition property to:



[Status] = "Run"

Maintain per user settings
You can maintain "per user" settings. For example, you might want to allow each user to specify whether they prefer to receive an email or an SMS when a workflow is triggered.
You can store the settings as follows:


Create a new table having one record per user. Each record will contain that user's settings. You might call the table Automation Settings.


Create a slice on the  Automation Settings table so that each user "sees" only their own settings row. You might call the slice Automation Settings Slice. You cannot use a security filter because then one user's settings would not be visible to the other user's event.


Create a view that allows each user to update the settings in their Automation Settings Slice.


You can use the preferences as follows:


In your event, check the preferences contained in the Automation Settings Slice for the current user to control what action is taken.


For example, if you wish to allow each user to specify whether they prefer to receive an email or an SMS when a workflow is triggered, do the following:


Define both an Email and an SMS event.


In the Email event Condition property, check whether the current user wishes to receive an email. In the SMS event Condition property, check whether the current user wishes to receive an SMS.


Invoke other actions
We have described how to send email, SMS, and notifications from the app. However, you can invoke any event-triggered task from the app using this approach. For example, you could invoke a task that uses a web hook to invoke an external web service.
   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot botsResolve the most common bot problems using the guidance provided in the following sections.
  


A subset of features, such as sending emails or triggering bots with schedule events using AppSheet automation, are not fully supported with a free plan. That is, you can configure these features, but they won't execute as expected. See Subscribe to a paid plan.
For more information, see What can I do with a free plan? 




Why isn't my bot working?


If you are having a problem with the execution of your bot, always start by checking the audit history log.
Customize the dashboard settings and look for the audit record that is relevant to the bot. Click the Details icon for more information. If there was an issue with the bot execution, the reason will be provided. If you see "Result": "Success", then the bot execution was successful.
Note: You may need to wait for up to five minutes for the audit record to appear. AppSheet groups audit records before writing them to the audit history log to reduce overhead. This can result in a delay before an audit record appears in the audit history. If you don't see an audit record, click Search periodically to refresh the audit history log.




Can AppSheet alert me automatically if a bot fails?

You can subscribe to automatically receive an email alert each time an error is recorded in Audit History, and alert you when a bot fails to execute. To enable automatic alerts, see Configure alerts on Audit History errors.



Why isn't my bot running on the schedule I specified?


Always start by checking the Audit History as described in Why isn't my bot working?
Your bot will only run automatically on the specified schedule after your application has been deployed and you are on a paid pricing plan.
If you application is not deployed or you are not enrolled in a paid pricing plan, your bot will not run on the specified schedule. However, you can invoke your bot by clicking Test on the Automation > Bots pane.




Why isn't the bot Test button working?


If clicking Test on the Automation > Bots pane does not invoke your bot for testing, make certain that your browser is not blocking pop-up windows.
If you are using the Google Chrome browser:


Click the Customize and control Google Chrome button on the top right of the browser's toolbar.


Select Settings from the drop-down.


Under Privacy and security, expand Site settings.


Under Content, expand Pop-ups and redirects.


Add https://www.appsheet.com:443 to the Allow list.




Why is the error "Request cancelled: took too long to process" occurring?


AppSheet has a mechanism to prevent runaway applications from consuming too much time and impeding other applications that are running at the same time.
When starting an Add, Update, or Delete request, AppSheet starts a timer that runs for 2 minutes. AppSheet expects the request to finish within that 2-minute time limit. This includes the time to perform the Add, Update, of Delete as well as the time to perform any bot triggered by that Add, Update, or Delete.
AppSheet checks the time limit when:


Computing virtual columns


Applying security filters
            For example, when evaluating an expression that requires reading a table and applying a security filter to it.


Fetching values from a table
            For example, if you have virtual columns that contain expressions that refer to other tables. AppSheet must read the tables, apply the security filters for the tables, and compute the virtual column values for the tables.


Time limits may be exceeded if you app has:


A large number of virtual columns that have AppFormulas that are expensive to evaluate.


Virtual columns that have AppFormulas that require reading other tables. When evaluating the AppFormulas, AppSheet must read the other tables, apply security for the tables, and compute the value of the virtual columns for those tables.


Bots that are expensive to perform. Bots that have complex email body or attachment templates can be expensive. For example, if they include Start expressions that require reading other tables, applying security filters for the tables, and computing the values of the virtual columns for the tables.




 

 
   Was this helpful?How can we improve it?YesNoSubmit   

 Improve bot performanceWhen you have a performance problem with an automation bot, go to Manage > Monitor > Performance Profile, click Launch performance analyzer, and take a close look at the Performance Profile information and recommendations. See also Monitor app performance using Performance Profile.
For bots with data change events, AppSheet captures the time required to perform each step of the add, update, or delete operation. AppSheet also captures the time required to perform each step of the tasks triggered by the add, update, or delete.
For bots with scheduled events, AppSheet captures the time required to perform each step in the bot.
AppSheet captures the elapsed time down to a resolution of one to two milliseconds. Admittedly the detail can be overwhelming, but the benefit of these very fine-grained measurements is that they provide clear insights into the length of time to complete specific steps in the process.
Often time is being consumed computing virtual columns or expressions. This is especially true if AppSheet needs to read other tables to compute the virtual column or expression. Based on this information, you can implement changes to improve your expressions to make them more efficient.
   Was this helpful?How can we improve it?YesNoSubmit   

 Understand bot scheduling and retryThe following sections provide details about how AppSheet stores, triggers, executes and retries bots with scheduled events.

Store bots with scheduled events
Trigger bots with scheduled events
Execute bots with scheduled events
Retry bots with scheduled events

Store bots with scheduled events
Each bot with a scheduled event is stored as a record in a SQL database. Each record contains the following information:

Name of the application containing the bot with a scheduled event
Name of the bot with a scheduled event
Date and time at which the scheduled event should be triggered

Trigger bots with scheduled events
The Schedule Service triggers the bot with a scheduled event at the appropriate time. It does this by reading the records from the SQL database and looking for bots with scheduled events that are due to be triggered.
When the Schedule Service finds a bot with a scheduled event that is due to be triggered, it issues an HTTP POST request to the AppSheet service to invoke the scheduled event. The POST request contains the names of the application and bot with a scheduled event. This allows the AppSheet Service to find and execute the scheduled event.
The Schedule Service then waits for a timeout period of up to five minutes for the scheduled event to complete.
Execute bots with scheduled events
The AppSheet service is responsible for executing the bot with a scheduled event. When it receives the POST from the Schedule Service it uses the names of the application and bot with a scheduled event contained in the HTTP POST to retrieve the scheduled event and begin executing it.
The AppSheet service records the time the scheduled event begins executing. Periodically, the AppSheet service checks to see if the scheduled event is taking too long to execute. If the total execution time exceeds five minutes, the AppSheet service aborts its execution.
When the bot with a scheduled event completes, the AppSheet service responds to the HTTP POST request and indicates whether the scheduled event completed successfully.
Retry bots with scheduled events
While the AppSheet service is executing the bot with a scheduled event, the Schedule Service is waiting for the AppSheet service to complete the scheduled event and respond to the HTTP POST.
If the bot with a scheduled event does not complete within five minutes, the Schedule Service assumes that the scheduled event failed for some reason. A bot with a scheduled event can fail for several reasons including:

The bot with a scheduled event may be complicated and take a long time to execute. As a result, the bot may exceed the AppSheet service's five-minute timeout period.
The bot with a scheduled event may be delayed because it is competing with other bots that are scheduled to run at the same time. It is common to schedule bots with scheduled events to run exactly on the hour. This can cause a flood of bots to fire on exactly the hour and result in one bot waiting for other competing bots to complete. This can result in a timeout because the bot is not initiated immediately and does not complete within the Schedule Service's five-minute timeout period. You can mitigate this by scheduling your bot to run at least a few minutes before or after the hour.
The bot with a scheduled event may be executing on an AppSheet server that is restarted for some reason. This can also cause a timeout.

When the Schedule Service detects that the bot with a scheduled event has not completed within the five-minute timeout period, it will retry its execution up to three additional times. If the Audit History indicates that the bot with a scheduled event is being invoked at five-minute intervals, it is likely that the Schedule Service is retrying its execution.
   Was this helpful?How can we improve it?YesNoSubmit   

 Automation limits
Process automation




Item


Limit




Maximum data size of a table record (image columns excluded) processed by a bot


10 MB



Maximum number of automation bots executing concurrently
5000



Maximum number of days a process can be in a wait state (wait step in the current process or waiting for a child process to execute)


30 days




Max number of days bot run data is available


55 days




Max number of rows processed in "For Each Row in Table" in a deployed app


10,000




Max number of rows processed in "For Each Row in Table" in a prototype app


1,000




Max Scheduled Bot execution time


5 minutes




Max Data Change Bot execution time


2 minutes



Maximum PDF files 

2500 per day,
        rate of 20 per second




Data extraction for invoices, receipts, and so on (Intelligent Document Processing)




Item


Limit




Size of the document that can be processed


20 MB




Number of pages in a document that can be processed (for example, invoice)


5




Processed document file formats supported


PDF, GIF, TIFF, JPEG, PNG




   Was this helpful?How can we improve it?YesNoSubmit   

 Supported time zonesAppSheet supports the following time zones when configuring bots:
Dateline Standard Time(UTC-12:00) International Date Line West
UTC-11 (UTC-11:00) Coordinated Universal Time-11
Hawaiian Standard Time (UTC-10:00) Hawaii
Alaskan Standard Time (UTC-09:00) Alaska
Pacific Standard Time (Mexico) (UTC-08:00) Baja California
Pacific Standard Time (UTC-08:00) Pacific Time (US & Canada)
US Mountain Standard Time (UTC-07:00) Arizona
Mountain Standard Time (Mexico) (UTC-07:00) Chihuahua, La Paz, Mazatlan Mountain Standard Time (UTC-07:00) Mountain Time (US & Canada)
Central America Standard Time (UTC-06:00) Central America
Central Standard Time (UTC-06:00) Central Time (US & Canada)
Easter Island Standard Time (UTC-06:00) Easter Island
Central Standard Time (Mexico) (UTC-06:00) Guadalajara, Mexico City, Monterrey Canada Central Standard Time (UTC-06:00) Saskatchewan
SA Pacific Standard Time (UTC-05:00) Bogota, Lima, Quito, Rio Branco
Eastern Standard Time (Mexico) (UTC-05:00) Chetumal
Eastern Standard Time (UTC-05:00) Eastern Time (US & Canada)
Haiti Standard Time (UTC-05:00) Haiti
US Eastern Standard Time (UTC-05:00) Indiana (East)
Venezuela Standard Time (UTC-04:00) Caracas
Paraguay Standard Time (UTC-04:00) Asuncion
Atlantic Standard Time (UTC-04:00) Atlantic Time (Canada)
Central Brazilian Standard Time (UTC-04:00) Cuiaba
SA Western Standard Time (UTC-04:00) Georgetown, La Paz, Manaus, San Juan Pacific SA Standard Time (UTC-04:00) Santiago
Newfoundland Standard Time (UTC-03:30) Newfoundland
E. South America Standard Time (UTC-03:00) Brasilia
SA Eastern Standard Time (UTC-03:00) Cayenne, Fortaleza
Argentina Standard Time (UTC-03:00) City of Buenos Aires
Greenland Standard Time (UTC-03:00) Greenland
Montevideo Standard Time (UTC-03:00) Montevideo
Bahia Standard Time (UTC-03:00) Salvador
UTC-02 (UTC-02:00) Coordinated Universal Time-02
Mid-Atlantic Standard Time (UTC-02:00) Mid-Atlantic - Old
Azores Standard Time (UTC-01:00) Azores
Cape Verde Standard Time (UTC-01:00) Cabo Verde Is.
Morocco Standard Time (UTC+00:00) Casablanca
UTC UTC
GMT Standard Time (UTC+00:00) Dublin, Edinburgh, Lisbon, London
Greenwich Standard Time (UTC+00:00) Monrovia, Reykjavik
W. Europe Standard Time (UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
Central Europe Standard Time (UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
Romance Standard Time (UTC+01:00) Brussels, Copenhagen, Madrid, Paris
Central European Standard Time (UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb W. Central Africa Standard Time (UTC+01:00) West Central Africa
Namibia Standard Time (UTC+02:00) Windhoek
Jordan Standard Time (UTC+02:00) Amman
GTB Standard Time (UTC+02:00) Athens, Bucharest
Middle East Standard Time (UTC+02:00) Beirut
Egypt Standard Time (UTC+02:00) Cairo
Syria Standard Time (UTC+02:00) Damascus
E. Europe Standard Time (UTC+02:00) Chisinau
South Africa Standard Time (UTC+02:00) Harare, Pretoria
FLE Standard Time (UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius
Turkey Standard Time (UTC+03:00) Istanbul
Israel Standard Time (UTC+02:00) Jerusalem
Kaliningrad Standard Time (UTC+02:00) Kaliningrad
Libya Standard Time (UTC+02:00) Tripoli
Arabic Standard Time (UTC+03:00) Baghdad
Arab Standard Time (UTC+03:00) Kuwait, Riyadh
Belarus Standard Time (UTC+03:00) Minsk
Russian Standard Time (UTC+03:00) Moscow, St. Petersburg, Volgograd
E. Africa Standard Time (UTC+03:00) Nairobi
Iran Standard Time (UTC+03:30) Tehran
Arabian Standard Time (UTC+04:00) Abu Dhabi, Muscat
Astrakhan Standard Time (UTC+04:00) Astrakhan, Ulyanovsk
Azerbaijan Standard Time (UTC+04:00) Baku
Russia Time Zone 3 (UTC+04:00) Izhevsk, Samara
Mauritius Standard Time (UTC+04:00) Port Louis
Georgian Standard Time (UTC+04:00) Tbilisi
Caucasus Standard Time (UTC+04:00) Yerevan
Afghanistan Standard Time  (UTC+04:30) Kabul
West Asia Standard Time (UTC+05:00) Ashgabat, Tashkent
Ekaterinburg Standard Time  (UTC+05:00) Ekaterinburg
Pakistan Standard Time (UTC+05:00) Islamabad, Karachi
India Standard Time (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi
Sri Lanka Standard Time (UTC+05:30) Sri Jayawardenepura
Nepal Standard Time (UTC+05:45) Kathmandu
Central Asia Standard Time (UTC+06:00) Astana
Bangladesh Standard Time (UTC+06:00) Dhaka
N. Central Asia Standard Time (UTC+07:00) Novosibirsk
Myanmar Standard Time (UTC+06:30) Yangon (Rangoon)
SE Asia Standard Time (UTC+07:00) Bangkok, Hanoi, Jakarta
Altai Standard Time  (UTC+07:00) Barnaul, Gorno-Altaysk
North Asia Standard Time (UTC+07:00) Krasnoyarsk
China Standard Time (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi
North Asia East Standard Time (UTC+08:00) Irkutsk
Singapore Standard Time (UTC+08:00) Kuala Lumpur, Singapore
W. Australia Standard Time (UTC+08:00) Perth
Taipei Standard Time (UTC+08:00) Taipei
Ulaanbaatar Standard Time (UTC+08:00) Ulaanbaatar
North Korea Standard Time (UTC+08:30) Pyongyang
Transbaikal Standard Time (UTC+09:00) Chita
Tokyo Standard Time (UTC+09:00) Osaka, Sapporo, Tokyo
Korea Standard Time (UTC+09:00) Seoul
Yakutsk Standard Time (UTC+09:00) Yakutsk
Cen. Australia Standard Time (UTC+09:30) Adelaide
AUS Central Standard Time (UTC+09:30) Darwin
E. Australia Standard Time (UTC+10:00) Brisbane
AUS Eastern Standard Time (UTC+10:00) Canberra, Melbourne, Sydney
West Pacific Standard Time (UTC+10:00) Guam, Port Moresby
Tasmania Standard Time (UTC+10:00) Hobart
Magadan Standard Time (UTC+11:00) Magadan
Vladivostok Standard Time (UTC+10:00) Vladivostok
Russia Time Zone 10 (UTC+11:00) Chokurdakh
Sakhalin Standard Time (UTC+11:00) Sakhalin
Central Pacific Standard Time (UTC+11:00) Solomon Is., New Caledonia
Russia Time Zone 11 (UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky
New Zealand Standard Time  (UTC+12:00) Auckland, Wellington
UTC+12  (UTC+12:00) Coordinated Universal Time+12
Fiji Standard Time (UTC+12:00) Fiji
Kamchatka Standard Time (UTC+12:00) Petropavlovsk-Kamchatsky - Old
Tonga Standard Time (UTC+13:00) Nuku'alofa
Samoa Standard Time (UTC+13:00) Samoa
Line Islands Standard Time (UTC+14:00) Kiritimati Island
   Was this helpful?How can we improve it?YesNoSubmit   

 Send an email from an automationConfigure an automation bot to send an email to one or more recipients based on an event by using the Send an email task.
For example, if an employee sends a request for a new chair (the event), you can configure the bot to send an email to their manager requesting approval before fulfilling the request.

To send an email from a bot, add and configure the Send an email task based on the email type, as described in the following sections:

Email types
Add and configure the Send an email task
Add email recipients
Examples of sending an email from an automation
Prevent app creators from adding email attachments in automations

See also Tasks: The Essentials.
Email types
There are currently two types of emails that you can configure:



Email type
Description


Embedded app view (dynamic)
Embedded app view emails enable you to embed supported app views within an email and allow Gmail recipients to interact directly with your app from within the email, without leaving their inbox. To configure an embedded app view email, see Send embedded app view emails from a bot.


Custom template
Custom template emails allow you to configure emails with text, HTML, or variables from app data. Configuration details are provided below.



Add and configure the Send an email task
Add and configure the Send an email task by performing the following steps:


Add the Send an email task to a bot, as described in Add a task to a bot.


Configure the Send an email task by using the settings described in the tables below.


When you are done, save the app by selecting one of the following:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




To preview the email, click Preview email.
      The first record in the table is displayed, by default. You need to save the app to preview the latest changes.


After you save the app, you can reuse the task in other bots.
Configure the Send an email task by using the settings described in the following tables.




Setting


Description



Linking
Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.





Task name


Name of the task. It must be unique within your app.



Email Type

Email type. Click Custom template.
Note: To configure an Embedded app view email,  see Send embedded app view emails from an automation.




Table name


Table referenced by the task. Select an existing table in the list. You can also select a table slice but note that if the selected slice contains a row filter, you may see failures in the task. This is because the user that triggered the automation may not have access to the row because of the slice row filter.
Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




To


List of email recipients.
Enter an email address or an expression using the Expression Assistant. Click Add to add additional email recipients.
See Add email recipients for more information.




Email Subject


Subject of the email.
Specify text, variables, and expressions. For example:

Thank you for your order!
Thanks <<[CustomerName]>> for your order!
Thanks <<[CustomerName]>> for your order on <<TODAY()>> which will arrive on <<TODAY() + 7>>

By default, a meaningful email subject is suggested.




Email Body


Body of the email.
To define the email body, do one of the following:

Enter the email body, including text, images, variables, and expressions.
Leave this setting blank and specify an Email Body Template (see below).
Leave this setting and Email Body Template blank to use the default content.

Note: The Email Body Template setting (if specified) takes precedence over this setting.
By default, the Email Body includes data values from the added or updated row, excluding Hidden or Show type columns.




Other email parameters
Expand and customize the Advanced settings, as described below.




Setting


Description




CC


List of email recipients to carbon copy (CC).
Click Add to add an email address or an expression using the Expression Assistant. Repeat to add additional email recipients. See Add email recipients for more information.




BCC


List of email recipients to blind carbon copy (BCC).
Click Add to add an email address or an expression using the Expression Assistant. Repeat to add additional email recipients. See Add email recipients for more information.




Reply To


Email address that will receive replies to the email.
Enter an email address or an expression using the Expression Assistant. See Add email recipients for more information.
Defaults to noreply@appsheet.com



Customize "From" name
Customize the email address displayed in the From field of the email. By default, the app creator is used (for example, appcreator@gmail.com).



PreHeader


Email preheader summary text that follows the subject line when viewed in an inbox.
Specify text, variables, and expressions. For example:

Your Order
Order for <<[FirstName]>> <<[LastName]>>
Order for <<[FirstName]>> <<[LastName]>> on <<TODAY()>>

To suppress the PreHeader, enter a single space character.
Defaults to:
<<_UPDATEMODE>> to application '<<_APPNAME>>' table '<<_TABLENAME>>' by '<<_USEREMAIL>>' at <<_NOW>>
For example:
Update to application 'Workflow' by 'Julie Morgan' at 8/26/2021 6:12:28 PM
Note: <<USEREMAIL>> is omitted if your app does not require authentication.
See also Built-in variables.




Email Body Template


Template to use for more precise control of the email body. See Use templates in a bot and the Email Body description (above).




Attachment settings
Expand and customize the Attachment settings, as described below.




Setting


Description




Attachment Content Type


Content type of the email attachment file.
Valid content type values include:

CSV
HTML
ICS_Calendar
JSON
PDF
XLSX (Microsoft Excel)
XML

Defaults to PDF which is the most often used content type for email attachments.




Attachment Template


Template to use for more precise control of the email attachment. See Use templates in a bot and Archive email attachments for more information.




Attachment Name


Name of attachment.
Specify text, variables, and expressions. For example:

My Attachment
My Attachment for <<CustomerName>>
My Attachment for <<CustomerName>> from <<_APPNAME>> on <<TODAY()>>

See Archive email attachments and How the archive attachment filename if formed for more information.




Attachment Archive


Attachment file archive configuration.
Valid values include:

AttachAndDoNotArchive - Attach file to email without archiving it.
AttachAndArchive - Attach file to email and archive it.
ArchiveAndDoNotAttach - Archive the file but do not attach it to the email. This option is useful if the attachment file is too large to include as an attachment. Instead, the email body can include the URL or Weblink to the archived attachment file.

See Archive email attachments for more information.




Attachment File Store


File system where attachments are stored.
When set to Default (the default setting), the attachment file is archived to the authentication provider file system. For example, if your authentication provider is Google, the attachment file is archived to Google Drive. If your authentication provider is Dropbox, the attachment file is archived to Dropbox.
Notes:

If Smartsheet is your authentication provider, AppSheet archives the attachment file to Google Drive as Smartsheet does not have a file system. If you use Smartsheet and wish to archive attachment files, you must include Google as a data source, as described in Use multiple data sources.
Enterprise pricing plan customers can archive attachment files to a Cloud Object Store.

See Archive email attachments for more information.




Attachment Folder Path


Folder path where attachments are saved relative to the default app folder.
Specify text and expressions. For example:


MyAttachments/MyPurchaseOrders


<<CONCATENATE("MyAttachments/PurchaseOrdersByMonth_", YEAR(NOW()), "_", MONTH(NOW()))>>:


In the second example, email attachment files would be stored in a separate folder, based on the month. For example: MyAttachments/PurchaseOrdersByMonth_2019_02
Defaults to Attachments.
See Archive email attachments and How the archive attachment folder name if formed for more information.




Disable Timestamp?


Toggle to indicate whether to append a timestamp to attachment filenames. Appending the timestamp will ensure the filenames are unique.
The timestamp contains the date and time at which the attachment file was created, formatted as follows: yyyyMMdd_HHmmss_fff indicating year, month, day, hours, minutes, seconds, and milliseconds. For example:
MyAttachmentName20190207_133355_804.pdf
If you disable the timestamp, you must ensure that every attachment filename is unique. Otherwise, the attachment files may be overwritten. For example, if you are archiving your attachment files to Google Drive and you disable the timestamp, only the most recent attachment file will be available. Older attachment files with the same name will have been overwritten.
Disabled (timestamp is appended) by default.
See Archive email attachments for more information.




Attachment Page Orientation


Page orientation of the attachment. Valid values include: Portrait and Landscape
Note: This setting is available only if you set Attachment Content Type to PDF.




Attachment Page Size


Page size. Select a standard size or select Custom and enter the Attachment Page Width and Attachment Page Height in millimeters.
Note: This setting is available only if you set Attachment Content Type to PDF.




Use Custom Margins


Toggle to indicate whether you want to specify custom margins for the attachment.
If disabled, the task uses default margins. If enabled, customize the margins using the additional settings displayed, as described below.
Note: This setting is available only if you set Attachment Content Type to PDF.
Disabled by default.




Other Attachments


Other attachment files such as drawings, images, signatures, thumbnails, or files.
Click Add to add other attachments to the email. Specify text or expressions. Repeat to add additional attachment files.
See Add other attachments to an email for more information.




If you enable Use Custom Margins, customize the attachment page margins using the additional settings displayed, as described below.




Setting


Description


Default (if applicable)




Attachment Page Margin Top


Top margin for the attachment in points.


0




Attachment Page Margin Right


Right margin for the attachment in points.


0




Attachment Page Margin Bottom


Bottom margin for the attachment in points.


0




Attachment Page Margin Left


Left margin for the attachment in points.


0




Advanced
Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





Add email recipients

If you receive an OutgoingEmailAllowListViolations error in Audit History, then either your team admin has restricted the recipient list for outgoing mail or sending email to external recipients is not allowed by policy, as described in Set the AppSheet Core security setting. To address this issue, contact your team administrator to adjust the restricted recipient list or contact your Workspace administrator for assistance with turning off the AppSheet Core Security setting.

The following provides guidelines for adding the email recipients in To, CC, and BCC when configuring the email (described above):


Enter a specific email address, such as JohnHughes@gmail.com.
      If an email address contains special characters such as hyphen or plus, you must enclose the email address in quotes. For example: "John-L-Hughes@gmail.com"


Use a field in a record that is being modified.
      For example, when a new order is received, you can send an email to the customer who created the order. In this scenario, enter the name of the field that contains the customer's email address. For example, if the CustomerEmail field in the order record contains the customer's email address, enter the following expression: [CustomerEmail]


Use a field in a record that is referenced by the record being modified.
      For example, when a new order is received, you can send an email to the customer who created the order. Each order record might contain a reference to a customer record that contains the customer's email address. In this scenario, enter the name of the order record field that references the customer record followed by the name of the customer record field that contains the customer's email address. For example, if the order record field that references the customer record is CustRef and the name of the customer record field containing the customer's email address is CustEmail, specify the customer's email address by entering the expression: [CustRef].[CustEmail]


Use an entire column in another table.
      For example, each time a new order is added, you can send an email to all of the people defined in another table. In this scenario, enter the name of the table followed by the field that contains the email address. For example, if you create a table called PeopleToInform that contains two columns, Name and EmailAddress, each time a new order is added, you can send email to all of the people in the PeopleToInform table by entering the expression: PeopleToInform[EmailAddress]


Use selected rows in another table.
      For example, each time a new order is added, you can send an email to all of the people in the sales department. In this scenario, enter the name of the table followed by the field that contains the email address, and set the department field to Sales. For example, if you create a table called PeopleToInform that contains three columns, Name, EmailAddress, and Department, each time a new order is added, you can send an email to all of the people in the PeopleToInform table who are in the Sales department by entering the expression: SELECT(PeopleToInform[EmailAddress], ([Department] = "Sales"), TRUE)


Note: While the app is in test mode (that is, you have not run a deployment check and deployed the app), any messages sent will be sent to the app creator only. To confirm the list of email recipients that will be included in To, CC, and BCC, check the Audit History, as described in How do I determine whether an email was delivered?
Examples of sending an email from an automation
The following provide examples of sending an email from an automation.
Send email when a row is updated to have a specific column value
You can create a workflow rule that sends an email when a row is updated to have a specific column value. For example, you might send an email when the Status column in the ServiceRequests row is updated to contain the value Active.

AND(
  ("Active" = [_THISROW_AFTER].[Status]),
  ([_THISROW_AFTER].[Status] <> [_THISROW_BEFORE].[Status])
)


In this expression, note the use of [_THISROW_BEFORE] and [_THISROW_AFTER]. These are system-provided references that refer to the state of the row before and after the change was made, respectively. This is really useful in order to check if the value of a field changed from one value to another.
Because [_THISROW_BEFORE] and [_THISROW_AFTER] are references, you use a dereference expression to access the value of a specific column in the referenced row.
Send an email only after adding a parent record and all of its child records
When you add a parent record along with one or more child records, AppSheet first adds the parent record, then each of the child records. This can make it difficult to trigger an automation event only after all of the child records have been added. 
You can can use the following technique to ensure that all parent and child records are added before the event is triggered. This technique uses the Form Saved event to trigger a data-change action which triggers the event only after the child records have been added.
Do this as follows:


The child table must contain a Ref field to the parent table. Enable the Is a part of? property of the Ref field. This makes it possible to add child records when the parent record is added.


Add a Text field to the parent table. Call the field Status and set its Initial value property to "" (blank). The Status column controls whether the data change event triggers.


Create a data-change action for the parent table which sets the Status column's value to "Run".


Create a second data-change action for the parent table which sets the Status column's value to "" (blank).


Create a composite action for the parent table that invokes the two data-change actions above. This composite action invokes the first data-change action to set the Status column's value to "Run", and the second data-change action to set the Status column's value to blank. These two data changes will be sent to the server as separate updates. The first update triggers the automation event, while the second update prevents further updates from triggering the automation event.


Go to the UX > Views tab. Click Show system views. Select the form for the parent table. Expand Behavior. Find Event Actions and set its Form Saved property to the compositive action created in the previous step.


Set your data change event to Updates only. Set its Condition property to: [Status] = "Run"


Prevent app creators from adding email attachments in automations
Prevent app creators from adding email attachments in automations by using the "Restrict Automation Email Attachments" policy, as described below. For more information, see Define governance policies.
To app creators from adding attachments to emails sent from automations:

Select My account > Policies.
Click + Account Policy or + Team Policy to add an account or team policy, respectively.
Select Restrict Automation Email Attachments from the Policy Template drop-down.
Click Next.
The policy is preconfigured for you. You can modify any of the field values. See Add a predefined policy for a description of each field. 
    
Important: If you modify the Condition field, ensure that you retain the functionality defined below:
AND(ISBLANK([AttachmentTemplate]), ISBLANK([OtherAttachmentList]))


Click Save.

   Was this helpful?How can we improve it?YesNoSubmit   

 Send embedded app view email from an automationConfigure an automation bot to send an embedded app view email (or dynamic email) to one or more recipients based on an event, as described in the following sections:

What is an embedded app view email (dynamic email)?
Get started with embedded app view email
Steps to send embedded app view email from a bot
Create a view for the embedded app view email
Configure the embedded app view email
Request a quota increase for cross-domain embedded app view emails
Current limitations with embedded app view email

See also Troubleshoot embedded app view email.
What is an embedded app view email (dynamic email)?
An embedded app view leverages dynamic email in Gmail (using AMP) and enables users to interact directly with your app in the email rather than clicking out to view the AppSheet app in a separate window.
Here's a quick demo:

For example, if an employee sends a request for a new chair (the event), you can configure the bot to send an email to their manager requesting approval before fulfilling the request.

With an embedded app view email, the manager can add notes and approve the request directly in the email, as shown in the following example:

To view the embedded app view email content, email recipients must be app users. If there are multiple email recipients, emails are sent individually to each recipient from amp-noreply@appsheet.com.

Email recipients that interact with embedded app view email content are counted towards your app usage.
 
Embedded app view emails are interactive for 30 days. After 30 days, the embedded app view in the email will no longer render and users will have to navigate to the app to edit fields.

If the embedded app view content is out of date, recipients are notified and can click the Refresh button at any time to refresh the view, as shown below:

Get started with embedded app views
Watch the following introductory video or read the blog to learn more about embedded app view email (dynamic email) with AppSheet.

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

Bringing AppSheet apps into Gmail
Get started with embedded app view email using the sample app:

Try out the Task Manager app.
    Click New Task to add and save a task. You will receive an embedded app view email in your Gmail inbox where you can directly update the task status.
To see how the embedded app view email task is created, check out the sample app.

Steps to send an embedded app view from a bot

Before you begin: Review current limitations with embedded app view email.

To send an embedded app view from a bot, perform the following steps:

Create a view for the embedded app view email.
Configure the embedded app view email.

See also Troubleshoot embedded app view email.
Create a view for the embedded app view email
To enable users to interact directly with the content in the email message, you can add editable fields to the view that you use in the Send an email task.
The following views are supported for use with embedded app view email:




View


Description




Detail


Displays and enables you to edit details for the current record.
To add editable fields to your Detail view, add one or more Quick edit columns. For details, see Quick Edit.
Each editable field is validated and saved as you move focus, and may trigger another bot.
Supported data column types
A subset of data column types are not currently supported for use with embedded app view email, such as File or Image column types. For the complete list of data column types that are not supported with embedded app view email, see Current limitations with embedded app view email.
Supported configuration properties
The following Detail view configuration properties are supported for use in embedded app view email:

Main image
Header columns
Quick edit columns
Column order





Form


Captures input from users. All fields provided in the Form view are editable in the embedded app view email and validated when the user submits the form.
Supported configuration property
The following Form view configuration property is supported for use in embedded app view email: Column order




Configure the embedded app view email
Add and configure the Send an email task by performing the following steps:


Add the Send an email task to a bot, as described in Add a task to a bot.


Configure the Send an email task by using the settings described in the tables below.


When you are done, save the app by selecting one of the following:

Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




To preview the embedded app view email, click Preview email body.
      The first record in the table is displayed, by default.You need to save the app to preview the latest changes.


After you save the app, you can reuse the task in other bots.
Configure the Send an email task by using the settings described in the following tables.




Setting


Description



Linking

 


 Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.








Task name


Name of the task. It must be unique within your app.



Email Type

Email type. Click Embedded app view.
Note: To configure a Custom template email, see Send an email from an automation.




Table name


Table referenced by the task. Select an existing table in the list. You can also select a table slice but note that if the selected slice contains a row filter, you may see failures in the task. This is because the user that triggered the automation may not have access to the row because of the slice row filter.
Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




To


List of email recipients.
Enter an email address or an expression using the Expression Assistant. Click Add to add additional email recipients.
See Add email recipients for more information.




Email Subject


Subject of the email.
Specify text, variables, and expressions. For example:

Thank you for your order!
Thanks <<[CustomerName]>> for your order!
Thanks <<[CustomerName]>> for your order on <<TODAY()>> which will arrive on <<TODAY() + 7>>

By default, a meaningful email subject is suggested.




Email Body


Body of the email.
To define the email body, do one of the following:

Enter the email body, including text, images, variables, and expressions.
Leave this setting blank and specify an Email Body Template (see below).
Leave this setting and Email Body Template blank to use the default content.

By default, the Email Body includes data values from the added or updated row, excluding Hidden or Show type columns.



App view to embed in email body

View to embed in the email body for Embedded app view emails. Select the Detail or Form view from the drop-down list. See Create a view for the embedded app view email.
Only Detail and Form views will be displayed in the list. If you select a view that contains a configuration property or data column type for an editable field that is not supported for embedded app view email, a warning is displayed in the editor. For more information, see Current limitations with embedded app view email.
Note: If you add a view to an embedded app view email and subsequently edit the view, the embedded app view email is refreshed in the recipients' Gmail inbox. However, if you include configuration properties or data column types that are not supported for embedded app view email, an error message is displayed to current email recipients and in the AppSheet Admin UI to indicate that the embedded app view email task configuration is no longer valid.




Advanced settings
Expand and customize the Advanced settings for embedded app emails, as described below.




Setting


Description



Customize "From" name
Customize the email address displayed in the From field of the email. By default, the app creator is used (for example, appcreator@gmail.com).



Email Footer


Content that appears at the bottom of the email. For example:
This email is from Simple Inventory Manager. Our address is Company XYZ, 1354 Wallaby Way Cleveland, OH 46753




Request a quota increase for cross-domain embedded app view emails
Embedded app view emails that are sent to recipients that are not in the app creator's domain are called cross-domain embedded app view emails. This domain is based on the default email connected to your account.
Each app creator can send up to 50 cross-domain embedded app view emails per day. After this daily quota is met:

Your Send an email task will no longer send embedded app view emails to recipients outside of your domain.
If you have a public domain linked to your account (for example, @gmail.com), after the quota is met you will no longer be able to send embedded app view emails at all.
If you are using a non-public domain (that is, not @gmail.com), embedded app view emails will continue to send for in-domain recipients.

The following table summarizes the behavior when using different types of email domains.




Type of email domain


In-domain emails


Cross-domain emails




Non-public domain (custom domain)


Embedded app view emails are sent regardless of quota


Embedded app view emails are not sent after daily quota is met




Public domain (for example, @gmail.com)


N/A (all embedded app view emails sent from public domains are considered cross-domain)


Embedded app view emails are not sent after daily quota is met




 
If you wish to request a quota increase for your daily cross-domain embedded app view emails, contact our support team through the support form and provide the following information:

Short description of your use case.
How many cross-domain embedded app view emails will you be sending per day? (An estimate is fine.)
How many different domains will you be sending embedded app view emails to? (Provide a list.)

Current limitations with embedded app view email
The following table summarizes the current limitations with embedded app view email.




Feature limitation


Description




Mail client (Gmail only)

Embedded app view email is supported with Google Gmail clients only. If accessed using another client, the recipient will need to navigate to the app to edit the contents.


Maximum email size limit
Embedded app view email supports a maximum email size limit of 200 KB. If the maximum size limit is exceeded, the embedded app view email will render as a static email. 



View types (Detail, Form)


The following views are supported in embedded app view email:

Detail view
Form view





Detail view limitations


The following Detail view configuration properties are supported for use in embedded app view email:

Main image
Header columns
Quick edit columns
Column order





Form view configuration properties


The following Form view configuration property is supported for use in embedded app view email: Column order
In addition to setting the order of columns, Column order enables you to filter out unsupported column types for embedded app view email without having to create a slice.




Column type limitations


The following data column types are not supported as editable fields in an embedded app view email:

ChangeCounter
ChangeLocation
ChangeTimestamp
Color
Drawing
File
Image
Price
Progress
Show
Signature

In addition, LongText fields are rendered as Text fields in an embedded app view email.




Show column types


Show column types are supported in embedded app view email. However, setting the Video category will display a Play video button, rather than embedding the video directly in the email.

        See Customize input forms for more information about using Show column types.




Action limitations


Currently only the following action types are supported:

Data: set the values of some columns in this row
Data: add a new row to another table using values from this row





Navigation to other views using actions (not supported)

Navigating to other views using actions from an embedded app view email is not yet supported.



CONTEXT("View") and CONTEXT("ViewType") 
        functions (not supported)

CONTEXT("View") and CONTEXT("ViewType") functions are not supported for embedded app view emails. The server is unaware of the view currently visible to the user, so cannot provide the view name or type.



Sending embedded app view emails to Google Groups

Sending embedded app view email to Google Groups is not currently supported. If you include a Google Group as a recipient on an embedded app view email, the dynamic portion of the email will not render and users will have to click a link to navigate to the app to view and edit fields.



Forwarding embedded app view emails

If you forward an embedded app view email, the dynamic portion of the email will no longer render and users will have to click a link to navigate to the app to view and edit fields.



Time limitation (30 days)

Embedded app view email are interactive for 30 days. After 30 days, the embedded app view in the email will no longer render and users will have to click a link to navigate to the app to view and edit fields.



   Was this helpful?How can we improve it?YesNoSubmit   

 Archive email attachmentsArchive email attachments as described in the following sections:

Configure the archive email attachment properties
How the archive attachment filename is formed
How the archive attachment folder name is formed
How the complete archive folder and file path are formed
How the archive attachment file URL is formed
Use archive attachment expression variables in templates
View the archive attachment in Audit History

Configure the archive email attachment properties
When sending an email, configure the following archive email attachment properties. For complete details, see Send an email from an automation.

Attachment Archive - Select whether to attach a file to an email without archiving, attach a file to an email and archive it, or archive a file without attaching it to an email (useful for large files).
Attachment Content Type - Select the content type of the email attachment file.
Attachment File Store - Specify the file system where attachments are stored.
Attachment Folder Path - Specify the relative folder where attachments are saved within the file system.
Attachment Name - Enter the name of the attachment.
Attachment Template - Use a template for more precise control of the email attachment. See Use templates in an automation.
Disable Timestamp - Indicate whether to append a timestamp to the attachment file.

If enabled, email attachments are archived before the email is sent.
See also Archive email attachments to Microsoft SharePoint.
How the archive attachment filename is formed
The archive attachment filename is formed by combining the Attachment Name value with spaces removed, the timestamp (if Disable Timestamp? is disabled) formatted as yyyyMMdd_HHmmss_fff, and the file extension for the Attachment Content Type.
For example, if the Attachment Name is set to MyAttachmentName and the Attachment Content Type is PDF:

If Disable Timestamp? is disabled, the archive attachment filename is: MyAttachmentName20190207_133355_804.pdf
If Disable Timestamp? is enabled, the archive attachment filename is: MyAttachmentName.pdf

How the archive attachment folder name is formed
The archive attachment folder name in which the archive attachment file is stored is formed using the default app folder and the Attachment Folder Path property.
To configure the default app folder, select Info > Properties, expand App Properties, and enter a value in the Default app folder property.
Examples:
If if the default app folder is /appsheet/data/MyApp-24403/MyDefnFolder1 and Attachment Folder Path is set to MyFolderA/MyFolderZ, then the archive folder name is:

/appsheet/data/MyApp-24403/MyDefnFolder1/MyFolderA/MyFolderZ
If the default app folder is /1track/data/MyApp-24403 and Attachment Folder Path is not defined (defaults to Attachments), then the archive folder name is:

/appsheet/data/MyApp-24403/Attachments

How the complete archive attachment folder and file path are formed
The complete archive folder and file path is formed by combining the archive attachment folder name with the archive attachment filename.
Examples:
If the archive folder name is /appsheet/data/MyApp-24403/Attachments and the archive file name is ChangeReport20190207_133355_804.pdf, then the archive file and folder name is:

/appsheet/data/MyApp-24403/Attachments/ChangeReport20190207_133355_804.pdf
If the archive folder name is /appsheet/data/MyApp-24403/MyAttachments/PurchaseOrdersByMonth_2019_02 and the archive file name is PurchaseOrder20190207_133355_804.pdf, then the archive file and folder name is:

/appsheet/data/MyApp-24403/MyAttachments/PurchaseOrdersByMonth_2019_02/PurchaseOrder20190207_133355_804.pdf

How the archive attachment file URL is formed
The archive attachment file URL is formed as follows:

https://www.appsheet.com/template/getappfileurl?appName=$YOUR_APP_NAME&fileName=$YOUR_ATTACHMENT_FILENAME

Where:


$YOUR_APP_NAME specifies the name of your app.


$YOUR_ATTACHMENT_FILENAME specifies the Attachment Folder Name followed by the Archive File Name. You can omit the Default app folder name as calls to www.appsheet.com/template/getappfileurl automatically prepend the default app folder name.


Note: The $YOUR_APP_NAME and $YOUR_ATTACHMENT_FILENAME values must be URL encoded if they contain reserved or unsafe URL characters.
For example, if $YOUR_APP_NAME is MyOrderApp-432567 and $YOUR_ATTACHMENT_FILENAME is MyAttachments/MyPdfReport.pdf, then the URL is:

https://www.appsheet.com/template/getappfileurl?appName=MyOrderApp-432567&fileName=MyAttachments%2FMyPdfReport.pdf

In this example, the slash (/) in the $YOUR_ATTACHMENT_FILENAME is URL encoded as %2F.
Use archive attachment expression variables in templates
The following expression variables for archive attachment files are available and can be used in your Email Body or email attachment templates.




Expression variable


Description




_ATTACHMENTFILENAME


Archive attachment filename.




_ATTACHMENTFILE_URL


Archive attachment file URL.




_ATTACHMENTFILE_WEB_LINK


Link to the archive attachment file. The Attachment Name is used as the link text.




View the archive attachment in Audit History
View the archive attachment file and folder names by checking the audit history log.
Customize the dashboard settings and look for an audit record similar to the following:

"EmailAttachment": "Name: 'ScheduledReport.pdf' Archive: AttachAndArchive FileName: 'MyOrderApp-432567/Attachments/ScheduledReport20190201_184450_854.pdf'",
The FileName value indicates the file and folder where the attachment was archived.
Note: You may need to wait for up to five minutes for the audit record to appear. AppSheet groups audit records before writing them to the audit history log to reduce overhead. This can result in a delay before an audit record appears in the audit history. If you don't see an audit record, click Search periodically to refresh the audit history log.
   Was this helpful?How can we improve it?YesNoSubmit   

 Archive email attachments to Microsoft SharePointArchive your email attachments to Microsoft SharePoint by setting a SharePoint folders as your Default App Folder. This requires that you determine the SharePoint folder location.
To archive email attachments to Microsoft SharePoint:


Determine the SharePoint folder location:

Go to Microsoft SharePoint.
Select a SharePoint site and optionally a folder within that site.
Create an Excel workbook in the SharePoint folder.
Open your existing AppSheet app in the app editor.
Add a table.
In the Get data from dialog, select your Microsoft provider.
Select SharePoint.
Browse to your SharePoint site and folder.
Select the Excel workbook you added earlier.
Select your newly added table in the Data panel.
Click Table settings  in the table header
Under Storage, copy the first part of the Source Id property.
        This value starts with SHAREPOINT_SITE_ID. If you specified a folder, include the folder name, but omit the worksheet file name.
Delete the newly added table, if desired.


Go to Settings > Information.
Under App Properties, enter the SHAREPOINT_SITE_ID value (copied in step 1l) into the Default app folder property.


We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor


To archive email attachments to Microsoft SharePoint:


Determine the SharePoint folder location:

Go to Microsoft SharePoint.
Select a SharePoint site and optionally a folder within that site.
Create an Excel workbook in the SharePoint folder.
Open your existing AppSheet app in the app editor.
Add a table.
In the Get data from dialog, select your Microsoft provider.
Select SharePoint.
Browse to your SharePoint site and folder.
Select the Excel workbook you added earlier.
Go to the Table > Data tab.
Select your newly added table.
Expand Storage.
Copy the first part of the Source Id property.
              This value starts with SHAREPOINT_SITE_ID. If you specified a folder, include the folder name, but omit the worksheet file name.
Delete the newly added table, if desired.


Go to the Info > Properties tab.
Expand App Properties.
Enter the SHAREPOINT_SITE_ID value (copied in step 1m) into the Default app folder property.






   Was this helpful?How can we improve it?YesNoSubmit   

 Add other attachments to an emailAdd other attachments to an email by setting the Other Attachments property when configuring an email, as described in the following sections.

Supported file types for other attachments
Set the Other Attachments property
How AppSheet locates other attachment files
Restrict the other attachment files in your app
Secure other attachment files

AppSheet simply attaches the files you specify to the email; it does not replace variables in the email attachments as with an email attachment template.
Supported file types for other attachments
You can attach a wide variety of file types. For example, it is common to attach photographs, drawings, PDF files, or Microsoft Office files.
AppSheet supports the following file types for other attachments:

Images
Thumbnails
Signatures
Drawings
PDF files
Microsoft Word files
Microsoft Excel files
CSV files
JSON files
XML files
Files created by a preceding Create a new file task
Other types of files

Set the Other Attachments property
When configuring the Other Attachments property, you can specify the following:

Filename, such as MyPhoto.jpeg or MyWordFile.docx.
Simple column expression, such as [ImageColumn] or [FileColumn] where the filename is stored in the column.
More complex expression, like the dereference expression [ProductRef].[ProductPhoto]. In this example, the filename is stored in the [ProductPhoto] column.
It is common to store the images for a parent table in a child table. This allows each parent record to have zero, one, or more child images. Each child record contains an image field and a Ref field to the parent record. The parent record contains a Reverse Ref field containing the key values of the child image records. For example, if the Reverse Ref field in the parent record is called Related Images and the image field in the child record is called Image, then you can include the child images as attachments by specifying [Related Images][Images].

You can attach a file created by a previously invoked Create a new file task in the same bot or a prior bot.
How AppSheet locates other attachment files
AppSheet expects your other attachment files to reside in a specific location, based on your authentication provider and whether it can store files.
Authentication providers that can store files
For Google, Microsoft, Dropbox, Box, and other authentication providers that can store files, AppSheet checks for other attachment files in the following locations:

Folder that contains your bot
    If your other attachment specifies a file name without a folder name, AppSheet looks for the file within the folder containing your bot. If your other attachment specifies both folder and file names, AppSheet looks for the folder and file path within the folder containing your bot.
Default folder path
    Define the default folder path by navigating to My Account > Settings > App Creator Settings and updating the Default folder path property. For example, if the default folder path is Files and the filename is MyFileName.pdf, the path is: Files/MyFileName.pdf

    If the other attachment specified a folder path, include it in the value. For example: Files/MyFolderPath/MyFileName.pdf

Files that you create using the Create a new file task will be saved to the default folder path. For example, if the default folder path is Files and the filename is MyFileName.pdf, the path is: Files/MyFileName.pdf
If the Create a new file task specified a File Folder Path, include it in the value. For example: Files/MyFolderPath/MyFileName.pdf
Authentication providers that cannot store files
For SQL Server, MySQL, SmartSheet, and other authentication providers that cannot store files, AppSheet locates other attachment files in the main cloud file system associated with the app creator's primary AppSheet account, such as Google Drive, Dropbox, Office 365, or Box.
Define the default folder path by navigating to My Account > Settings > App Creator Settings and updating the Default folder path property.
For example, if the default folder path is Files and the filename is MyFileName.pdf, the path is: Files/MyFileName.pdf
If the other attachment specified a folder path, include it in the value. For example: Files/MyFolderPath/MyFileName.pdf
Restrict the other attachment files in your app
Restrict the other attachment files that users can add to your app, as follows:

Create an EnumList field containing the names of the other attachments your app user can add to your app. For example, create an EnumList field named Attachments and define the following values: PDF1, PDF2, and PDF3.
When configuring an email, specify the following expression in the Other Attachments property:LIST(IF(CONTAINS([Attachments], "PDF1"),"PDF1.pdf","")) + LIST(IF(CONTAINS([Attachments], "PDF2"),"PDF2.pdf","")) + LIST(IF(CONTAINS([Attachments], "PDF3"),"PDF3.pdf",""))

Secure other attachment files
Your other attachment files must be secured properly in order for AppSheet to retrieve them. Normally, you must secure your other attachment files so that the app owner can read them as the app is running under the identity of the app owner.
In the rare case when your app is using a private table, you must secure your other attachment files so that the current app user can read them. This is necessary because when private tables are used, the app is running under the identity of the app user rather than the app creator. When using private files, AppSheet looks for the other attachments relative to the private user's automation process. As a result, the other attachment files from each private user are unique to that user.
   Was this helpful?How can we improve it?YesNoSubmit   

 Enable opt in/out and unsubscribeWhen sending an email from your app, especially to the public, it is important to provide users with options to do the following:

Opt in to or out of email notifications
    For example, an opt-in toggle displayed clearly in your app.
Unsubscribe if users want to stop receiving emails 
    For example, you might provide a link in your email that navigates to an unsubscribe view in your app.

Email services are sensitive to complaints about spam that does not require opting in or allow a user to unsubscribe. Failure to implement these options may result in your emails being blocked by an email service provider.
   Was this helpful?How can we improve it?YesNoSubmit   

 Sample email templates
The sample templates in this section are all based on the Order Capture sample app. This sample includes both an email body template and an attachment template. The variables in the templates refer to the column values in the Order Capture sample app.
Review the following sample email templates:

Template with column name variables
Template with expression variables
Templates with embedded templates
Order template in list format
Order template in table format
Customer template in list format
Customer template in table format

See also Use templates in a bot.
Template with column name variables
The template with column name variables sample displays the column values from a row in the Customers table. The template contains formatted text and column name variables. Each column name variable specifies the name of one column value from the Customers row.
The template produces the following output:

Template with expression variables
The template with expression variables sample contains both column name variables and expressions. It displays column values from the Orders table, column values from its parent Customers table, and computed values from its child Order Details table.
It displays the Customer Name column value using the following expression:

Customer Name: <<[Customer Name].[Name]>>


[Customer Name] is the Customer Name reference column value in the Orders table. It refers to the parent Customers row. [Customer Name].[Name] displays the Name column value from the parent Customers row.
This template computes the total value of all child Order Details rows using the following expression:

SUM(SELECT(Order Details[Total], [Order Id] = [_THISROW].[Order Id]))
The expression computes the sum of all Order Details rows having an Order Id column value that matches the Order Id in the current Orders row. That is, it computes the sum of all Order Details rows for this Orders row.
Template with embedded templates
You can display a hierarchy of rows using embedded templates. For example, you can display a single Customers row. Beneath the Customers row, you can display all of its child Orders rows. Beneath each Orders row, you can display all of its child Order Details rows.
Each embedded template starts with <<Start:StartExpression>> and ends with <<End>>. The Start expression following the colon yields the list of rows to be formatted using the embedded template. The <> and <>elements must match, much like parentheses do within an arithmetic expression.
Order template in list format
The Order template in list format sample is used when an Orders row is updated.
It contains templates that display the following:

Single parent Customers row for the updated Orders row displayed in list format.
Single updated Orders row displayed in list format.
List of child Order Details rows for the updated Orders row displayed in list format.

Order template in table format
The Order template in table format sample is used when an Orders row is updated. It's like the previous template, but displays the Order Details rows in table format. It contains templates that display the following:

Single parent Customers row for the updated Orders row displayed in list format.
Single updated Orders row displayed in list format.
List of child Order Details rows for the updated Orders row displayed in table format.

The Order Details rows are displayed in table format by the following portion of the template. It contains a header row template element, a data row template element, and a trailer row template element. It produces a table containing one header row, one or more data rows, and one trailer row.
 

The first cell in the data row template element contains a <<Start:StartExpression>> followed by an expression yielding the first data value to be displayed. The Start expression following the colon yields the list of child rows to be formatted using the data row template element. In this case, the Start Expression yields the list of child Order Details rows for the parent Orders row. The data row template element values between <> and <> are used to format each child Order Details row returned by the start expression.
Because the start expression refers to the Order Details table, the variables within the data row template element refer to column values in the Order Details table. For example, <<Quantity>> refers to the Quantity column value of that table. <<[Product Id].[Product Name]>> dereferences Product Id (a Ref column that points into the Products table) to retrieve the corresponding Product Name value (from the Product table).
The last cell in the data row template element contains the name of the last data column value to be displayed. It is followed by <<End>>.
A trailer row template element can be used to display summary information. Here we display the total value of all preceding Order Details rows. The outer enclosing template isn't shown here, but it displays Orders rows. Hence, <<Order Total>> refers to the Order Total column value in the Orders table.
Customer template in list format
The customer template in list format sample is used when a Customers row is updated.
It contains templates that display the following:

Single updated Customers row displayed in list format.
All child Orders row for the updated Customers row displayed in list format.
All child Order Details rows for the parent Orders rows displayed in list format.

The part of the template that displays Orders rows starts with this expression:

Start:ORDERBY([Related Orders By Customer Name], [Order Date])


<<Start:StartExpression>> signifies the start of an embedded template. The start expression following the colon yields a list of child rows to be formatted using the embedded template. The embedded template is terminated by <<End>>. Between <> and <>, include the formatted text, variables, and expressions to format each Orders row.
The start expression above includes an ORDERBY() to sort the child Orders rows in ascending (oldest-to-newest) order by the Order Date column value. If order wasn't important, you could omit ORDERBY() and simply specify:

Start:[Related Orders By Customer Name]

  You can limit the number of rows displayed by using a TOP() expression with an ORDERBY() expression. The first argument to the TOP() expression must be an ORDERBY() expression. The second argument to the TOP() expression specifies the maximum number of rows to be chosen. This second argument can be either a constant or an expression. For example:

Start:TOP(ORDERBY([Related Orders By Customer Name], [Order Date]), 3)

  You can select the child rows to display by specifying a SELECT() expression. For example, to display Orders having an Order Status value of Open, specify this SELECT() expression:

SELECT([Related Orders By Customer Name][Order Id], [Order Status] = "Open")

  This template produces the following output:

Customer template in table format
The customer template in table format is used when a Customers row is updated.
It contains templates that display the following:

Single updated Customers row displayed in list format.
All child Orders row for the updated Customers row displayed in list format.
All child Order Details rows for the Orders rows displayed in table format.

A Google Docs table is used to display the Order Details rows. The table may contain zero or more header rows, one data row, and zero or more trailer rows.
The Order Details rows are displayed in table format by the following portion of the template. It contains a header row template element, a data row template element, and a trailer row template element. It produces a table containing one header row, one or more data rows, and one trailer row.

The first cell in the data row template element contains a <<Start:StartExpression>> followed by an expression yielding the first data value to be displayed. The Start expression following the colon yields the list of child rows to be formatted using the data row template element. In this case, the start expression yields the list of child Order Details rows for the parent Orders row. The data row template element values between <> and <> are used to format each child Order Details row returned by the start expression.
Because the start expression refers to the Order Details table, the variables within the data row template element refer to column values in the Order Details table. For example, <<Quantity>> refers to the Quantity column value of that table. <<[Product Id].[Product Name]>> dereferences Product Id (a Ref column in the Order Details table that points into the Products table) to retrieve the corresponding Product Name value (from the Product table).
The last cell in the data row template element contains the name of the last data column value to be displayed. It is followed by <<End>>.
A trailer row template element can be used to display summary information. Here we display the total value of all preceding Order Details rows. The outer enclosing template isn't shown here, but it displays Orders rows. Hence, <<Order Total>> refers to the Order Total column value in the Orders table.
This template produces the following output:

   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot emailResolve the most common bot email problems using the guidance provided in the following sections. See also Send an email from a bot and Troubleshoot bots.

Why didn't my email arrive?


Successfully sending an email message from the AppSheet server does not mean that the email message was received by the recipient.
You can determine if the email was delivered to the user's email server, as described in How do I determine whether an email was delivered? (below).
If the email was delivered but the recipient cannot find it, ask them to check their spam email folder. The email may have been redirected to the spam email folder by the recipient's email filter.
The email may be not be delivered for the following reasons:

The email may have been blocked by the email service because the attachment was too large.
The customer's email server may be blocking or bouncing email messages to that recipient.
Most email servers have policies to block spam email and to block large volumes of email from a single source. These policies may reject valid system-generated emails and prevent the email from being delivered. This happens frequently.





How do I determine whether an email was delivered?

To determine whether an email was delivered, check the audit history log.
The following information will be displayed:

Email subject
Email recipient
Email sender; that is, noreply@appsheet.com
Send time in UTC
Result of operation




Why are emails only sent to the app creator?

For prototype testing (before you deploy the app), any emails sent from the app are delivered to the app creator only. This ensures that you do not inadvertently send email messages, SMS messages, or notifications, or post HTTP messages while debugging your bot.



Why is the parent record displayed but the child records are missing?


When you add a parent record along with one or more child records, AppSheet first adds the parent record, then each of the child records. If your bot is triggered when the parent record is added, it does not display the child records because they will not have not been added when the bot executes.
To resolve this, see Send an email only after adding a parent record and all of its child records.




Why is there a large gap between the preheader and the email body text?


If there is a large gap between the email preheader and the email body text, try the following:


Set all page margins to 0.


Set the Page Setup to A4






Why is the email attachment formatted incorrectly?


In your bot, you can define parameterized Google Doc templates that will be converted to PDF files and sent as attachments with the bot email. Occasionally, these attachments are not formatted identically to the original document template. To troubleshoot this problem, it is important to understand the steps used by AppSheet to process the attachment templates.
AppSheet performs the following steps when processing attachment templates:


Exports the Google Docs template to HTML.
            This conversion is lossy --- in particular, HTML does not support the concept of pagination.


Modifies the HTML by replacing all template variables and expressions in the HTML template with data values.


Converts the HTML to PDF.
            This conversion reintroduces pagination constructs (such as margins and page breaks). However, they may not match the original pagination settings.


Formatting inconsistencies can be introduced at step 1 or step 3 because neither step maintains complete document fidelity. Most commonly, the problems are introduced at step 1 and can be fixed manually, as follows:


Open the Google Docs template, export it to PDF, and view the results.
            Tweak the formatting options in the Google Docs template until it exports to PDF as required.


Open the Google Docs template, export it to HTML, and view the results.
            Tweak the formatting options in the Google Docs template until it exports to HTML as required.






Why are the images in PDF attachments too large or too small?


You can control the size of images shown in the email body or attachments. By default, columns/expressions of type Image are shown larger than columns/expressions of type Thumbnails.
You can specify a format rule to further control the size of images in your email content. In the format rule, you choose the table, one or more columns, an optional condition, and the image size (Tiny, Small, Medium, Large). See Display images, thumbnails, drawings, and signatures in templates.




How can I control when and how maps are shown in my attachment PDF?


You can control how geographic column values (Addresses and LatLongs) are shown in the email body or attachments. By default, columns/expressions of type LatLong are shown as static maps with a pin, while columns/expressions of type Address are shown as text.
You can specify a format rule to further control the size of static maps in your email content. In the format rule, you get to choose the table, one or more columns, an optional condition, and the image size (Tiny, Small, Medium, Large, or Text). Choosing Text results in the textual representation of the value being shown in the attachment. See Display Address, LatLong, and XY values in templates.



   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot embedded app view emailTroubleshoot dynamic email as described in the following sections. See also Send embedded app view email from a bot and also Troubleshoot bots.
Troubleshoot issues with interactive content
If an embedded app view email is sent successfully but the content is not interactive (that is, a static email is rendered), check the following:

Is the recipient using Gmail?
    Embedded app view email is supported with Google Gmail clients only.
Is the embedded app view email being forwarded?
    Embedded app view emails that are forwarded by either the recipient or by a mail server will render as static emails.
Does the embedded app view email exceed the maximum size limit of 200 KB?
    If the maximum size limit is exceeded, the embedded app view email will render as a static email. 
Was the embedded app view email sent to a group?
    Embedded app view emails sent to groups will render as static emails.
Is embedded app view email enabled in the Gmail client? 
    To verify and enable embedded app view email in Gmail, see Complete tasks without leaving a message. You must also ensure the Always display external images setting is enabled in Gmail. If you do not see the embedded app view email setting or it is disabled, follow the instructions below for enabling embedded app view emails for your Workspace domain.
Is embedded app view email enabled for your Workspace domain?
    To view embedded app view emails, they must be enabled for your Workspace domain. See Turn dynamic email on or off for users for instructions on how to enable embedded app view emails for your Workspace domain.
Is Gmail configured to prevent spoofing and spam?
    Check the following Gmail configurations: SPF, DKIM, and DMARC You may need to include @appsheet.com on the list of authorized servers.
Is Secure image access turned on?
    Enabling Secure image access on the Security > Options page prevents images from rendering outside of the app, such as in an email.

Troubleshoot error messages in the AppSheet editor
The following summarize the error messages that may be displayed in the AppSheet editor and how to correct them.




Error Message


Description




Unsupported view is selected


Only Detail and Form views are supported at this time. See Create a view for the embedded app view email.




Troubleshoot error message in user emails
The following summarize the error messages that may be displayed directly in user emails and how to correct them.




Error Message


Description




You do not have access to this application


Email recipient must be granted access to the app.




Row does not exist or is not accessible


Row does not exist or there is an error condition in the row or table that is preventing access.




View is out of date. Please open the application in AppSheet.


Type of view has changed since the embedded app view email was sent (for example, from a Detail to Form view).




This application associated with this email does not exist


App associated with the embedded app view email no longer exists.




This table associated with this email does not exist


Table associated with the embedded app view email no longer exists.




The view associated with this email does not exist or has been renamed


View associated with the embedded app view email no longer exists or has been renamed.




This email has expired


Embedded app view emails expire after 30 days. After 30 days, the fields will no longer be editable directly in the email and users will have to navigate to the app to edit fields.




   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot PDF email attachmentsYou can construct a bot to send an email with a PDF attachment. To do so, you use a template that includes variables that are replaced by the actual values in an updated data row.
Occasionally, the PDF produced is not identical in formatting to the original document. Problems include changes in the margins, changes in page break positions, and other such formatting issues.

  To better understand the causes for the formatting issues and how to correct them, see Why is the email attachment formatted incorrectly?
   Was this helpful?How can we improve it?YesNoSubmit   

 Send an SMS message from an automationTo send an SMS message from an automation bot, add and configure the Send an SMS task as described in the following sections:

Add and configure the Send an SMS task
Configure your SMS account
Add phone numbers
Manually create an SMS body template

Add and configure the Send an SMS task
Add and configure the Send an SMS task by performing the following steps:

Add the Send an SMS task to a bot, as described in Add a task to a bot.
Configure the Send an SMS task by setting the properties described in the following tables.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




After you save the app, you can reuse task in other bots.
Configure the Send an SMS task by using the settings described in the following tables.




Property


Description



Linking

Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.





Task name


Name of the task. It must be unique within your app.




Table name


Table referenced by the task. Select an existing table in the list. Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




Via channel


Account used to send the SMS message.
Select one of the following values:


_AppSheet_Default_SMS - Use AppSheet's Chime account. (Supported only in the US and Canada.) This is the default.

After August 31, 2023, this channel will not support MMS messages. You will have to use your own custom Twilio account to send messages with media files.



_Custom_Twilio_SMS - Use your own custom Twilio account. You will need to provide additional custom Twilio settings, as described in Use your personal Twilio account.


Note: To send the SMS message to contacts outside of the US and Canada, you must use your own custom Twilio account.
See Configure your SMS account for more information.




To


List of SMS recipients (phone numbers). Click Add to add a phone number or an expression using the Expression Assistant. Repeat to add additional phone numbers.
See Add phone numbers for more information.




Use default content?


Toggle to indicate whether you want to use the default email content or provide customized content. If enabled, the task uses default content. If disabled, customize the content using the additional properties displayed, as described below.
This property is enabled by default.




If you disable the Use default content? property, customize the content using the additional properties displayed, as described below.




Property


Description




Body


Body of the SMS message.
To define the SMS body, do one of the following:

Enter the SMS body in this property, including text, variables, and expressions.
Leave this property blank and specify a Body Template (see below).
Leave this property and Body Template property blank to use the default content.

Note: The Body Template property (if specified) takes precedence over this property.
Defaults to:
"UpdateMode: <<_UPDATEMODE>>, Application: <<_APPNAME>>, TableName: <<_TABLENAME>>, UserName: <<_USERNAME>>, At: <<_NOW>>"
Example:
"UpdateMode: Update, Application: MyAppName, TableName: MyEmployees, UserName: Adam Smith, At: 6/2/2016 12:06:50 AM"




Body Template


Template to use for more precise control of the email body. See Manually create an SMS body template and the Body property description (above).




Body Template Data Source


Data source used for the body template.




Media URLs


List of URLs that reference media files to be attached to the SMS messaeg. Media URLs can be drawings, images, signatures, thumbnails, and so on. Only GIF, PNG, or JPEG media file formats are supported. You can add up to 10 media URLs. Each media file must not exceed 5MB.
Click Add to attach drawings, images, signatures, thumbnails, or files to be attached to the SMS message. Specify text or expressions. Repeat to add additional media URLs.
Examples:

https://www.google.com/images//googlelogo_color_272x92dp.png
MyPhoto.jpeg
[MyImage]
IF([Age] < 30, [MyImage1], [MyImage2])





 
 Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





The following sections provide more information about configuring the Send an SMS task:

Configure your SMS account
Add phone numbers
Manually create an SMS body template

Configure your SMS account
AppSheet sends SMS messages via Twilio. You can use AppSheet's Twilio account (United States and Canada only) or a custom Twilio account, as described in the following sections.
Use the AppSheet Chime account
To use the AppSheet Chime account, select _AppSheet_Default_SMS in the Via channel property when configuring the Send an SMS task (as described above).


After August 31, 2023, this channel will not support MMS messages. You will have to use your own custom Twilio account to send messages with media files.


Consider the following when using the AppSheet Chime account:

The AppSheet Chime account works only in the United States and Canada.
All Chime SMS-related charges are paid by AppSheet.
You must be enrolled in an AppSheet Starter, Core, Publisher Pro, Enterprise Standard, or Enterprise Plus subscription plan.
You can send SMS messages to phone numbers located in the United States and Canada.
You cannot send SMS messages to premium-rate phone numbers having area codes that begin with 9xx.
The SMS message body may contain at most 160 characters.

Use your personal Twilio account
Sign in to your personal Twilio account to access account information and upgrade your account (if required):


Sign in to your personal Twilio account.
      If you do not have a Twilio account, complete the sign up process. It may ask you to verify a phone number. This is used for security purposes only.


After you are signed in, under Account Summary (https://www.twilio.com/console/account/settings) locate your Twilio Account SID and your Twilio Auth Token under LIVE Credentials. (View the Twilio Auth Token using the More menu.) You will need this information when configuring SMS using AppSheet.


If required, upgrade your Twilio account from a trial account by clicking https://www.twilio.com/console/billing. You can then click add funds and turn on auto renew based on your projected usage. You can also create alerts and auto recharges, as well.


Choose your Twilio phone number by navigating to https://www.twilio.com/user/account/phone-numbers/search. From here, search for a phone number that you would like to use for your account to confirm its availability. Twilio recommends searching by area code when searching for a phone number. After you find a phone number that is available click buy.


To use a your personal Twilio account, when configuring the Send an SMS task (described above), select _Custom_Twilio_SMS in the Via channel property, and customize the Twilio settings using the additional properties displayed, as described below.




Field


Description




AccountSid


Your Twilio account ID.
Available under your personal Twilio Account Summary at: https://www.twilio.com/console/account/settings




AuthToken


Your Twilio account Auth token.
Available under your personal Twilio Account Summary at: https://www.twilio.com/console/account/settings




CountryCodes


List of ISO 3166-1 Alpha-2 two-letter country codes used to validate phone numbers.
Click Add to add an ISO 3166-1 two-letter Country Code. Repeat to add two-letter country codes for each country having a To or From phone number.




From


Phone number used as the source of the SMS. Specify text and expressions.
See Add phone numbers for more information.




Consider the following when using your personal Twilio account:

All Twilio SMS-related charges appear on your personal Twilio account.
You must be enrolled in an AppSheet Starter, Core, Publisher Pro, Enterprise Standard, or Enterprise Plus subscription plan.
You can send SMS messages to phone numbers located in the countries you specify in your SMS automation rule.
For your protection, you cannot send SMS messages to premium-rate phone numbers for which higher rates are charged. For example, premium-rate phone numbers in the United States often begin with 9xx. This restriction does not apply to valid, non-premium-rate phone numbers such as those within area code 912 in the United States, for example.
The SMS message body may contain at most 1600 characters.

Add phone numbers
The following provides guidelines for adding phone numbers in the To property when configuring the Send an SMS task:


Enter a specific phone number, such as 4255551212 or +14255551212.
      To enter a phone number that contains special characters such as hyphens, parentheses, or spaces, you must enclose the phone number in quotes. For example:
"(425) 555-1212"
"425-555-1212"
"425 555 1212"


Use a field in a record that is being modified.
      For example, when a new order is received, you can send an SMS message to the customer who created the order. In this scenario, enter the name of the field that contains the customer's phone number. For example, if the CustomerPhone field in the order record contains the customer's phone number, enter the following expression: [CustomerPhone]


Use a field in a record that is referenced by the record being modified.
      For example, when a new order is received, you can send an SMS message to the customer who created the order. Each order record might contain a reference to a customer record that contains the customer's phone number. In this scenario, enter the name of the order record field that references the customer record followed by the name of the customer record field that contains the customer's phone number. For example, if the order record field that references the customer record is CustRef and the name of the customer record field containing the customer's phone number is CustPhone, specify the customer's phone number by entering the expression: [CustRef].[CustPhone]


Use an entire column in another table.
      For example, each time a new order is added, you can send an SMS message to all of the people defined in another table. In this scenario, enter the name of the table followed by the field that contains the phone number. For example, if you create a table called PeopleToInform that contains two columns, Name and Phone, each time a new order is added, you can send SMS messages to all of the people in the PeopleToInform table by entering the expression: PeopleToInform[Phone]


Manually create an SMS body template
Note: To support the use of SMS body templates, Google must be a supported data source.
Manually create an SMS template file by creating an empty text file, entering valid content, and saving the file using a .txt extension. For information about customizing the template, see Customize content using templates.
The following provides an example of an SMS body:

Congratulations <<[FirstName]>> <<[LastName]>>.
Your order for <<[Qty]*[Price]> shipped <<TODAY()>>.
<<If: [Expedited] = true>>
You order will arrive in one business day.
<<EndIf>>
<<If: [Expedited] = false>>
You order will arrive in three to five business days.
<<EndIf>>
The resulting SMS message contains the content with all variables and expressions evaluated and replaced with the appropriate values.
Note: You must ensure that the resulting SMS message length does not exceed the maximum SMS message length of 160 characters when using the AppSheet Twilio account or 1600 characters when using your personal Twilio account.
After the template file is saved to your computer, upload it to Google Drive as follows.

Ensure that the Convert uploaded files to Google Docs editor format option is disabled, as described in Upload .txt templates to Google Drive.
Open Google Drive and navigate to the Google Drive folder where you wish to upload the file.
Click New and then click File upload.
When the file open dialog appears, navigate to the template file on your computer, select the file, and click Open.

After the template file is uploaded, use it as described in Use an existing template.
Each time you modify the SMS template you must upload the template file to Google Drive. Google Drive will retain the original DocId. AppSheet will use the last uploaded version of the template file as the attachment template.
View the SMS body template
After uploading the template, click View adjacent to the template property to view the template.
Edit the SMS body template
To edit the template:

Download the template file from your data source to your computer.
Edit the template file on your computer using the text editor of your choice.
Upload the edited template file from your computer to your data source.

   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot SMS messagesResolve the most common bot SMS problems using the guidance provided in the following sections.  See also Send an SMS message from a bot and Troubleshoot bots.

Why are SMS messages only sent to the app creator?

While the app is in test mode (that is, it has not passed a deployment check), any SMS messages sent from a bot are delivered to the app creator only. This ensures that you do not inadvertently send email messages, SMS messages, or notifications, or post HTTP messages while debugging your bot.


Why are SMS messages not being sent?


The SMS message may not have been sent for several reasons. In all cases the audit history log will contain an error message describing why the SMS message was not sent.

          When you are testing your bot, be aware of the following restrictions.

SMS messages are only sent for deployed apps. If you app is not deployed, no SMS message is sent and an appropriate error is written to the Audit History. See Perform a deployment check.
SMS messages are only sent if you are on a pricing plan that supports SMS. If you are not enrolled in a pricing plan that supports SMS, no SMS message is sent and an appropriate error is written to the Audit History. Despite this, you can use the values that are logged in Audit History to verify that your SMS messages are working properly.





Why are SMS messages not being delivered?


If the audit history log indicates that the SMS message was sent but the SMS message was not delivered, and the SMS message was sent from your personal Twilio account, do the following:

Sign in to your Twilio account.
On the Home page, click Logs to view the Product Logs page.
Under Programmable SMS Logs, click Messages.
Look for the SMS message matching the values displayed in the AppSheet Audit History. This will show you whether the SMS message was delivered. If not, a Twilio error message will be displayed.






Why are SMS messages being rejected?


If you attempt to send an SMS message to a phone number that has replied with STOP to one of your previous messages, no further messages will be delivered to that user. You will not be able to send SMS messages to the phone number until the subscriber identified by the phone number responds with START.
If you are using the AppSheet Twilio account, the START message should be sent to the AppSheet SMS phone number 1 425 287 5900. (You can omit the 1 if calling from the United States.) If you are using your personal Twilio account, the START message should be sent to your personal Twilio SMS phone number.
To test the START message on an iPhone, do the following:

Open the iPhone Messages app.
Click New Message (pencil icon) at the top right of the screen
In the To field enter the SMS phone number.
          For example, enter the AppSheet Twilio account phone number 1 425 287 5900.
In the body field enter START.
Click Send (up arrow icon).

You should receive a response similar to the following:

You have successfully been re-subscribed to messages from this number. Reply HELP for help. Reply STOP to unsubscribe.



Why is the SMS <<_ROW_WEB_URL>> not working?

Ensure that the SMS message length does not exceed the 160 character message length limit when using the AppSheet Twilio account or the 1600 character message limit when using your personal Twilio accounts. If the SMS message length exceed the limit, the SMS message will be truncated which may truncate the URL.



   Was this helpful?How can we improve it?YesNoSubmit   

 Send a notification from an automationPush notifications are a direct mechanism to alert app users on Android and iOS devices. Send a notification from an automation bot as described in the following sections:

Add and configure the task
How AppSheet processes notifications

Add and configure the Send a notification task
Add and configure the Send a notification task by performing the following steps:

Add the Send a notification task to a bot, as described in Add a task to a bot.
Configure the Send a notification task by setting the properties described in the following tables.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




After you save the app, you can reuse the task in other bots.
Configure the Send a notification task by using the settings described in the following tables.
See also How AppSheet processes notifications.




Property


Description



Linking

Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.





Task name


Name of the task. It must be unique within your app.




Table name


Table referenced by the task. Select an existing table in the list. Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




To


List of email recipients. Click Add to add an email address or an expression using the Expression Assistant. Repeat to add additional email recipients.
See Add email recipients for more information.




Use default content?


Toggle to indicate whether you want to use the default email content or provide customized content. If enabled, the task uses default content. If disabled, customize the content using the additional properties displayed, as described below.
This property is enabled by default.




If you disable the Use default content? property, customize the content using the additional properties displayed, as described below.




Property


Description




Title


Title of the notification. Specify text and variables.
By default, a meaningful title is used.
Example: '<<EmployeeName>> please pickup package from <<CustomerName>>'.




Body


Body of the message. Specify text and variables.
By default, contains the following built-in variables:
<<_ROWKEY>>
<<_UPDATEMODE>>
<<_USERNAME>>
<<_NOW>>
Example:
<<[FirstName]>> <<[LastName]>> your order for <<[Quantity] * [Price]>> shipped on <<TODAY()>> and will arrive on <<TODAY() + 3>>.




DeepLink


DeepLink to include in the notification. You can use the DeepLink to link to specific application data, including:

Your AppSheet application
An entire View within your application
A filtered View within your application
A specific row within a View within your application
A form with pre-filled values
A custom DeepLink you specify using an expression

Enter a link or an expression using the Expression Assistant.
Defaults to a DeepLink to the AppSheet application.




 Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





How AppSheet processes notifications
You control who receives a notification by specifying the email address of the recipients in the To property when configuring the Send a notification task (above).
AppSheet uses Notification Device Tokens to convert each email address in the To property into the appropriate Device Tokens for the user's mobile devices. If the user has more than one device, the notification is sent to each device that the user has logged in from.
AppSheet handles Notification Device Tokens slightly differently for branded applications (which are rare) versus non-branded applications.
Typically, the notification recipient must be an authenticated user who has logged in to at least one AppSheet application using the email address specified in the To property. The application that the user signed in to need not be the application sending the notification.
Branded  pplications work slightly differently. When a user logs in to a branded application, the Notification Device Token that is creates by the login contains the AppId of the branded application. This enables AppSheet to track which branded applications each user has logged in to and to send notifications appropriately.
For example, assume you have two branded applications called AppA and AppB. Assume you have two users User1@gmail.com and User2@gmail.com. Assume that User1 has only logged in to application AppA and that User2 has only logged in to application AppB. A notification that originates from application AppA might specify both User1 and User2 in the To property, but the notification will only be sent to User1 because only that user has logged in to the brandedf application. No notification will be sent to User2 because that user has not logged in to the branded application.
AppSheet sends notifications by performing the following tasks:


Translates the user email address you specify in the To property into an AppSheet User Id. That AppSheet User Id will only exist if the user has logged in to at least one AppSheet application that requires user authentication using the user email address you specify in the To property. The AppSheet application that the user logged in to need not be the AppSheet application sending the notification.


Translates the AppSheet User Id into a list of one or more Google Firebase Cloud Messaging Device Tokens. If the user has a mobile device and has logged in to at least one AppSheet application from that device, then AppSheet will have a unique Device Token registered for the device. AppSheet will send the notification to all of the recipient's registered Device Tokens.


If AppSheet cannot find an AppSheet User Id for the user email address you specify in the To property or cannot find at least one Device Token for the AppSheet User Id, then the bot entry in the Audit History will report the following warning:

"Warning: No notification sent to 'someuser@somesite.com' because no Notification Device Token is present for this user."


   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot notificationsResolve the most common bot notification problems using the guidance provided in the following sections. See also Troubleshoot bots.

Why are notifications only sent to the app creator?

While the app is in test mode (that is, it has not passed a deployment check), any notifications sent from a bot are delivered to the app creator only. This ensures that you do not inadvertently send email messages, SMS messages, or notifications, or post HTTP messages while debugging your bot.


Why is there no Notification Device Token present for a user?

If a notification recipient does not have a Notification Device Token, the following error is returned in the audit history log: Warning: No notification sent to 'someuser@somesite.com' because no Notification Device Token is present for this user. 
For more information about this error, see How AppSheet processes notifications.



   Was this helpful?How can we improve it?YesNoSubmit   

 Create and save a file from an automation

This feature is available to AppSheet Core accounts and above. See AppSheet pricing.


Create and save a file by adding the Create a new file task to an automation bot.
Add and configure the Create a new file task by performing the following steps:

Add the Create a new file task to a bot, as described in Add a task to a bot.
Configure the Create a new file task by setting the properties described in the following tables.
Save the app.

After you save the app, you can reuse the task in other bots.
Configure the Create a new file task by using the settings described in the following tables.




Setting


Description



Linking

Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.





Task name


Name of the task. It must be unique within your app.




Table name


Table referenced by the task. Select an existing table in the list. Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




HTTP Content Type


Content type of the file. Valid content type values include:

CSV
HTML
ICS_Calendar
JSON
PDF
XLSX (Microsoft Excel)
XML

Note: A maximum of 2500 PDF files are allowed to be created per day, at a rate of 20 per second.




Template


Template to use for more precise control of the file contents. See Use templates in a bot.




File Store


File system where files are saved.
When set to Default (the default setting), the file is stored on the authentication provider file system. For example, if your authentication provider is Google, the file is saved to Google Drive. If your authentication provider is Dropbox, the attachment file is saved to Dropbox.
Note: If Smartsheet is your authentication provider, AppSheet saves the file to Google Drive as Smartsheet does not have a file system. If you use Smartsheet and wish to save files, you must include Google as a data source, as described in Use multiple data sources.




File Folder Path


Folder path where files are saved relative to the default app folder.
Use the Expression Assistant to specify text, variables, and expressions. For example:


Files/MyPurchaseOrders


<<CONCATENATE("MyFiles/PurchaseOrdersByMonth_", YEAR(NOW()), "_", MONTH(NOW()))>>:


In the second example, email attachment files would be stored in a separate folder, based on the month. For example: MyFiles/PurchaseOrdersByMonth_2019_02
By default, the folder path is Files.




File Name Prefix


Prefix to prepend to the filename.
Use the Expression Assistant to specify text, variables, and expressions.
By default, the prefix is AppSheetDoc.
Note: Forward slashes (/) are not supported in filenames. For example, if you are using a date format that uses forward slashes, you will need to convert them to a different character such as a period (.).




Attachment Page Orientation


Page orientation used for PDF files. Valid values include: Portrait (the default) and Landscape
Note: This setting is available only if you set HTTP Content Type to PDF.




Attachment Page Size


Page size for PDF files. Select a standard size or select Custom and enter the Attachment Page Width and Attachment Page Height in millimeters. Defaults to A4.
Note: This setting is available only if you set HTTP Content Type to PDF.




Disable Timestamp?


Toggle to indicate whether to append a timestamp to filenames. Appending the timestamp will ensure the filenames are unique.
The timestamp contains the date and time at which the attachment file was created, formatted as follows: yyyyMMdd_HHmmss_fff indicating year, month, day, hours, minutes, seconds, and milliseconds. For example:
MyFileName20190207_133355_804.pdf
If you disable the timestamp, you must ensure that every filename is unique. Otherwise, the files may be overwritten. For example, if you are saving files to Google Drive and you disable the timestamp, only the most recent attachment file will be available. Older files with the same name will have been overwritten.




 Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot file creationResolve the most common bot file creation problems using the guidance provided in the following sections. See also Troubleshoot bots.

Where is the file being saved?


Configure the file system where files are saved using the File Store property when configuring the Create a new file task.
To understand the folder and file naming conventions, see Archive files created from a bot. You can view the saved folder and file names in the Audit History.



Why isn't the PDF file formatted correctly?


In your bot, you can define parameterized Google Doc templates that will be converted to PDF files. Occasionally, these files are not formatted identically to the original document template. To troubleshoot this problem, it is important to understand the steps used by AppSheet to process the file templates.
AppSheet performs the following steps when processing file templates:


Exports the Google Docs template to HTML.
              This conversion is lossy --- in particular, HTML does not support the concept of pagination.


Modifies the HTML by replacing all template variables and expressions in the HTML template with data values.


Converts the HTML to PDF.
              This conversion reintroduces pagination constructs (such as margins and page breaks). However, they may not match the original pagination settings.


Formatting inconsistencies can be introduced at step 1 or step 3 because neither step maintains complete document fidelity. Most commonly, the problems are introduced at step 1 and can be fixed manually, as follows:


Open the Google Docs template, export it to PDF, and view the results.
              Tweak the formatting options in the Google Docs template until it exports to PDF as required.


Open the Google Docs template, export it to HTML, and view the results.
              Tweak the formatting options in the Google Docs template until it exports to HTML as required.





Why are the images in the PDF file too large or too small?


You can control the size of images shown in the file. By default, columns/expressions of type Image are shown larger than columns/expressions of type Thumbnails.
You can specify a format rule  to further control the size of images in your file content. In the format rule, you choose the table, one or more columns, an optional condition, and the image size (Tiny, Small, Medium, Large). See Display images, thumbnails, drawings, and signatures in templates. 



How do I control when and how maps are shown in my PDF file?


You can control how geographic column values (Addresses and LatLongs) are shown in the file. By default, columns/expressions of type LatLong are shown as static maps with a pin, while columns/expressions of type Address are shown as text.
You can specify a format rule to further control the size of static maps in your file. In the format rule, you get to choose the table, one or more columns, an optional condition, and the image size (Tiny, Small, Medium, Large, or Text). Choosing Text results in the textual representation of the value being shown in the file. See Display Address, LatLong, and XY values in templates.










Why are app users not receiving emails with PDF attachments?

You may have reached the maximum number of PDF attachments allowed.  For each account, a maximum of 2500 PDF files are allowed to be created per day, at a rate of 20 per second. In this case, an exception similar to the following appears in the Audit history:
"Exception": "Document request failed with exception Status(StatusCode="ResourceExhausted", Detail="Resource has been exhausted (e.g. check quota)"





   Was this helpful?How can we improve it?YesNoSubmit   

 Archive files created from a botThe Create a new file task archives each file that it creates. The following sections provide more details:

How the file name is formed
How the folder name is formed
How the complete folder and file path is formed
View the folder and file names in Audit History
Create an action to open a saved file

For more information about the settings described, see Create and save a file from an automation.
How the filename is formed
The filename is formed by combining the File Name Prefix value, the timestamp (if Disable Timestamp? is disabled) formatted as yyyyMMdd_HHmmss_fff, and the file extension for the HTTP Content Type.
For example, if the File Name Prefix is set to MyFileName and the HTTP Content Type is PDF:

If Disable Timestamp? is disabled, the archive attachment filename is: MyFileName20190207_133355_804.pdf
If Disable Timestamp? is enabled, the archive attachment filename is: MyFileName.pdf

How the folder name is formed
The folder name in which the file is stored is formed using the default app folder and the File Folder Path property.
To configure the default app folder, select Settings  > Information, and under App properties enter a value in the Default app folder setting. For example:



We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation
To configure the default app folder, select Info > Properties, expand App Properties, and enter a value in the Default app folder property.

Examples:
If the Default app folder is /1track/data/MyApp-24403/MyDefnFolder1, and the File Folder Path is MyFolderA/MyFolderZ, then the folder name is:

/1track/data/MyApp-24403/MyDefnFolder1/MyFolderA/MyFolderZ
If the default app folder is /1track/data/MyApp-24403 and File Folder Path is not defined (defaults to Files), then the archive folder name is:

/1track/data/MyApp-24403/Files

How the complete file and folder name path is formed
The complete file and folder name path is formed by combining the Folder Name and File Name values.
Examples:
If the Folder Name is /1track/data/MyApp-24403/Files and the filename is PurchaseOrder20190207_133355_804.pdf, then the file and folder name is:

/1track/data/MyApp-24403/Files/PurchaseOrder20190207_133355_804.pdf
 
If the Folder Name is /1track/data/MyApp-24403/MyFiles/PurchaseOrdersByMonth_2019_02 and the filename is PurchaseOrder20190207_133355_804.pdf, then the archive file and folder name is:

/1track/data/MyApp-24403/MyFiles/PurchaseOrdersByMonth_2019_02/PurchaseOrder20190207_133355_804.pdf

View the folder and file names in the Audit History
View the file by checking the audit history log. Customize the dashboard settings and look for an audit record related to the Create a new file task. The FileName value indicates the folder and file path where the file was archived.
Note: You may need to wait for up to five minutes for the audit record to appear. AppSheet groups audit records before writing them to the audit history log to reduce overhead. This can result in a delay before an audit record appears in the audit history. If you don't see an audit record, click Search periodically to refresh the audit history log.
Create an action to open a saved file
You can create an action to open a saved file.

Configure a Create a new file task.
    To create an action button that opens the file, the filename needs to be repeatable and unique. To ensure that the filename is unique, disable the timestamp and set the filename using a formula based on the key column. For example: CONCATENATE(“PurchaseOrder_”, [ID])
Where ID is the name of the key column of the table.
Add a column to your table to store the PDF filename. For example, call the column FileName and set its type to File.
Create a data change action to set the file FileName column. The action must be of type: Data: set the values of some columns in this row. Use a formula to set the value to the relative file path of the file.

    For example, if the relative file path is: /MyFolderA

    And filename is: CONCATENATE(“PurchaseOrder_”, [ID])

    Then the formula should be: CONCATENATE(“MyFolderA/”, “PurchaseOrder_”, [ID], “.pdf”)
Create an Open File action. The action must be of type: External: open a file. Set File to point to the column that you created to store the filename. For this example, the formula would be: [FileName]
Return to the bot that saves the file and add an action. Set the Reaction to Change Data and select the action you created in step 3.

When the bot is triggered, it will archive the file with the relative file path and filename you specified. It will save the file path and filename in the column you created. When you click the Open File action, it will retrieve the relative file path from that column and open that file.
   Was this helpful?How can we improve it?YesNoSubmit   

 Introduction to webhooks
You can use a webhook from an automation bot to post to any web service on the Internet. This is a powerful way to integrate your AppSheet app with a variety of popular services like Zapier, Slack, Twitter, Twilio, and IFTTT among others.
The web service must support a REST API. Your webhook can invoke any of the operations exposed via the web service's REST API.
To use a webhook you need to do the following:

Set up a developer account with the web service
Call the webhook from a bot in AppSheet



By default, webhook automation API calls originate from a dynamic list of IP addresses. If your webhook automation API calls depend on the stability of the IP addresses for access control security, you can request that they also use the static IP addresses by contacting AppSheet Support.


Set up a developer account with a remote web service
Set up a developer account with a remote web service, such as Twilio. The web service will normally provide three pieces of information:

URL endpoint.
Authentication information. This may be a token or username/password.
REST API. This describes the JSON payload to be sent to the URL endpoint via an HTTP POST message to invoke a specific action.

Call a webhook from a bot in AppSheet
Call a webhook from a bot in AppSheet, as described in Call a webhook from a bot. When configuring the webhook, you provide the following information obtained when setting up your remote web service account:

URL of the remote web service. You can use expressions to dynamically construct the URL.
Authentication information, typically sent in the headers with the webhook.
JSON payload data, typically sent in the Body of the webhook. You can use expressions when constructing the body based on the input to the automation.

   Was this helpful?How can we improve it?YesNoSubmit   

 Call a webhook from an automationCall a webhook from an automation bot as described in the following sections:

Add and configure the task
Specify the HTTP Basic Authentication header

 

For AppSheet Core accounts: If you receive a Workspace AppSheet Core security violation error, then the use of this feature is not allowed by policy, as described in Set the AppSheet Core security setting. Contact your Workspace administrator for assistance.


Add and configure the Call a webhook task
Add and configure the Call a webhook task by performing the following steps:

Add the Call a webhook task to a bot, as described in Add a task to a bot.
Configure the Call a webhook task by setting the properties described in the following tables.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




After you save the app, you can reuse task in other bots.
Configure the Call a webhook task by using the settings described in the following tables.




Setting


Description



Linking

 


Enable or disable the reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.








Task name


Name of the task. It must be unique within your app. 


Note: This setting is available only if Linking is turned on.






Table name


Table referenced by the task. Select an existing table in the list. Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




Preset


Customize all settings or select a preset to pre-populate a subset of values.
Valid values include:

Custom - Set all configuration values manually. This is the default.
Slack Hook - Pre-populate values for a Slack webhook.
AppSheet API - Pre-populate values for the AppSheet API.





Url


URL of the web service for the HTTP request. The URL must be absolute and may include text, variables, and expressions.
For example:

https://api.webservice.com/add/table/<<[Table Name]>>/id/<<[Record Id] + 1>>


        If you are using the webhook to invoke the AppSheet API, enter the webhook URL value in the following form:
https://api.appsheet.com/api/v2/apps/{appId}/...
            tables/{tableName}/Action
Where:

{appId} specifies the GUID of the AppSheet application. You can obtain the {appId} from the Manage > Integrations > IN pane.
{tableName} specifies the name of the table.

While the app is in test mode (that is, it has not passed a deployment check), the webhook can be invoked. This allows you to test your webhook before your application is deployed.

Note: This setting is available only when Preset is set to Custom or Slack Hook.





HTTP Verb


HTTP verb used to call the web service. Select a value from the list. Valid values include Delete, Get Patch, Post (most common), and Put.

Note: This setting is available only when Preset is set to Custom.





HTTP Content Type


Content type of the body. Valid content type values include:

CSV
FORM_URL_ENCODED
HTML
ICS_Calendar
JSON
PDF
XLSX (Microsoft Excel)
XML

Defaults to JSON.

Note: This setting is available only when Preset is set to Custom.





App Id


ID of app to send the request to. Defaults to the ID of the current app.

Note: This setting is available only when Preset is set to AppSheet API.





Target Table Name


Name of the target table in the app to send the request to.
See Tables: The Essentials for more information about adding tables.

Note: This setting is available only when Preset is set to AppSheet API.





Body


Body containing the command or data to send to the webhook.
To define the body, do one of the following:

Enter the webhook body in this setting, including text, images, variables, and expressions.
Leave this setting blank and specify an Body Template (see below).
Leave this setting and Body Template setting blank to use the default content.


Note:


Do not specify USERSETTINGS() in the JSON body of a webhook task. It is not supported at this time.

The Body Template setting (if specified) takes precedence over this setting.


Defaults to data values from the added or updated row, excluding Hidden or Show type columns.




HTTP Headers


List of HTTP headers that are included in the HTTP request.
It is common to include an Authentication header that contains authentication information such as authentication token or a username and password. See Specify the HTTP Basic Authentication header.
Click Add to add an HTTP header using the following format:
<header>: <value> Repeat to add additional HTTP headers.
The header name and header value may include constants or AppSheet expressions. The expression result will replace the expression in the HTTP header.
If the header value contains quote characters, you must enclose the entire header value within quotes, and escape each embedded quote with two quotes. For example, if the header name is Authorization  and the header value is Token token="537d7d", you should enter Authorization: "Token token=""537d7d""" in the header line.
By default, AppSheet sets the Content-Type header as follows: Content-Type: "application/json"
Example:
When invoking Pushpad from a webhook, you might need to include the following header values:

Authorization: "Token token=""9474e7df4ba7c96a06"""
Accept: "application/json"


Note: This setting is only available when Preset is set to Custom or AppSheet API.





Body Template


Template to use for more precise control of the webhook body. See Use templates in a bot and the Body setting description (above).

Note: This setting is only available when Preset is set to Custom or AppSheet API.





Body Template Data Source


Data source used for the body template.

Note: This setting is only available when Preset is set to Custom or AppSheet API.




Return value

Enable this toggle to capture the return values from web service call. See Use return values from webhooks.



Specific types

Enable this toggle to capture the return values from web service call. See Use return values from webhooks.




Timeout


Number of seconds AppSheet should wait for the webhook to complete before timing out. Defaults to 180.




Max number of retries on failure


Maximum number of times to retry the webhook in the event of failure. Defaults to 3.




Run asynchronously


Toggle that specifies whether AppSheet runs asynchronously as a background task. Invoking the webhook asynchronously can improve client response time.
Before setting this setting, consider whether your application requires the webhook to complete synchronously to execute correctly. For example, if your webhook is changing data and your application relies on that data being updated before the sync completes, then using an asynchronous call may yield incorrect results.
By default, the setting is disabled.

Note: This setting is available only when Return value is turned on.





 Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





Specify the HTTP Basic Authentication header
You can specify an HTTP Basic Authentication header as follows.

Header name: Authorization 
Header value: Basic <base64-encoded authentication value>

When invoking Twilio, you must specify your Twilio Account SID, followed by a colon, followed by your Twilio Auth Token in the form:
<TwilioAccountSID>:<TwilioAuthToken>
Example:
If your Twilio Account SID is BDe8de733fd2363d6d0d86719f6ad324db and your Twilio Auth Token is 5c3a028974b570eebc48fc4de2a5f567, the resulting authentication value is:
BDe8de733fd2363d6d0d86719f6ad324db:5c3a028974b570eebc48fc4de2a5f567
When this value is Base64 UTF-8 encoded using a web service like Base64Encode.org it yields the value:

QkRlOGRlNzMzZmQyMzYzZDZkMGQ4NjcxOWY2YWQzMjRkYjo1YzNhMDI4OTc0YjU3MGVlYmM0OGZjNGRlMmE1ZjU2Nw==
The resulting header value is:

Basic QkRlOGRlNzMzZmQyMzYzZDZkMGQ4NjcxOWY2YWQzMjRkYjo1YzNhMDI4OTc0YjU3MGVlYm
M0OGZjNGRlMmE1ZjU2Nw==

   Was this helpful?How can we improve it?YesNoSubmit   

 Use return values from webhooksUse return values from webhooks as described in the following sections:

Configure the return value for a webhook
Use the return value in an automation
Use nested fields from the response
Use a value in an array from the response
Tips for debugging return values
Limitations with returned values

Configure the return value for a webhook
When configuring the task, optionally use the following settings to capture the return values from a webhook:

Enable the Return value toggle
Use the Specific types field to map the return values to AppSheet data types

Use the return value from a webhook in an automation

Note: Return values cannot be used to define:

The Function Arguments field for an Apps Script task
File Folder Path or File Name Prefix fields for a create file task


To use a return value from a webhook in an expression that is defined after this task in the automation, refer to the output using the following syntax:

[StepName].[FieldName]


Return value field names are case-sensitive and can consist of letters, digits, and underscores only.

For example, if the Call a webhook task named Call Address Service captures the following return values:

To reference the return values, use the following format: [Call Address Service].[FieldName]
For example:
CONCATENATE([Call Address Service].[ZipCode],[Call Address Service].[StreetName],"")
Use a nested field from the response
AppSheet supports nested objects to any arbitrary level in the response. You use nested fields by using the . (dot) separator.
For example, if the response data for an employee contains the department information in the response as follows:
"name": "John Doe",
  "department": {
     "name": "Finance"
  }
You could reference the name of the department using the following syntax:
[StepName].[department.name] // this returns "Finance"
Use a value in an array from the response
Use a value in an array from the response using the INDEX() function.
For example, if the response data for an employee contains the organization information as an array in the response, as follows:
{
    "ID": 123
    "company": "mycompany",
    "function": {
      "role": "project-manager",
      "organizations": ["Finance", "Engineering", "Cloud"]
    }
  }
You could reference the Engineering organization using the following syntax:
INDEX([StepName].[function.organizations],2) // this returns "Engineering"
Tips for debugging return values
The following sections provides tips for debugging return values:

Error messages
Timeout values

Error messages
If a type conversion fails, bot execution will still succeed but an error message will be reported in the Automation Monitor.
The following table lists the error messages returned based on the JSON mapping issue.



JSON mapping issue
Error message


Different types in array
Failed Webhook type translation: List type for key '{0}' must only have a single child type



Key not found

Failed Webhook type translation: Key 'key' not found in returned object



Incorrect type mapping 


Failed Webhook type translation: Failed to translate ‘type’ to 'userDefinedType' type




Nested object


Failed Webhook type translation: Failed to translate ‘type’ to 'userDefinedType' type as the value is of object data type 




Non-primitive array

Failed Webhook type translation: List type for key '{0}' cannot contain nested or repeated types



Null response


Failed Webhook type translation: Return value is NULL




Timeout values
Timeouts are handled as follows:

When comparing the following values, the minimum timeout value will be used:
    
Bot execution timeout
Webhook task timeout


For automations with scheduled events, the maximum timeout is 5 minutes; for automations with data change events, the maximum timeout is 2 minutes.

Limitations with returned values
Return values from webhooks are only supported for:

HTTP GET, PATCH, POST, PUT, and DELETE methods
JSON file formats
Nested objects in the JSON responses, such as:
    {
        "ID": 123
        "company": "mycompany",
        "employee": {
          "lastname": "Doe",
          "firstname": "Jane"
        }
      }


Flat arrays of same types, such as:
{
        "ID": 123
        "company": "mycompany",
        "function": {
          "role": "project-manager",
          "organizations": ["Finance", "Engineering", "Cloud"]
        }
      }


At this time, return values from webhooks are not supported for:

Reusable automation components
Asynchronous HTTP calls (enable Run Asynchronously)
Other file formats, such as XML
Complex or nested JSON response, such as:
{"company": "mycompany", 
        "Employees":
           [{ 
              "lastname": "Doe",
           "firstname": "Jane"
        },{
           "lastname": "Doe",
           "firstname": "John"
        }]
    }

   Was this helpful?How can we improve it?YesNoSubmit   

 Invoke the AppSheet API from a webhook
To invoke the AppSheet API from a webhook, when configuring the Call a webhook task set the Preset property to AppSheet API. Then configure the additional properties that are displayed based on your selection. For more information, see Call a webhook from a bot.
   Was this helpful?How can we improve it?YesNoSubmit   

 Control the image width in a webhookImage and Thumbnail columns included in a webook template are inserted using a URL to the image. For example, if your Image column is called Photo, you could include an URL to that image as follows:

Name: <<[Name]>>
Photo: <<[Photo]>>
Address: <<[Home Address]>>
 
By default, the image width in the URL is based on the column type, as follows:

Thumbnail column: 200
Image column: 600

You can control the image width in the URL by creating a format rule.
To create a format rule to control how the thumbnail or image is displayed:

Open the AppSheet Editor.
Go to App > Format Rules.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to UX > Format Rules.  



Click + New Format Rule.
Choose the table containing the Thumbnail or Image column in the For this data field.
Select the column name in the Format these columns and actions field.
Choose one of the following for Image format under Template format:

Large: Display as 1000 x 1000 image
Medium: Display as a 600 x 600 image
Small: Display as a 200 x 200 image
Tiny: Display as a 50 x 50 image
Text: Display as a URL

   Was this helpful?How can we improve it?YesNoSubmit   

 Integrate with IFTTT
IFTTT (www.ifttt.com) is a service that lets you connect events with actions via simple If-Then rules. Each such rule is called a recipe.
You can create a bot in your AppSheet app that will trigger the If event of an IFTTT recipe. The event can also carry some data from your app that can be passed along to some other service via the IFTTT recipe.
Here is a simple IFTTT recipe to show this integration. The recipe receives a message from an AppSheet bot, and then sends it by email to the owner of the IFTTT account.
To set up an integration with IFTTT:


Create and sign in to your IFTTT account.


Open the following URL: https://ifttt.com/recipes/426317-integrate-your-appsheet-app
      This will copy the recipe into your account.


Add the Maker source to your account. Provide an event name (for example, MyTrialEvent). Click Add to add the recipe to your account. Go to https://ifttt.com/maker to obtain your key. It will be similar to the following: dMJSI4dCVowUxpVFrqjG8d


Call a webhook from a bot in your AppSheet app. Configure the webhook action as follows.


Set the URL: https://maker.ifttt.com/trigger/{eventName}/with/key/{IFTTTkey} For example, https://maker.ifttt.com/trigger/MyTrialEvent/with/key/dMJSI4dCVowUxpVFrqjG8d


Leave the HTTP Headers blank.


In the Body field, enter {"value1":"hello", "value2":"there", "value3":"<_APPNAME>"}. You can use any data from the updated record and the rest of the app data using AppSheet expressions.




Run the app deployment check and mark the app as Deployable, otherwise the bot won't actually execute the actions.


Make an update to the app so that the bot fires. Verify from the audit history log that the bot succeeded. Go to your IFTTT recipe page and verify from the recipe log that the recipe was triggered. A short while later, your IFTTT recipe will send an email to your account.


   Was this helpful?How can we improve it?YesNoSubmit   

 Integrate with PHPYou can create a bot in your AppSheet app that will post a JSON payload to a PHP service that you created.
To do this:

Call a webhook from a bot in your AppSheet app.
Add a JSON Body Template.
The template controls the format of the JSON data sent in the body of the webhook post.
Your PHP code that is invoked by the webhook post can retrieve the post body data by specifying:
$postdata = json_decode(file_get_contents("php://input"));
After successfully processing the webhook request, your PHP code should return a JSON object containing: {"Status":"Success"}

   Was this helpful?How can we improve it?YesNoSubmit   

 Integrate with Pushpad
Pushpad is a service that allows you to send push notifications to your web site or web app. You can create a bot in your AppSheet app that will send a Pushpad notification.
Note: If instead you'd like to send push notifications to your users on mobile devices, see Send notifications from a bot.
To set up an integration with Pushpad:


Create a Pushpad account.
      You will receive a Pushpad auth_token and project_id.


Call a webhook from a bot in your AppSheet app. Configure the webhook action as follows:


Set the URL to:
https://pushpad.xyz/projects/<project_id>/notifications
          Where <project_id> is the project_id issued to you by Pushpad.


In the Body field, enter:
{ "notification": { "body": "Hello World", "title": "My Title" } }
          Customize the body to include your own text. You can include variables and expressions that use data from the updated record.


In the Headers field, enter:
Authorization: "Token token=""<auth_token>"""
          Where <auth_token> specifies the auth_token value obtained from Pushpad.




Run the app deployment check and mark the app as Deployable, otherwise the bot won't actually execute the actions.


Make an update to the app so that the bot fires. Verify from the audit history log that the bot succeeded. A short while later, Pushpad will send a notification.


   Was this helpful?How can we improve it?YesNoSubmit   

 Integrate with ZapierZapier is a service that allows non-technical users to connect a triggering event from one service with one or more actions in other services. There are hundreds of services connected to Zapier and each connection between services is called a Zap.
Here, we'll show you how to build a Zap, set up a bot in an AppSheet app to fire an event to trigger the Zap and send an email. Instead, you could use any of the hundreds of other Zapier actions.
To integrate with Zapier:

Create a Zapier account.
Click Create Zap to create a new Zap.
Replace Name your zap with your Zap name in the top left.
Set the Trigger to Webhook.


     
Select Catch Hook in the Trigger Event drop-down and click Continue.


     
Click Copy next to the Custom Webhook URL to the copy the URL. Then, click Continue.


     
In the AppSheet app editor Call a webhook from a bot in your app.
Paste the Zapier webhook URL copied in the previous step into the URL field of the Call a webhook task.
Save your app.
In your AppSheet application, make a data update and save it to trigger the AppSheet webhook.
    You can do this by deploying and running your app or using the Test feature to execute the Call a webhook task.
In Zapier click on Test trigger. This tells Zapier that you've sent a trial webhook to the Zap to trigger it.


     
If Zapier receives the webhook from your AppSheet app successfully, it displays the message We found a request! followed by the JSON webhook body sent by your AppSheet webhook. For example:


     
Click Continue.
Choose an action for the Zap, such as an Email by Zapier.
Click Continue.
Configure the action.
Note: You can use any of the fields from the updated record in AppSheet as they are all available in the payload sent from AppSheet.


     
Click Continue.
Click Test & Continue to test the Zap.
Click Turn on Zap.
Enable your AppSheet app to integrate it with the world via Zapier!

   Was this helpful?How can we improve it?YesNoSubmit   

 Prevent app creators from using webhooksPrevent app creators from using webhooks in their apps by using the "Disallow webhook" policy, as described below. For more information, see Define governance policies.
To app creators from using Chat apps with AppSheet:

Select My account > Policies.
Click + Account Policy or + Team Policy to add an account or team policy, respectively.
Select Disallow webhooks from the Policy Template drop-down.
Click Next.
The policy is preconfigured for you. You can modify any of the field values. See Add a predefined policy for a description of each field. 
    
Important: If you modify the Condition field, ensure that you retain the functionality defined below:
NOT([Type] = Webhook)


Click Save.

   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot webhooks
If you are having a problem with the execution of your bot, always start by checking the audit history log.
Customize the dashboard settings and look for the audit record that is relevant to the bot. Click the Details icon for more information. If there was an issue with the bot execution, the reason will be provided. If you see "Result": "Success", then the bot execution was successful.
Note: You may need to wait for up to five minutes for the audit record to appear. AppSheet groups audit records before writing them to the audit history log to reduce overhead. This can result in a delay before an audit record appears in the audit history. If you don't see an audit record, click Search periodically to refresh the audit history log.
   Was this helpful?How can we improve it?YesNoSubmit   

 Call Apps Script from an automationCall Apps Script from an automation as described in the following sections:

Overview
Get started calling Apps Script from an automation
Create an Apps Script project
Add and configure the "Call a script" task in a bot
Share an Apps Script project
Manage Apps Script projects in your account
Quotas and limitations

Overview
Apps Script is a cloud-based JavaScript platform that lets you integrate with and automate tasks across Google products. With Apps Script, you write code in modern JavaScript and have access to built-in libraries for Google Workspace applications.
You can use custom logic from within your AppSheet app by calling Apps Script from an AppSheet automation bot.
Examples of custom logic that you can implement include:

Create a calendar appointment when a button is clicked
Add a slide to a presentation when a new row is added
Save photos to Drive and share with specific individuals when uploaded using a form
Create an audit log by generating a Google Docs file with data from a table
Call an external service for machine learning prediction using data from a newly added row and write back model prediction


Note the following:


Apps Script always executes the head deployment regardless of the deployed versions. You can't designate a different version to be called by the task.

AppSheet supports only standalone scripts. It does not support container-bound scripts at this time.


New to Apps Script? See Google Apps Script overview.
New to AppSheet Automation? See AppSheet Automation: The Essentials.
Get started calling Apps Script from an automation
Get started calling Apps Script from an automation.


Watch an introductory video on calling Apps Script from an automation.

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

Calling Apps Script from AppSheet Automations

Walk through the quick start to call a simple "hello world" script from an AppSheet automation and confirm its execution.
Use Apps Script samples
    
Use the AppSheet Apps Script Examples Project 
Use Apps Script to create a calendar event
Use Apps Script to send an interactive chat message



Create an Apps Script project
First, you must create an Apps Script project for your script files and related resources. An Apps Script project includes:

One or more script files (.gs) to define your custom integrations
Optionally, HTML files, that might include JavaScript and CSS, to create custom templates and layouts


To create an Apps Script project:


From the Apps Script home page you can:


Create a new Apps Script project, as described in Create and delete projects.


Copy an existing Apps Script project:


Open the Apps Script project editor.


Click Overview in the left sidebar and click Make a copy (copy icon) in the right side of the page.







Add one or more scripts to the project or modify the existing scripts. For examples, see Use the AppSheet Apps Script Examples project.


Add and configure the "Call a script" task in a bot
Add and configure the Call a script task in a bot by performing the following steps.
For more information about adding and configuring tasks in an automation bot, see Tasks: The Essentials.

Add the Call a script task to a bot, as described in Add a task to a bot.
Configure the "Call a script" task.
Click Authorize to authorize the Apps Script project to run.
    
Note: You'll need to authorize the first time you access the project and anytime authentication scopes are added. As indicated, the script will always run as the app owner regardless of the account used to authorize the project.


Select the Apps Script function that you want to call in the Function Name drop-down.

    The list is populated using the functions defined by the Apps Script project selected in the previous step. After you select the function, the list of associated arguments is displayed. 
Enter an expression that defines each argument that will be passed to the function in the Function Parameters field. For example:

Optionally, enable the Return Value option to use the return value from the Apps Script function. See Use return values from Apps Script tasks for more information.
Optionally, enable the Run asynchronously? option to run the Apps Script task asynchronously as a background task. Enabling this option can improve client response time.

    Before setting this option, consider whether your application requires the Apps Script to complete synchronously to execute correctly. For example, if your Apps Script is changing data and your application relies on that data being updated before the sync completes, then using an asynchronous call may yield incorrect results.
When you are done, save the task by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure the "Call a script" task
Configure the Call a script task by using the settings in the following table.




Setting


Description



Linking



Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.








Task name


Name of the task that appears in the automation process flow. It must be unique within your app.




Table name


Table referenced by the task. Select an existing table in the list. Click  to show the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.




Apps Script Project


Apps Script project that contains the function you want to call. To populate the field:

Click Browse (File icon).
Click Files on Google Drive.
Navigate to the Apps Script project in your Drive. See Create an Apps Script project.
Click Select.

Click Open Project to open the project, if desired.




 Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





Share an Apps Script project
Share your Apps Script project by sharing it directly or using a shared drive. For details, see Collaborating with other developers.
Manage Apps Script projects in your AppSheet account
The following sections describe how to manage Apps Script projects in your AppSheet account:

View Apps Script projects in your AppSheet account
Add an Apps Script project to your AppSheet account
Remove an Apps Script project from your AppSheet account

View Apps Script projects in your AppSheet account
To view Apps Script projects in your AppSheet account:

Sign in to AppSheet.
Go to the My account page.
Select Integrations > Apps Scripts.

The Apps Script projects are displayed, as follows:

Add an Apps Script project to your AppSheet account
When you add and configure a Call a script task, the Apps Script project is added to your account automatically.
Remove an Apps Script project from your AppSheet account
Remove access to an Apps Script project from your AppSheet user or team account so that it is no longer available for use by other apps.
Note: Before removing an Apps Script project from your AppSheet account, you should delete all references to the Apps Script project in your apps to avoid errors. If you removed a project from the My Account page, and want to add the project back to your account, select the script again from within the “Call a script” flow.
To remove an App Script to your user or team account:

Sign in to AppSheet.
Go to the My account page.
Select Integrations > Apps Scripts.
Click Delete (Trash icon) to delete access to a particular script.

Quotas and limitations

Apps Script executions are subject to standard Google Workspace quotas and limitations as stated in Quotas for Google Services.
Apps Script tasks will be available for users in the AppSheet Core plan and above. See AppSheet pricing plans.

   Was this helpful?How can we improve it?YesNoSubmit   

 Use return values from Apps Script tasksConfigure and use return values in Apps Script automation tasks as described in the following sections:

What is an Apps Script task return value?
Configure the Apps Script return value in AppSheet
Use the Apps Script return value in an automation
Use a nested field from the response
Type mapping between Apps Script and AppSheet
Type limitations
Automation limitation
Tips for debugging return values

What is an Apps Script task return value?
Using Apps Script tasks you can pass the return value of a Google Apps Script function to another step within your AppSheet automation. This article will explain how to configure and reference the return value.
Example uses:

Write the return value of a webhook call back to one of your Google Sheets
Update or add a new table row based on the output of an Apps Script function
Write a conditional flow based on the result on an Apps script function

Configure the Apps Script return value in AppSheet
To configure the Apps Script return value in AppSheet, you’ll need to specify what is the expected return value from your Apps Script function and the AppSheet type to convert it to.
In Apps Script:


Add a return statement to the Apps Script function you want to call in AppSheet. This can return any Apps Script type with some caveats listed in Type limitations. For example this function returns a boolean value:




 

In AppSheet:

Configure an Apps Script task, as described in Call Apps Script from an automation.
Enable the Return Value toggle to configure the return value.


Click the return type of your Apps Script function.
Select the AppSheet type it should convert to in the drop-down.

Use the Apps Script return value in an automation

Synchronous tasks (Run asynchronously? is disabled) will wait for a return value up to the limit specified in Apps Script execution limitation.

To reference the return value in an expression in a subsequent step in the process, you can refer to the output using the following syntax:

[StepName].[Output] for strings, booleans, numbers, arrays, and dates

[StepName].[Key] for objects where Key is the key of your returned object



Note: StepName must be unique relative to all step and column names within the context of the current automation.

For example this process has the step name CreateFile and is used in a data action step to set the row values:


That’s it! You can write the return value back to a Sheet, modify the existing row, or run a conditional automation using the return value.
Use a nested field from the response
AppSheet supports nested objects to any arbitrary level in the response. You use nested fields by using the . (dot) separator.
For example, if the return value in the Apps Script function is defined as follows:
function myFunction() {
    return {
      a: {
        b: "Simple Example Text",
      },
      c: "More text",
    };
  }
You could reference the nested field using the following syntax:
[StepName].[a.b] // this returns "Simple Example Text"
Type mapping between Apps Script and AppSheet
The table below summarizes the map between the Apps Script type and the equivalent AppSheet type it can convert to.





Apps Script Type


Example


AppSheet Type(s)




String


“string”


Text, Url, Address, etc.




Boolean


true, false


Yes/No




Number


42


Number, Decimal, Price etc.




Object


{a: “string”, b: false}


Table Ref with columns for each type




Array


[1, 2, 3]


List or EnumList




Date


new Date()


Date, Time, or DateTime





Type limitations
Due to differences in the Apps Script and AppSheet type systems, the  advanced types defined in the following table are not supported.





Type


Example


Explanation




Arrays with multiple types


[1, “string”]


AppSheet type system expects a list to consist of the same type




Nested objects


{a: {b: 1}} or [{a: 1}]


AppSheet only supports one level of nesting with the exception of an array inside an object {a: [1, 2]}.





Automation limitation
Return value can't currently be passed to another task directly, only to steps that are within the context of a process (such as actions and conditionals).
Tips for debugging return values
If a type conversion fails, execution will still succeed but an error message will be reported in the Automation Monitor. For example, Failed Apps Script type translation: Type 'Number' failed to translate to 'Yes/No' means a number was returned from Apps Script but the task was configured to expect a Yes/No type.
   Was this helpful?How can we improve it?YesNoSubmit   

 Quick start: Call Apps Script from an automation
In this Quick Start, you'll copy the AppSheet Apps Script Examples project that contains a simple "hello world" script to log a message to the Apps Script execution log. Then you'll call that script from an AppSheet automation and confirm its execution.

To copy the AppSheet Apps Script Examples project:


Open the AppSheet Apps Script Examples project:

Open Project

Click Copy to make a copy of the project.
    This copies the project to the root folder in My Drive by default.



Rename the project to AppSheet Apps Script Example (or a name of your choosing).

      You'll call the sayHello() function that is defined in this project from your AppSheet app to log a message to the Apps Script execution log:

function sayHello(msg) {
          Logger.log('AppSheet says ' + msg);
}


For more information about this project, see Use the AppSheet Apps Script Examples Project.
To call the Apps Script from an automation:

Make a copy of the Shirt Orders Example spreadsheet.
    Click Make a copy to download and open a copy of the spreadsheet in Google Sheets.
Rename the spreadsheet, if desired. For example, to: Shirt Orders.
Sign in to AppSheet.
On the My apps page, click Create > App > Start with existing data.
    The Create a new app dialog displays.
Optionally, edit the app name and select a category.
Click Choose your data
Click Google Sheets to access your Google Drive.
Navigate to and select the Shirt Orders spreadsheet that you copied in Step 1.
Click Select.
    AppSheet sets up your app.


Click Customize your app to open the app in the AppSheet editor.
Click Automation  and click + in the Bots heading.
    
We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.


If you are using the legacy editor

Click Automation > Bots and click + New Bot



Select the following item in the list of suggestions: 
When a Shirt Orders record is created or updated, send a notification
Click the Send a notification step to edit it.

Change the name to Call a script.




Under Task Settings in the right pane, change the task type to Call a script.




In the Apps Script Project field:


Click Browse (File icon).


Navigate to and select the AppSheet Apps Script Examples project in your Drive.


Click Select.


If prompted to authorize, click Authorize and follow the prompts.
Note: You'll only need to authorize the first time you access the project.



          The Apps Script Project is added and the Function Name field is populated with a drop-down list of available functions from the project




Select sayHello(msg) from the Function Name drop-down.

The Function Parameters field is displayed.


For the msg argument, enter the following expression using Expression Assistant:
'Hello from AppSheet'



Click Save to save the app.


In the right pane, click the mobile or tablet icon to display the app emulator.



Add a new shirt order and click Save.


Click Sync to sync your changes.



To confirm the execution of Apps Script:


Return to the Apps Script home page and view the AppSheet Apps Script Examples project.


Click Executions in the left navigation bar to confirm that sayHello() function was successfully completed. You may have to click Refresh if the log has not appeared.



   Was this helpful?How can we improve it?YesNoSubmit   

 Use the AppSheet Apps Script Examples ProjectQuick start
 Copy the sample project as a starting point for your own Apps Script project.

Open the sample project:

Open Sample Project
     
Copy the project. 



What does this sample project do?
This project has many different functions to help you get started, you can modify and mix-and-match these depending on your workflow.




Function Name


Description




sayHello


Logs a message to the console




createCalendarEvent


Adds an event to the default calendar with the provided start and end times




createDoc


Creates a Google Doc




createSheet


Creates a Google Sheet




createSlideDeck


Creates a Google Slide




shareFile


Shares a Google Drive file with an email




sendAnEmail


Sends an email




createAndSendDocument


Creates a Google Doc and send an email with it as an attachment




How to test from Apps Script
You can test executing the function from the Apps Script by clicking Run or Debug at the top of the editor:

Since it runs the function without setting arguments, you'll need to add default arguments. For example, instead of function sayHello(msg) change it to be function sayHello(msg="Test message").
The first time you do this, you'll need to authorize scopes the script needs. 
Next steps
After you have it set up, you can follow the instructions in Call Apps Script from automation to set up the task and bot inside AppSheet.
See also

Call Apps Script from an automation
Apps Script API Documentation
Use Apps Script to create a calendar event
Use Apps Script to send an interactive chat message

   Was this helpful?How can we improve it?YesNoSubmit   

 Use Apps Script to create a calendar eventQuick start
Copy the sample project as a starting point for your own Apps Script project.

Open the sample project:

Open Sample Project
     
Copy the project. 



What does the sample project do?
The project has the createHourLongCalendarEvent function declared which allows you to pass a title and date to create a calendar event in the app creator's default calendar. You can modify it to send a custom-length event or add it to a specific calendar.

Next steps
After you have it set up, you can follow the instructions in Call Apps Script from an automation to set up the task and automation bot inside AppSheet.
See also

Call Apps Script from an automation
Use the AppSheet Apps Script Examples Project for more examples in this project
Use Apps Script to send an interactive chat message

   Was this helpful?How can we improve it?YesNoSubmit   

 Use Apps Script to send an interactive chat messageTo use Apps Script to send an interactive chat message:

Create a webhook for a Google Chat space
Create an Apps Script project with a function to send data to the webhook
Call Apps Script function from AppSheet Automation

1. Create a webhook for a Google Chat space
To send rich messages to Chat, you can use the built-in webhook functionality to allow a Chat space to receive formatted data and post the message as a bot. Then, you can use Apps Script to call that webhook with data passed in from your AppSheet app.
First, we need to create the webhook our script will use. Go to Chat, create a new space, and click Manage webhooks.

Step through the short wizard. At the end you are provided with a URL. Copy it to your clipboard. You now have a bot that can post to a Chat space. See the relevant Chat documentation for more details.
2. Create an Apps Script project to send data to the webhook
Quick start
Rather than create the Apps Script project manually, you can copy the sample project as a starting point for your own Apps Script project.

Open the sample project:

Open Sample Project
     
Copy the project.



Create the Apps Script project
To create the Apps Script project:

Go to the Apps Script homepage.
Click New Project.

The Apps Script editor where you can write your code. Apps Script is written in Javascript with special Workspace API extensions. 

If you’ve never coded before or need a refresher, see the Apps Script overview which has resources to help you learn more about Apps Script.

Create a function to call the Chat webhook API
The Chat API is quite simple but also extensible if you want to create more complicated messages.
First, let's try with just a simple text message:

const GOOGLE_CHAT_WEBHOOK_LINK = "https://chat.googleapis.com/v1/spaces/...";
function sendMessage() {
    const payload = JSON.stringify({ text: "Hello World" });
    const options = {
        method: 'POST',
        contentType: 'application/json',
        payload: payload,
    };
    UrlFetchApp.fetch(GOOGLE_CHAT_WEBHOOK_LINK, options);
}

For more information about UrlFetchApp.fetch method, see Class UrlFetchApp.
You can test executing the function from Apps Script by clicking Debug:

The first time you do this, you'll need to authorize scopes the script needs to use the UrlFetchApp permission. .
If successful, you'll see a new message appear in your Chat space:

Add an argument
Now modify the function to accept an argument. Note that we are defaulting to Sample text if no argument is provided to simplify testing.

function sendMessage(message) {
   const text = message instanceof String ? message : "Sample text";
   const payload = JSON.stringify({ text: text });
   ...
}
 
At this point, you could send custom text to a chat room from AppSheet after it's hooked up to a task in an automation.
Add card messages
If you want richer messages, you can extend the interface to include attachments and links.
For example, if you declare your payload as shown below it will result in a richer message with a link to open an order:

const payload = JSON.stringify({
        "cards": [{
            "header": {
                "title": "Order received",
                "imageUrl": "https://www.gstatic.com/images/icons/material/system/2x/shopping_bag_gm_blue_48dp.png",
                "imageStyle": "IMAGE"
            },
            "sections": [{
                "widgets": [{
                        "textParagraph": {
                            "text": "A new order was placed on: " + new Date().toDateString(),
                        }
                    },
                    {
                        "buttons": [{
                            "textButton": {
                                "text": "OPEN ORDER",
                                "onClick": {
                                    "openLink": {
                                        "url": orderUrl
                                    }
                                }
                            }
                        }]
                    },
                ]
            }]
        }]
    });

To create more complicated messages for your automations, see the full Cards API as well as additional sample messages described in Card messages.
3. Call Apps Script function from AppSheet Automation
After you have it set up, you can follow the instructions Call Apps Script from an automation to set up the task and automation bot inside AppSheet.

We hope this helps you to get started with Apps Script tasks! See the sample project for the code covered in this guide.
See also

Call Apps Script from an Automation
Use the AppSheet Apps Script Examples Project for more examples in this project
Use Apps Script to create a calendar event

   Was this helpful?How can we improve it?YesNoSubmit   

 Apps Script data type translation tableWhen configuring the new AppSheet Apps Script Task, you can pass data from the AppSheet app to the function arguments using Expressions.
The table below summarizes the type translation of an argument that gets passed through an AppSheet task.




AppSheet Data Type


Apps Script Data Type when passed


Example




Yes / No


Boolean


AppSheet expression: "YES"
Apps Script value: true




Duration


Number (in milliseconds)


AppSheet expression: "000:00:01"
Apps Script value: 1000




Date & Datetime


String (in ISO 8601 date format)


AppSheet expression: DATETIME("12/20/2020 7PM)"
Apps Script value: "2022-12-25T19:00:00"




List & EnumList


Array<Value>


AppSheet expression: REF_ROWS("My Table", "TaskID")
Apps Script value: ["taskId1", "taskId2", "taskId3"]
 
AppSheet expression: LIST("a", "b", "c")
Apps Script value: ["a", "b", "c"]
 
AppSheet expression: {"a", {"b", "c"}}
Apps Script value: ["a", ["b", "c"]]




Number, Decimal, and ChangeCounter


Number


AppSheet expression: 3.14
Apps Script value: 3.14




All other types


String


AppSheet expression: "Hello"
Apps Script value: "Hello"
 
AppSheet expression: TIME("15:14")
Apps Script value: "3:14pm"
 
AppSheet expression: HYPERLINK("https://www.google.com", "Google")
Apps Script value: "https://www.google.com"




 

Tips

For date types, you can go new Date(dateString) to convert the date string into a native Javascript Type object
Most types are represented in their respective string format which will vary on the type. For example, a file type will return the path of the file in the provider and an email type will simply be the email as a string.


See also


Call Apps Script from an Automation


   Was this helpful?How can we improve it?YesNoSubmit   

 Quick start: Send a Chat message from an automationIn this Quick Start, you'll send a Chat message that alerts you when inventory for an item falls below a threshold, as shown:


This quick start builds on Quick start: Create your first Chat app with AppSheet. 


To send a Chat message from an automation:

First, you need to create a Chat app. Follow the steps in Quick start: Create your first Chat app with AppSheet to create a Chat app using Simple inventory sample app.
If you selected manual configuration to configure you Chat app, to support asynchronous interactions with your Chat app when sending Chat messages from an automation:
    
If you selected automatic configuration to configure you Chat app, you can skip this step.


In the app editor, expand the Grant IAM access to run automations section on the Chat Setup page.
Click Google Cloud Console > IAM & Admin > IAM to open the IAM & Admin page in the Google Cloud Console.
Click Grant access.
        The Grant access panel displays.
In the app editor, copy the New principal.
In the console, paste it in the New principals field in the Add principals section.
In the console, select Service Usage Consumer in the Role drop-down in the Assign roles section.
Click Save.


Return to the app editor and go to Automation > Bots.
    The bot named When stock available of an item is below threshold, send an email is selected and displayed by default. You'll modify this bot to also send a Chat message.
In the process flow, click + Add a step.


     
Select Run a task in the drop-down.
Change the Step name to Send a Chat message.
Under Task Settings, select Send a chat message.
Configure the Chat message as follows:
    


Setting
 Description


Table name
Leave set to Inventory.


Message Content
Select Select chat spaces in the drop-down.


Space ID(s)
Click Add and select the Chat space you to which you added the Chat app in Quick start: Create your first Chat app with AppSheet.


Message Text
Set to: <<_APPNAME>> ALERT - <<[Item ID].[Name]>> inventory is below threshold


Send an app view (optional)
Select Inventory_Detail.




 Save the app by selecting one of the following options:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.



Go to the Chat space and enter /, select /inventory-form in the list, and press Enter.
Click Open in app. 
Select Saw and set the Amount to any value, such as -83.
    You can leave the DateTime field set to the default.


     
Click Save.
Return to the Chat space and notice that the inventory alert message is displayed with the Inventory_Detail chat card showing the details for the item.



Congratulations! You have successfully created your first Chat message from an automation with AppSheet! 
   Was this helpful?How can we improve it?YesNoSubmit   

 Send a Chat message from an automationConfigure an automation bot to send a Chat message to one or more Chat spaces based on an event by using the Send a Chat message task.
For example, if an employee sends a request for a new chair (the event), you can configure the bot to send a Chat message to their manager requesting approval before fulfilling the request.

Before you can build automations for your Chat apps, you must Configure your Chat app with AppSheet, including granting IAM access to run automations if you selected manual configuration to configure you Chat app.

Add and configure the Send a Chat message task by performing the following steps: 

Add the Send a Chat message task to a bot, as described in Add a task to a bot.
Configure the Send a Chat message task by using the settings described in the table below.
When you are done, save the app by selecting one of the following:
    
Save - Save the app.
Save & verify data - Save the app and verify that it is runnable based on external dependencies.




Configure the Send a Chat message task by using the settings described in the following table.





Setting


Description



Linking
Enable or disable reuse of this component by expanding the Linking panel and toggling the Linking setting. See Reuse automation components.





Table name


Table referenced by the task. Select an existing table in the list or No table.
You can also select a table slice but note that if the selected slice contains a row filter, you may see failures in the task. This is because the user that triggered the automation may not have access to the row because of the slice row filter.
Click Show this table  to view the selected table in a dialog.
See Tables: The Essentials for more information about adding tables.



Message content

Select one of the following in the drop-down:

Select chat spaces to explicitly select the Chat spaces, group Chats, or direct messages (using the Space IDs field) to which you want to send the Chat message.
Respond to same thread to respond to the originating Chat space thread.


Note: If you select Respond to same thread:

For the parent process, don't set linking on. The originating Chat space thread can't be identified when the process is used by multiple bots. See Reuse automation components. 
The parent event must be a Chat event. See Configure Chat events.






Space IDs



Note: This setting is available if you choose Select chat spaces in the Message content drop-down.

Specify the IDs for the Chat spaces, group Chats, or direct messages to which you want to send the Chat message. Click Add and select an item from the drop-down list. Repeat to add additional IDs.




Message text


Chat message text. Specify text, variables, and expressions.



Send an app view (optional)

Optionally, you can send an app view to the Chat space as a Chat card. 

Note: For preview, only deck and detail views are supported from Send a Chat message tasks. For more information, see Supported view types and settings. 






 Expand and customize the Advanced settings, as described below.




Setting


Description




Inputs


Add inputs to dynamically configure a task. For details, see Set input values dynamically in tasks. 

Expand the Advanced section.
Click Add under Inputs.
Enter the name of the input value in the Name field.
Select the data type from the Type drop-down.
    Only a subset of data types are supported for inputs.
To add an initial value or edit any fields:
    
Click  to open the Input dialog.
Add a value or expression in the Initial value field.
        If you don't specify an initial value, then the input value will be required. If an initial value is specified, then the input value is optional.
        
Use of [_THIS] or [_INPUT] are not supported in the Initial value field.


Edit other fields, as required.
Click Done.


Repeat to add additional input values.

Then, use the following expressions to access the input values from the current step: [_INPUT].[inputname]





   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot Chat messagesThe following sections provide tips for troubleshooting Chat messages.See also Troubleshoot Chat apps.
 

 Expand all  | Collapse all
Error: There was a problem fetching Chat spaces for the Google Cloud project ID


To support asynchronous interactions with your Chat app and enable AppSheet to fetch Chat spaces when sending a Chat message from an automation, you need to grant IAM access to run automations. Otherwise, no Chat spaces will be available for selection when configuring the task and the following error message displays in the app editor:
There was a problem fetching Chat spaces for the GCP project ID



Why do I see "Open in app" message in Chat app?

If a feature that is not supported for Chat apps with AppSheet is used in your app, app users are prompted to open the web version of the app to view or edit the feature.
 For example, to edit a Color type field, app users need to open the web version of the app:

In addition, a warning message similar to the following displays:
This view contains certain column types which cannot be edited in Google Chat

Slash command returns error


 When you add slash commands for Chat apps in the Chat API, make sure you enable the Opens a dialog option.





Why is my Chat app not sending messages to a Google Chat space?

If your Chat app is not sending messages to a Chat space:

Check the automation monitor for any warnings or errors.
Check with your organization admin to confirm that the app is allowlisted in the Chat App or Marketplace settings. See Allow users to install Chat apps.



   Was this helpful?How can we improve it?YesNoSubmit   

 Use templates in an automationCustomize content using templates in an automation as described in the following sections:

Customize content using templates
Tips and tricks from the AppSheet Community
Create a template
Manually create a template
Use an existing template
Configure the data sources for storing templates

Customize content using templates
Templates, using formats such as Google Docs or Microsoft Word, enable you to more precisely control the appearance of content sent from an automation bot.
When configuring your bot, you can use templates to customize the following content:

Email body and attachments
SMS messages
Files
Webhooks

In general, you can include the following content in a template:

Text
Images
Variables that refer to column values in your tables
Expressions that yield computed values
Start expressions that display the rows of a table
If expressions that allow you to include or exclude portions of a template

The final result will contain the template contents with all variables and expressions resolved.
Use templates in both event-triggered and scheduled bots; the templates will be nearly identical, differing only in the Start expression used to select the table rows being displayed.
AppSheet supports the content types defined in the following table for templates. Learn more about creating and customizing templates for a particular content type using the links provided.




Template


Supported content types




Email body



Google Docs
Microsoft Word





Email attachment
File
Webhook
 



CSV
FORM_URL_ENCODED (Webhooks only)
Microsoft Excel (XLSX)
HTML
JSON
PDF (source from Google Docs or Microsoft Word)
ICS/iCalendar calendar invitation
XML





SMS


Text (.txt)




For additional template formatting tips and examples, see the following topics:

Use and troubleshoot custom fonts in templates
Display images, thumbnails, drawings, and signatures in templates
Display Address, LatLong, and XY values in templates
Use CONCATENATE(), Ampersand operators, and text expressions in templates
Sample email templates

Tips and tricks from the AppSheet Community
Learn tips and tricks for using templates from the AppSheet Community:

Template tips and tricks
Template Q&A

Create a template
Create a template as described in the following table. See also Create a Microsoft Word template on Google Drive.




Template


Steps




Email body



Create and save or open an existing Send an email task.
Disable Use default content?
Click Create adjacent to the Email Body Template property.

For more information, see Send an email from a bot.




Email attachment



Create or open an existing Send an email task.
Disable Use default content?
Set the content type using the Attachment Content Type property.
Set the Attachment File Store property to the file system where you want your attachments to be saved.
Click Create adjacent to the Attachment Template property.

For more information, see Send an email from a bot.




File



Create or open an existing Create a new file task.
Set the HTTP Content Type property to the desired value.
Set the File Store property to the file system where you want files to be saved.
Click Create adjacent to the Template property.

For more information, see Create and save a file from a bot.




SMS


See Manually create an SMS body template.




Webhook



Create or open an existing a Call a webhook task.
Set the HTTP Content Type property to the desired value.
Set the Body Template Data Source to the desired data source.
Click Create adjacent to the Body Template property.

If you are using the webhook to invoke the AppSheet API, configure the webhook URL value when configuring the webhook before clicking the Create button. AppSheet examines the webhook URL value to determine if the AppSheet API is being invoked. If so, AppSheet uses the table name you specify following /tables/ in the URL to determine the field values to include in the JSON body template.
If your table contains a List of Refs to related child records, the created JSON Body Template file will include a Start expression that extracts the data values of all child records of the parent record. If the child table contains a List of Refs to related grandchild records, the created JSON Body Template file will include a Start expression that extracts the data values of all grandchild records of the child records. The created JSON Body Template file will extract the parent record, the child records, the grandchild records, the great grandchild records, and so on. This allow you to extract the entire hierarchy of records.
For more information, see Call a webhook from a bot.




In each case, AppSheet creates the template and writes it to your default data source unless it is explicitly set. To explicitly set the data source, see Configure the data sources for templates (below).
By default, AppSheet uses the following file naming conventions similar to the following to ensure the template name is unique:
Content/task-name_BodyTemplate_yyyymmdd_hhmmss
  Content/task-name_AttachmentTemplate_yyyymmdd_hhmmss
Click View to view the template and customize the template, as required.
Note: The template properties reference a single template file. You cannot use an expression to specify the template file. If you need to choose between two or more template files, define a separate event for each template file and specify an expression in the Condition property to select which event to invoke.
Manually create a template
You can manually create a template and upload it to one of the the data sources described in Configure the data sources for templates. Then, follow the steps in the next section, Use an existing template.
Use an existing template
To use an existing template:

Create or open an existing task.
Disable Use default content? (if applicable).
Click the Browse icon adjacent to the template property.
Select the data source using the Get data from... dialog box when prompted, then select an existing template file.
Click View to view the template and customize the template, as required.

Configure the data sources for storing templates
To use templates, your account must include one or more of the supported data sources listed below. To add a new data source, see Use multiple data sources.
AppSheet supports the following data source for Google Doc template formats:


Google Drive


AppSheet supports the following data sources for all other template formats:

Box
Dropbox
Google Drive
Microsoft Office 365
Microsoft OneDrive

When creating a template, the template is created on your default data source unless it is explicitly set. For example, if your default data source is Google, when you click Create, the new template is created on your Google Drive. Similarly, if your default data source is Box, Dropbox, Microsoft Office 365, or Microsoft OneDrive, when you click Create, the template file is created on that data source.
To explicitly set the data source to use for a template:

Set the associated Data Source or File Store property, if applicable.
Click the Browse icon adjacent to the template property and select the data source using the Get data from... dialog box, then select an existing template file.
Note: If you click Create after browsing for an existing template file, the new template will be saved to the data source you selected while browsing.

See also Create a Microsoft Word template on Google Drive.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use Google Docs templatesCustomize content using Google Docs templates as described in the following sections:

Customize content using a Google Docs template
View and edit the template
How AppSheet processes the Google Docs template
Include an image in the template
Include an image URL in the template
Tips for formatting the template
Add page breaks in PDF attachments
Use custom fonts
Unsupported features: Page headers, page footers, or page numbering

See also Use templates in a bot.
Customize content using a Google Docs template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using a Google Docs template by performing one of the following tasks:
Create a Google Docs or PDF template, as described in Create a template.
Manually create a Google Docs template in your cloud file system and use it, as described in Use an existing template.
For information about customizing the template, see Customize content using templates and the tips provided below.
View and edit the template
After you create the template, click View to view and edit the template.
How AppSheet processes the Google Docs template
AppSheet reads the Google Docs template in HTML format and replaces the template variables in the HTML template with the data values you specify. The resulting HTML document becomes the email body or attachment. For email attachments, AppSheet converts the HTML document to PDF format before adding it as an attachment.
When you are designing your Google Docs template, it can be helpful to see how it appears in HTML format so that you can fine tune its contents and ensure the best results.

For Send an email tasks, to preview the email click Preview email when configuring the task. The first record in the table is displayed, by default. You need to save the app to preview the latest changes.

To view the Google Docs template in HTML format:

Open the template in Google Docs.
In the Google Docs File menu, click Download as and select Web Page (.html zipped).
Locate the zip file in your Downloads folder.
    If you are using the Chrome browser in Windows, the browser downloads the file as a zip file and display a message at the bottom of your browser window. Click the up arrow and select Show in folder.
Extract the HTML file from the zip file.
For example, on Windows, right-click on the zip file and select Extract All....
Double-click on the extracted HTML file to view it in the browser.

Include an image in the template
Your Google Docs template can include one or more images.

Note: Background and watermark images are not supported at this time.

To include an image:

Open the template in Google Docs.
Position the cursor where you want to insert the image.
From the Google Docs menu select Insert > Image and select the image you wish to include.

When Google Docs exports the template as HTML, it processes the image as follows:

Saves the image on Google Drive.
Creates a URL to the saved image file.
Includes the URL in the exported HTML template in place of the image.

When the template is used as an email body template, the resulting HTML email body contains the image URL. The email client that displays the HTML email body uses the image URL to retrieve and display the image.
When the template is used as a PDF attachment template, the HTML-to-PDF conversion web service retrieves the image using the image URL contained in the HTML file and includes the image in the resulting PDF file.
Include an image URL in the template
Your Google Docs template can include one or more image URLs. Each image URL must refer to a publicly accessible image.
Tips for formatting the template
The following tips may help you control the appearance of your PDF attachments.

Under Format > Line spacing, reduce the line spacing to Single if it is currently larger, such as 1.5, Double, and so on.
Under Format > Line spacing, remove Add space before paragraph and Add space after paragraph.
Under Format > Paragraph styles, change the header formatting to Normal Text rather than Heading 1, Heading 2, and so on. Then apply formatting to control the header's font size, color, boldness, and so on.
Remove any excess blank lines.
Under File > Page setup..., check the page size and margins. For example, consider setting the page size to A4 and reducing the top and bottom margins.

Add page breaks in PDF attachments
You can include page breaks in the PDF file created from an attachment template file by manually inserting a page break in Google Docs.

In Google Docs, position the cursor where you want the page break to occur.
From the Google Docs Insert menu, select Page break.

Use custom fonts
Use of custom fonts is not recommended. Some customers have reported problems when using custom fonts in templates. The PDF service sometimes fails to convert the HTML file to PDF correctly when custom fonts are present. The resulting PDF document may not display the text using the custom font. If you experience this problem, we recommend remove all custom fonts from your Google Docs template.
Unsupported features: Page headers, page footers, or page numbering
To handle automatic page headers, page footers, and page numbering, we would need to implement a page layout engine that computes the page location of each element being displayed. We would need to be aware of page boundaries, so that we could:

Insert a footer at the end of each page.
Insert a bottom margin at the end of each page.
Insert a top margin at the start of each new page.
Insert a header at the start of each new page.
Insert appropriate page numbers.

Due to the complexity involved with managing this implementation, these features are not supported.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use Microsoft Word templatesCustomize content using Microsoft Word templates as described in the following sections:

Customize content using a Microsoft Word template
Create a Microsoft Word template on Google Drive
View the template
Edit the template
How AppSheet processes a Microsoft Word template
Include an image in the template
Include an image URL in the template
Tips for formatting the template
Customize the page layout
Add page breaks in PDF attachments
Unsupported features: Page headers, page footers, or page numbering

See also Use templates in a bot.
Customizing content using a Microsoft Word template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using a Microsoft Word template by performing one of the following tasks:

If your default data source is Box, Dropbox, Microsoft Office 365, or Microsoft OneDrive (in other words, not Google Drive), create a Microsoft Word or PDF template, as described in Create a template.
If your default data source is Google Drive, follow the steps described in Create a Microsoft Word template on Google Drive.
Manually create a Microsoft Word template in your cloud file system and use it, as described in Use an existing template.

For information about customizing the template, see Customize content using templates and the tips provided below.
Create a Microsoft Word template on Google Drive
By default, when your default data source is Google, the Create button will create a Google Docs template file on Google Drive.
To create a Microsoft Word template on Google Drive:

Create a template.
    A Google Docs template is created on Google Drive, by default.
Click View to view the template.
From the Google Docs File menu select Download > Microsoft Word (.docx).
This will convert the Google Docs template to a Microsoft Word template and download it to your browser.
Upload the Microsoft Word template to Google Drive.
    For consistency, upload the Microsoft Word template to the same folder where the newly created Google Docs template resides. Typically this is the Content folder beneath the Default app folder. The Default app folder location is set using the Info > Properties > App Properties tab.
In the AppSheet Editor, click the Browse button and navigate to the Microsoft Word document you just uploaded to Google Drive.
Delete the Google Docs template file from Google Drive, if desired.

View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Note: We do not recommend that you edit the template in this view due to the built-in limitations in the way Microsoft Docs files can be opened and edited from the web.
Edit the template
To edit the template, open the Microsoft Word template from your data source.
How AppSheet processes a Microsoft Word template
AppSheet reads the Microsoft Word template in HTML format and replaces the template variables and expressions in the HTML template with the data values. The resulting HTML document becomes the email body or attachment. AppSheet converts the HTML document to PDF format before adding it as an attachment.
Include an image in the template
Your Microsoft Word template can include one or more images.
To include an image:

Open the template in Microsoft Word.
Position the cursor where you want to insert the image.
From the Microsoft Word menu bar select Pictures and select the image you wish to include.

When AppSheet exports the Microsoft Word template as HTML, it will include the image as an HTML <img> element. The image data is included inline in the src property of the <img> element.
When the template is used as an email body template, the resulting HTML email body contains the HTML <img> element. The email client that displays the HTML email body displays the image.
When the template is used as a PDF attachment template, the HTML-to-PDF conversion web service retrieves the image value from the HTML <img> element and includes the image in the resulting PDF file.
Include an image URL in the template
Your Microsoft Word template can include one or more image URLs. Each image URL must refer to a publicly accessible image.
Tips for formatting the template
The following tips may help you control the appearance of your PDF attachments.

Under Format > Line spacing, reduce the line spacing to Single if it is currently larger, such as 1.5, Double, and so on.
Under Format > Line spacing, remove Add space before paragraph and Add space after paragraph.
Under Format > Paragraph styles, change the header formatting to Normal Text rather than Heading 1, Heading 2, and so on. Then apply formatting to control the header's font size, color, boldness, and so on.
Remove any excess blank lines.
Under File > Page setup..., check the page size and margins. For example, consider setting the page size to A4 and reducing the top and bottom margins.

Customize the page layout
In the Word Document, you can specify the following:

Page Orientation as either Landscape or Portrait.
Page Width and Page Height.
Page Margins for Top, Bottom, Left, and Right.

When AppSheet converts the Word Document into HTML, it honors these settings. The HTML body includes properties similar to the following:

body {
    margin-top: 72pt;
    margin-bottom: 72pt;
    margin-left: 62pt;
    margin-right: 62pt;
    max-height: 612pt;
    max-width: 792pt;
}

Add page breaks in PDF attachments
You can include page breaks in the PDF file created from an attachment template file by manually inserting a page break in the Microsoft Word template.

Select the Insert tab.
Position the cursor where you want the page break to occur.
From the Microsoft Word Pages menu, select Page Break.

Unsupported features: Page headers, page footers, or page numbering
Email templates do not support automatic page headers, page footers, or page numbering. If your Word template file contains Word Headers, Word Footers, or Page Numbers they will be ignored. Instead, you should:

Include your header contents at the start of your template as normal content. It will appear once at the start of the resulting document.
Include your footer contents at the end of your template as normal content. It will appear once at the end of the resulting document.

To handle automatic page headers, page footers, and page numbering, we would need to implement a page layout engine that computes the page location of each element being displayed. We would need to be aware of page boundaries, so that we could:

Insert a footer at the end of each page.
Insert a bottom margin at the end of each page.
Insert a top margin at the start of each new page.
Insert a header at the start of each new page.
Insert appropriate page numbers.

We do not support any of these features because implementing a page layout engine is a lot of work. It is not work that we have done.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use Microsoft Excel templatesCustomize content using Microsoft Excel templates as described in the following sections:

Customize content using a Microsoft Excel template
View the template
Edit the template
Build the Microsoft Excel template

See also Use templates in a bot.
Customize content using a Microsoft Excel template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using a Microsoft Excel template by performing one of the following tasks:


Create a XLSX template, as described in Create a template.


Manually create a Microsoft Excel template in your cloud file system and use it, as described in Use an existing template.


For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Note: We do not recommend that you edit the template in this view due to the built-in limitations in the way Microsoft Excel files can be opened and edited from the web.
Edit the template
To edit the template, open the Microsoft Excel template from your data source.
Build the Microsoft Excel template
AppSheet supports only simple Microsoft Excel templates.
The first row in the Excel template can contain only column header values.
The second row in the Excel template can contain only a Start expression, one or more cell data values, and an End expression, as follows:

The left-most cell contains a Start expression immediately followed by a data value or Microsoft Excel worksheet formula.
Intermediate cells contain data values or Microsoft Excel worksheet formulas.
The rightmost cell contains a data value or Microsoft Excel worksheet formula immediately followed by an End expression.

The Start expression retrieves a set of rows from a table you specify. Each retrieved table row populates a row in the resulting Excel file.
In the following example, the Start expression retrieves rows from the Customer table. The resulting Excel file contains one row for each customer who is 21 years of age or older.

Use Excel worksheet formulas
Your template can include Excel worksheet formulas. In the following template, the Total column contains a worksheet formula which multiplies Price and Qty.

=B2*C2


Format cells
You can apply Excel formatting to the cells of the template. For example, the Price cell could be formatted as a Currency value.
Use multi-worksheet workbooks
Your Excel workbook template can contain one or more worksheets each of which is a template. The resulting .xlsx file contains each of these worksheets.
Limitations

Excel tables are not supported. Templates must be simple worksheets.
Excel pivot tables are not supported.
Nested tables cannot be displayed in the same Excel worksheet. For example, you cannot display each Order record followed its child Order Detail records.

Troubleshoot
You may see the following Excel error message when you attempt to open the resulting Excel .xlsx file.

Excel cannot open the file <filename>.xlsx because the file format or file extension is not valid. Verify that the file has not been corrupted and that the file extension matches the format of the file.

This error can occur if you use a Google Docs template file rather than a Microsoft Excel template file. If you inadvertently use a Google Docs template file, the output is an HTML file that may look like an Excel worksheet but it will not be a valid Excel .xlsx file.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use HTML templatesCustomize contents using HTML templates as described in the following sections:

Customize content using an HTML template
View the template
Edit the template
Manually create an HTML template

See also Use templates in a bot.
Customize content using an HTML template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using an HTML template by performing one of the following tasks:

Create an HTML template, as described in Create a template.
Manually create an HTML template in your cloud file system and use it, as described in Use an existing template.

For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Edit the template
Edit the template using your preferred method.
To edit the template on your local computer:

Download the template file from your data source to your computer.
Edit the template file on your computer using the text editor of your choice.
Upload the edited template file from your computer to your data source.

Manually create an HTML template
Manually create an HTML template file by creating an empty text file, entering valid HTML, and saving the file using an .html extension.
Template variables like <<FirstName>> must be HTML encoded. For example, the < character is HTML encoded as &lt; and the > character is HTML encoded as &gt;.
The following provides an example HTML file with HTML encoding:

<html>
  <head>
  </head>
  <body>
      <h1>MyTable</h1>
         <p>UpdateMode: &lt;&lt;_UPDATEMODE&gt;&gt;</p>
         <p>Application: &lt;&lt;_APPNAME&gt;&gt;</p>
         <p>TableName: &lt;&lt;_TABLENAME&gt;&gt;</p>
         <p>UserName: &lt;&lt;_USERNAME&gt;&gt;</p>
         <p>LastName: &lt;&lt;[LastName]&gt;&gt;</p>
         <p>FirstName: &lt;&lt;[FirstName]&gt;&gt;</p>
         <p>Age: &lt;&lt;[Age]&gt;&gt;</p>
         <p>Computed Total: &lt;&lt;[Qty]*[Price]&gt;&gt;</p>
         <p>ComputedName: &lt;&lt;[_ComputedName]&gt;&gt;</p>
  </body>
</html>
 
After the template file is saved to your computer, upload it to one of the data sources described in Configure the data sources for storing templates.
For example, you can upload the template file to Google Drive, as follows.

Ensure that the Convert uploaded files to Google Docs editor format option is disabled as described in Upload .txt templates to Google Drive.
Open Google Drive and navigate to the Google Drive folder where you wish to upload the file.
Click New and then click File upload.
When the file open dialog appears, navigate to the template file on your computer, select the file, and click Open.

After the template file is uploaded, use it as described in Use an existing template.
Each time you modify the HTML template you must upload the template file to Google Drive. Google Drive will retain the original DocId. AppSheet will use the last uploaded version of the template file as the attachment template.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use JSON templates
Customize content using JSON templates as described in the following sections:

Customize content using a JSON template
View the template
Edit the template
Manually create a JSON template

See also Use templates in a bot.
Customize content using a JSON template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using a JSON template by performing one of the following tasks:

Create an JSON template, as described in Create a template.
Manually create a JSON template in your cloud file system and use it, as described in Use an existing template.

For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Edit the template
Edit the template using your preferred method.
To edit the template on your local computer:

Download the template file from your data source to your computer.
Edit the template file on your computer using the text editor of your choice.
Upload the edited template file from your computer to your data source.

For example, to download the template file from Google Drive to your computer:

In the AppSheet Editor click View adjacent to the template name.
Download the template file to your computer.
    For example, if you are using the Google Chrome browser:
    
Download the template file to your computer by clicking the Download button at the top right of the browser screen.
You will see the downloaded file in the bottom left of the browser screen. Click ^ to the right of the downloaded template name and select Show in Finder.



To edit the template file on your computer:

Open the template file in the text editor of your choice. For example, on Windows you might use Notepad.
Edit the template file and save your changes.

To upload the edited template file from your computer to Google Drive:

In the AppSheet Editor click View adjacent to the template name.
If you are using the Google Chrome browser, click More actions in the top right of the browser screen and select Details.
Click the folder name link to the right of the Location property to open the Google Drive folder containing the template file.
Drag and drop the updated template file from the folder on your computer to the Content folder on Google Drive. The template file will retain its original DocId on Google Drive.

Manually create a JSON template
Manually create a JSON template file by creating an empty text file, entering valid JSON, and saving the file using an .json extension.
The following provides an example JSON file:

{
  "MyTable": [
  <<Start: Select(MyTable[MyKey], TRUE)>>
      {
         "UpdateMode": "<<_UPDATEMODE>>",
         "Application": "<<_APPNAME>>,
         "TableName": "<<_TABLENAME>>,
         "UserName": "<<_USERNAME>>,
         "LastName": "<<[LastName]>>",
         "FirstName": "<<[FirstName]>>",
         "Age": "<<[Age]>>",
         "Computed Total": "<<[Qty]*[Price]>>",
         "ComputedName": "<<_ComputedName>>"
      },
   <<End>>
   ]
}
 
After the template file is saved to your computer, upload it to one of the data sources described in Configure the data sources for storing templates.
For example, you can upload the template file to Google Drive, as follows.

Ensure that the Convert uploaded files to Google Docs editor format option is disabled as described in Upload .txt templates to Google Drive.
Open Google Drive and navigate to the Google Drive folder where you wish to upload the file.
Click New and then click File upload.
When the file open dialog appears, navigate to the template file on your computer, select the file, and click Open.

After the template file is uploaded, us it as described in Use an existing template.
Each time you modify the JSON template you must upload the template file to Google Drive. Google Drive will retain the original DocId. AppSheet will use the last uploaded version of the template file as the attachment template.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use CSV templates
Customize content using CSV templates as described in the following sections:

Customize content using a CSV template
View the template
Edit the template
Manually create a CSV template

See also Use templates in a bot.
Customize content using a CSV template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using a CSV template by performing one of the following tasks:

Create a CSV template, as described in Create a template.
Manually create a CSV template in your cloud file system and use it, as described in Use an existing template.

For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Edit the template
Edit the template using your preferred method.
To edit the template on your local computer:

Download the template file from your data source to your computer.
Edit the template file on your computer using the text editor of your choice.
Upload the edited template file from your computer to your data source.

For example, to download the template file from Google Drive to your computer:

In the AppSheet Editor click View adjacent to the template name.
Download the file to your computer.
    For example, if you are using the Google Chrome browser:
    
Download the template file to your computer by clicking the Download button at the top right of the browser screen.
You will see the downloaded file in the bottom left of the browser screen. Click ^ to the right of the downloaded template name and select Show in Finder.



To edit the template file on your computer:

Open the template file in the text editor of your choice. For example, on Windows you might use Notepad.
Edit the template file and save your changes.

To upload the edited template file from your computer to Google Drive:

In the AppSheet Editor click View adjacent to the template name.
If you are using the Google Chrome browser, click More actions in the top right of the browser screen and select Details.
Click the folder name link to the right of the Location property to open the Google Drive folder containing the template file.
Drag and drop the updated template file from the folder on your computer to the Content folder on Google Drive. The template file will retain its original DocId on Google Drive.

Manually create a CSV template
Manually create a CSV template file by creating an empty text file, entering valid CSV text, and saving the file to your computer.
The following provides an example CSV file:

"UpdateMode","Application","TableName","UserName","LastName","FirstName","Age","ComputedTotal","ComputedName"

<<Start: Select(MyTable[MyKey], TRUE)>>

"<<_UPDATEMODE>>","<<_APPNAME>>","<<_TABLENAME>>","<<_USERNAME>>","<<[LastName]>>","<<[FirstName]>>","<<[Age]>>","<<[Qty]*[Price]>","<<_ComputedName>>"

<<End>>
 
After the template file is saved to your computer, upload it to one of the data sources described in Configure the data sources for storing templates.
For example, you can upload the template file to Google Drive, as follows.

Ensure that the Convert uploaded files to Google Docs editor format option is disabled as described in Upload .txt templates to Google Drive.
Open Google Drive and navigate to the Google Drive folder where you wish to upload the file.
Click New and then click File upload.
When the file open dialog appears, navigate to the template file on your computer, select the file, and click Open.

After the template file is uploaded, use it as described in Use an existing template.
Each time you modify the CSV template you must upload the template file to Google Drive. Google Drive will retain the original DocId. AppSheet will use the last uploaded version of the template file as the attachment template.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use XML templatesCustomize content using XML templates as described in the following sections:

Customize contents using an XML template
View the template
Edit the template
Manually create an XML template

See also Use templates in a bot.
Customize content using an XML template
When configuring a Send an email, Call a webhook, or Create a new file task, customize content using an XML template by performing one of the following tasks:

Create an XML template, as described in Create a template.
Manually create an XML template in your cloud file system and use it, as described in Use an existing template.

For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Edit the template
Edit the template using your preferred method.
To edit the template on your local computer:

Download the template file from your data source to your computer.
Edit the template file on your computer using the text editor of your choice.
Upload the edited template file from your computer to your data source.

For example, to download the template file from Google Drive to your computer:

In the AppSheet Editor click View adjacent to the template name.
Download the template file to your computer.
    For example, if you are using the Google Chrome browser:
    
Download the template file to your computer by clicking the Download button at the top right of the browser screen.
You will see the downloaded file in the bottom left of the browser screen. Click ^ to the right of the downloaded template name and select Show in Finder.



To edit the template file on your computer:

Open the template file in the text editor of your choice.
    For example, on Windows you might use Notepad.
Edit the template file and save your changes.

To upload the edited template file from your computer to Google Drive:

In the AppSheet Editor click View adjacent to the template name.
If you are using the Google Chrome browser, click More actions in the top right of the browser screen and select Details.
Click the folder name link to the right of the Location property to open the Google Drive folder containing the template file.
Drag and drop the updated template file from the folder on your computer to the Content folder on Google Drive. The template file will retain its original DocId on Google Drive.

Manually create the XML template
Manually create a XML template file by creating an empty text file, entering valid XML, and saving the file using the .xml extension.
The following provides an example XML file:

<?xml version="1.0" encoding="UTF-8"?>
<records>
   <<Start: Select(MyTable[MyKey], TRUE)>>
      <record>  
         <UpdateMode><<_UPDATEMODE>></UpdateMode>
         <Application><<_APPNAME>></Application>
         <TableName><<_TABLENAME>></TableName>
         <UserName><<_USERNAME>></UserName>
         <LastName><<[LastName]>></LastName>
         <FirstName><<[FirstName]>></FirstName>
         <Age><<[Age]>></Age>
         <Computed Total><<[Qty]*[Price]></Computed Total>
         <ComputedName><<_ComputedName>></ComputedName>
      </record>
   <<end>>
</records> 

After the template file is saved to your computer, upload it to one of the data sources described in Configure the data sources for storing templates.
For example, to upload the template file to Google Drive:

Ensure that the Convert uploaded files to Google Docs editor format option is disabled as described in Upload .txt templates to Google Drive.
Open Google Drive and navigate to the Google Drive folder where you wish to upload the file.
Click New and then click File upload.
When the file open dialog appears, navigate to the template file on your computer, select the file, and click Open.

After the template file is uploaded, us it as described in Use an existing template.
Each time you modify the XML template you must upload the template file to Google Drive. Google Drive will retain the original DocId. AppSheet will use the last uploaded version of the attachment template.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use ICS/iCalendar templates
Most of us are used to receiving calendar invitations in an email message. Using AppSheet bots, you can customize and attach calendar invitations to your communications.
At a mechanical level, this involves creating a calendar invitation file that is sent along with your communication. The calendar invitation file uses a well-known format called ICS /iCalendar, and typically have an .ics extension.
Customize calendar invitations using an ICS/iCalendar template as described in the following sections:

Customize calendar invitation content using an ICS/iCalendar template
View the template
Edit the template
Manually create a calendar invitation template

Customize calendar invitation content using an ICS/iCalendar template
When configuring a Send an email, Call a webhook, or Create a new file task, customize the contents of a calendar invitation using an ICS/iCalendar template by performing one of the following tasks:

Create an ICS_CALENDAR template, as described in Create a template.
Manually create the calendar invitation template in your cloud file system and use it, as described in Use an existing template. Ensure that the file is a text file with an .ics file extension and that contains valid ICS content.

For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to download the template file from your cloud system.
Edit the template
Most cloud file systems like Google Drive will not let you edit an .ics file directly. To edit the template you must:

Download the template file from your cloud file system to your computer.
Edit the template file on your computer using the text editor of your choice (eg: Notepad).
Upload the edited template file from your computer to your cloud file system.

Manually create a calendar invitation template
Manually create an ICS/iCalendar template file by creating an empty .ics file, entering valid ICS content, and saving the file using the .ics extension.
The following provides a simple example of an ICS/iCalendar file. The .ics format is very rich and can construct very complex calendar invitations. For more information and examples, see: https://icalendar.org
BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//appsheet.com//appsheet 1.0//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
SUMMARY:Invitation from <<USEREMAIL()>> to talk about <<[MeetingTopic]>>
UID:c7614cff-3549-4a00-9152-d25cc1fe077d
SEQUENCE:0
STATUS:CONFIRMED
TRANSP:TRANSPARENT
DTSTART:<<[StartDateTime]>>
DTEND:<<[EndDateTime]>>
LOCATION:<<[MeetingAddress]>>
DESCRIPTION:<<[MeetingDescription]>>
END:VEVENT
END:VCALENDAR

  Notice that the template includes placeholders (for example, <<[StartDateTime]>>) that will be dynamically replaced by actual values when the action is executed. The actual placeholder expressions will depend on the specifics of your app.
To learn how fellow app creators are using this feature, see the conversation about calendar invitations in the community.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use form URL-encoded templatesCustomize content using form URL-encoded templates as described in the following sections:

Customize content using a form URL-encoded template
View the template
Edit the template
Manually create a form URL-encoded template

See also Use templates in a bot.
Customize content using a form URL-encoded template
When configuring a Call a webhook task, customize content using a form URL-encoded template by performing one of the following tasks:

Create a FORM_URL_ENCODED template, as described in Create a template.
Manually create a form URL-encoded template in your cloud file system and use it, as described in Use an existing template.

For information about customizing the template, see Customize content using templates and the tips provided below.
View the template
After creating or selecting the template, click View adjacent to the template property to view the template.
Edit the template
Edit the template using your preferred method.
To edit the template on your local computer:

Download the template file from your data source to your computer.
Edit the template file on your computer using the text editor of your choice.
Upload the edited template file from your computer to your data source.

For example, to download the template file from Google Drive to your computer:

In the AppSheet Editor click View adjacent to the template name.
Download the file to your computer.
    For example, if you are using the Google Chrome browser:
    
Download the template file to your computer by clicking the Download button at the top right of the browser screen.
You will see the downloaded file in the bottom left of the browser screen. Click ^ to the right of the downloaded template name and select Show in Finder.



To upload the edited template file from your local computer to Google Drive:

In the AppSheet Editor click View adjacent to the template name.
If you are using the Google Chrome browser, click More actions in the top right of the browser screen and select Details.
Click the folder name link to the right of the Location property to open the Google Drive folder containing the template file.
Drag and drop the updated template file from the folder on your computer to the Content folder on Google Drive. The template file will retain its original DocId on Google Drive.

To edit the template file on your computer:

Open the template file in the text editor of your choice. For example, on Windows you might use Notepad.
Edit the template file and save your changes.

Manually create a form URL-encoded template
Manually create a form URL-encoded template file by creating an empty text file, entering valid CSV text, and saving the file to your computer.
A form URL-encoded template typically contains a series of field name = field value pairs in the form:

<field name> = <field value> &

  AppSheet automatically URL encodes each field name and field value in the template. For example:

LastName=<<[LastName]>>&
FirstName=<<[FirstName]>>&
Age=<<[Age]>>&
Computed Total=<<[Qty]*[Price]>>

  You can include carriage return and line feed characters in the template to make it more readable.
After the template file is saved to your computer, upload it to one of the data sources described in Configure the data sources for storing templates.
For example, you can upload the template file to Google Drive, as follows.

Ensure that the Convert uploaded files to Google Docs editor format option is disabled as described in Upload.txt templates to Google Drive.
Open Google Drive and navigate to the Google Drive folder where you wish to upload the file.
Click New and then click File upload.
When the file open dialog appears, navigate to the template file on your computer, select the file, and click Open.

After the template file is uploaded, us it as described in Use an existing template.
Each time you modify the form URL-encoded template you must upload the template file to Google Drive. Google Drive will retain the original DocId. AppSheet will use the last uploaded version of the template file as the attachment template.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use variables in templatesYou can use the following types of variables in your templates:

Column name variables
Expression variables
Built-in variables


When using variables within an HTML block, they must be HTML encoded. For example, the < character is HTML encoded as &lt; and the > character is HTML encoded as &gt;. For example <<[Order Number]>> must be specified as: 
<html>
...
&lt;&lt;[Order Number]&gt;&gt;
...
</html>

Column name variables
Column name variables allow you to display or retrieve the value of a data column. The column name must exactly match the column name in your table and be enclosed in square brackets. The column name variable is replaced by the value of that column.
For example, to display the value of the Order Number column in your email template:

Order Number is <<[Order Number]>>
Note: When a data column value is displayed in an HTML document, it is always HTML encoded. See Prevent cross-site scripting attacks using HTML encoding.
You can also display the value of a column both before and after it is updated.
Expression variables
Expression variables allow you to compute values. You can use any expression in an expression variable. The expression variable is replaced by the result of the expression's evaluation.
For example, you can display the result of the Amt column value times the Qty column value as follows:

<<[Amt] * [Qty]>>
Dereference expression variables
Use a dereference expression to display the value of a column in a referenced record using the following format:

[Column Containing Reference].[Column in Referenced Table]
For example, the following expression retrieves the product's price from the Products table:

<<[Product].[Price]>>

In this example, Product is the name of a column of type Ref in the Order Details table that refers to the Products table. Price is the name of the column in the Products table that contains the product's price.
You can use dereference expressions when computing values. For example:

Total Amount: <<[Product].[Price] * [Quantity]>>

Built-in variables
Built-in variables enable you to access a set of values provided by AppSheet. Built-in variable names always begin with an underscore (_).

Built-in variables can be used only in templates and when configuring certain automation properties, such as an email or SMS message body. They cannot be used in expressions.

AppSheet provides the following built-in variables. 




Built-in variable


Description




<<_APPID>>


Application GUID (Globally Unique Identifier) that uniquely identifies your app.
Example: 
8c26466f-1db0-4032-9c0f-40c2a588cf50




<<_APPNAME>>


Name of your app.
Example: 
MyApp-10301




<<_APPOWNER>>


Owner ID of your app.
Example: 
10301




<<_ATTACHMENTFILENAME>>


Archive attachment filename. See How the archive attachment filename is formed.
Example:
MyAttachmentName20190207_133355_804.pdf




<<_ATTACHMENTFILE_URL>>


Archive attachment file URL.




<<_ATTACHMENTFILE_WEB_LINK>>


Link to the archive attachment file. The attachment name is used as the hyperlink text.
 
Note: This variable can be used in a body or attachment template. It cannot be used in the Body property.




<<_ATTACHMENTNAME>>


Email attachment name.




<<_NOW>>


Current date and time.
Example:
6/15/2021 1:45:30 PM




<<_ROWKEY>>


Key value of the added, deleted, or updated record.




<<_ROW_WEB_LINK>>


Link to the added or updated record in your app. For example, you can include this URL in an email to allow the email recipient to easily open the added or updated record.
 
Note: This variable can be used in a body or attachment template. It cannot be used in the Body property.




<<_ROW_WEB_URL>>


URL that refers to the added or updated record in your app. For example, you can include this URL in an email to allow the email recipient to easily open the added or updated record. The full URL is displayed.




<<_RULENAME>>


Name of the automation component (such as, the task).
Example:
Send an email




<<_TABLENAME>>


Name of your table.
Example:
Orders




<<_TIMENOW>>


Current time.
Example:
1:45:30 PM




<<_TODAY>>


Current date.
Example:
6/15/2021




<<_UPDATEMODE>>


Name of the operation that triggered the automation rule.
Example:
Add, Delete, or Update




<<_USEREMAIL>>


Current user's email address.
Example:
jmorgan@google.com




<<_USERNAME>>


Current user's name.
Example:
Julie Morgan




Prevent cross-site scripting attacks using HTML encoding
AppSheet always HTML encodes field values when they are displayed in an HTML document. HTML encoding ensures that field values are displayed as simple text by the browser and that field values are not interpreted by the browser as HTML. This is essential to prevent Cross-site Scripting (XSS) attacks when a user enters JavaScript in a field, such as:

<script type="text/javascript">
    function doSomethingEvil() { /* ... */ }
</script>
   Was this helpful?How can we improve it?YesNoSubmit   

 Use Start expressions in templatesUse Start expressions as described in the following sections:

Display a list of records using Start expressions in templates
Access columns in parent and grandparent records
Common Start expressions
Control the record order
Control the number of records displayed
Troubleshoot Start and End expressions


When used in an HTML template, Start expressions must appear within a <p> or heading element.

Display a list of records using Start expressions in templates
Start expressions are used in templates to display a list of records. The Start expression appearing at the beginning of the template controls which records are displayed. Then, the template is used to format each record.
Each template starts with <<Start:StartExpression>> and ends with <<End>>. The Start expression following the colon yields a list of records to be formatted using the template. To be more specific, the Start expression yields the list of key values of the table rows to be formatted using the template.
A template may contain one or more embedded templates. You can display a hierarchy of records by embedding one template within another. For example, you can display Customers, Orders, and Order Details records in a three-level hierarchy by:

Creating a template for Customers.
Creating an embedded template for Orders within the Customers template.
Creating an embedded template for Order Details within the Orders template.

An Embedded template with a Start expression is used in the following use cases.

Embedded expression in a data change bot
    A data change bot is fired when a specific record in a table is modified. For example, a data change bot associated with the Orders table is triggered when an Order is changed. The template is evaluated in the context of the changed record. Your template can display both the specifics of the Orders record and the Order Details records associated with that Orders record. Your template must include an embedded template with a Start expression to display the Order Details records.
Top-level expression in a scheduled bot
    In a scheduled bot, you can display a set of records. For example, you can display all Orders or all open Orders. Your template must include an embedded template with a Start expression to display the Orders records.
Embedded expression in a scheduled bot
    In a scheduled bot, you can display a hierarchy of records. For example, you can display all open Orders records along with their related Order Details records. Your template must include an embedded template with a Start expression to display the Orders records. Then create an embedded template for Order Details within the Orders template.

Example
Consider this template which is used in a data change bot when an Orders record is updated. It contains an embedded template to display all of the Order Details records for the updated Orders record.
The embedded template contains the following Start expression:
<<Start:[Related Order Details]>>
It is important to remember that the Start expression is evaluated in the context of the template that contains it. In this case, the outer template is used to format the Orders record, so the Start expression is evaluated in the context of that Orders record. Therefore, the Start expression can make use of the columns in the current Orders record.
By contrast, the expressions between <<Start>> and <<End>>, other than the Start expression, are evaluated in the context of each child record. In our example, since the Start expression refers to the Order Details records, the expressions between <<Start>> and <<End>> are evaluated in the context of a child Order Details record. The expressions between <<Start>> and <<End>> normally refer to the columns of the Order Details record.
The embedded template is evaluated once for each child record returned by the Start expression. For example, if there are five child Order Details records, the embedded template is evaluated five times.
Access columns in parent and grandparent records
Within an embedded template, you can refer to the columns of tables of your outer-level templates. For example, you might have a three-level hierarchy of templates consisting of a Customer record, an embedded child Order record, and a further embedded grandchild Order Detail record.
Access a column in a parent record
In the embedded Order Detail template, you refer to columns of the parent Order record by specifying a dereference expression of the form:
[_THISROW-1].[ParentRecordColumnName]
For example, [_THISROW-1].[Order Date] retrieves the value of the Order Date column of the parent Order record
Note: There cannot be any embedded white spaces in the [_THISROW-n] string. The value n is a constant number value; it cannot be an expression.
Access a column in a grandparent record
In the embedded Order Detail template, you refer to columns of the grandparent Customer record by specifying a dereference expression of the form:
[_THISROW-2].[GrandparentRecordColumnName]
For example, [_THISROW-2].[Phone] retrieves the value of the Phone column of the grandparent Customer record.
[_THISROW] => Top level
[_THISROW-1] => One level up to the parent
[_THISROW-2] => Two levels up to the grandparent
[_THISROW-3] => Three levels up to the great grandparent
[_THISROW-n] => n levels up
Common Start expressions
A Start expression may take several forms. The following provide some common examples.
An entire table
The simplest Start expression is the name of a table and its key column:

<<Start:Orders[Order Id]>>

This form of Start expressions is typically only meaningful as the top-level Start expression in a scheduled bot.
Reverse reference
A common Start expression is the name of a reverse reference virtual column. For example:
<<Start:[Related Order Details]>>
The Orders record contains the reverse reference virtual column Related Order Details. This virtual column was automatically added by AppSheet to contain the reverse references from the Orders table to the child Order Details table. It contains the list of key values of the related child Order Details records. In the example above, the column name Related Order Details must be enclosed in square brackets.
Reverse reference with a condition
Another common Start expression is the name of a reverse reference virtual column that selects a subset of the referenced records. You can achieve this by enclosing the reverse reference in a SELECT expression. For example:
<<Start:SELECT([Related Order Details][OrderDetail Id], [Order Status] = "Open")>>
The Orders record contains the reverse reference virtual column Related Order Details. In the example above, the column name Related Order Details must be enclosed in square brackets.
This virtual column was automatically added by AppSheet to contain the reverse references from the Orders table to the child Order Details table. It contains the list of key values of the related child Order Details records. AppSheet originally named this column Related Order Details [Order Id]. In the example, we needed to rename the column to Related Order Details to use it in the SELECT expression because the square brackets around [Order Id] in the original AppSheet generated name prevent the expression from working.
A SELECT expression in a Start expression must always return a list of key values, so the first argument of the SELECT expression is [Related Order Details][OrderDetail Id]. The value [Related Order Details] is the name of the reverse reference column. The value [OrderDetail Id] is the name of the key column of the Order Details table. Taken together, the first argument returns the keys of all referenced Order Details records.
The second argument of the SELECT expression includes only those referenced Order Details records where the Order Status is Open.
SELECT expression
You can display a subset of the child records by specifying a SELECT expression that yields the key values of the child records you wish to display.
<<Start: SELECT(Orders[Order Id], AND(IN([Order Id],[_THISROW].[Related Orders]), [Order Status] = "Open"))>>
The SELECT expression must yield a list of key values. In this example, the Order Id column is the key of the Orders table.
Control  the record order
You can use OrderBy to control the order in which records are displayed.
The parameters to the OrderBy() function are OrderBy(ListOfRecords, SortColumn, SortDescending).
You can display the Order Details records in order from most expensive to least expensive using the following Start expression. The Total column contains the total value of each Order Details record:
<<Start:OrderBy([Related Order Details], [Total], FALSE)>>
You can display "Open" Orders records by Order Date using the following Start expression:
<<Start:OrderBy(SELECT(Orders[Order Id], [Order Status]="Open"),[Order Date],TRUE)>>
You can display "Open" Orders records by inverse Order Date using the following Start expression:
<<Start:OrderBy(SELECT(Orders[Order Id], [Order Status]="Open"),[Order Date],FALSE)>>
Control the number of records displayed
You can limit the maximum number of records displayed by using the Top function.
The parameters of the Topfunction are Top(OrderedListOfRecords, MaxNumberOfRecords).
Note: Top only works with OrderBy and cannot be used in isolation.
Display at most 3 records as follows:
<<Start:Top(OrderBy([Related Orders], [Order Date]), 3)>>
Display the most recent "Open" Orders record using this Start expression:<<Start:Top(OrderBy(SELECT(Orders[Order Id], [Order Status]="Open"),[Order Date],TRUE),1)>>
Display the oldest "Open" Orders record using this Start expression:<<Start:Top(OrderBy(SELECT(Orders[Order Id], [Order Status]="Open"),[Order Date],FALSE),1)>>
Troubleshoot Start and End expressions
The following list common error messages and how to address them.
Incomplete Start expression
If your Start expression contains an error and the displayed error message only contains part of your Start expression, ensure that your Start expression does not contain an embedded carriage return. Embedded carriage returns confuse the expression parser. This is especially common when the Start expression is contained in a table cell. In this case it is easy to inadvertently enter a carriage return within the Start expression.
Found 1 unmatched 'End'
The error message Found 1 unmatched 'End' indicates that the expression parser found an End expression but could not find its matching Start expression.
Ensure that your Start expression does not contain an embedded carriage return. Embedded carriage returns confuse the expression parser. This is especially common when the Start Expression is contained in a table cell. In this case it is easy to inadvertently enter a carriage return somewhere within the Start expression. For example, you may find a carriage return in the middle of the Start expression, between << and Start, following Start:, or before the closing >>.
Found 1 unmatched 'Start'
The error message Found 1 unmatched 'Start' indicates that the expression parser found a Start expression but could not find its matching End expression.
Ensure that your End expression does not contain an embedded carriage return. Embedded carriage returns will confuse the expression parser. This is especially common when the End expression is contained in a table cell. In this case it is easy to inadvertently enter a carriage return within the End expression. For example, you may find a carriage return between << and End or between End and >>.
Found n '<<' values but m '>>' values
Ensure that all of your Start and End expressions begin with << and end with >>.
   Was this helpful?How can we improve it?YesNoSubmit   

 Use If expressions in templatesUse <<If>> expressions to conditionally include or exclude portions of a template. You can use <<If>> expressions in:

Google Docs templates
Microsoft Word templates
Email Subject, Body, and PreHeader templates
Notify Title and Body templates
SMS Body templates
Webhook Body templates

Each <<If>> expression begins with <<If: yesno-expression>> and ends with <<EndIf>>. If the yesno-expression evaluates as TRUE, the template content between <<If>> and <<EndIf>> tags is included; otherwise, it is excluded.
The following sections describe ways that you can use If expressions:

Conditionally display a field using If expressions
Conditionally format a field using If expressions
Display an updated field using If expressions
Nest If expressions
Include Start expressions in If expressions
Include If expressions in Start expressions
Include images in If expressions
Include If expressions in table cells

Conditionally display a field using If expressions
You can use an <<If>> expression to conditionally display a column value.
For example, you can display the Address column value if the person is at least 21 years old; otherwise, the Address column value is omitted:

<<If: ([Age] >= 21)>>
Address: <<[Address]>>
<<EndIf>>
 
Or, all in a single line:
<<If: ([Age] >= 21)>>Address: <<[Address]>><<EndIf>>
In the following example, the Sales Tax is included if Total is $1.00 or more.

{
   "Action": "Edit",
   "Properties": {
      "Locale": "en-US",
      "Location": "47.623098, -122.330184",
      "Timezone": "Pacific Standard Time"
   },
  "Rows": [
    <<Start: Filter(OrderDetails, true)>>
    {
      "Name": "<<[Name]>>",
      "Qty": "<<[Qty]>>",
      "Price": "<<[Price]>>",
      "Total": "<<[Qty]*[Price]>>",
      <<If: [Qty]*[Price] >= 1.00>>
      "Sales Tax": "<<[Qty]*[Price]*0.085>>",
      <<EndIf>>
      "Email": "<<[Email]>>",
      "Product Image": "<<[Product Image]>>"
    },
    <<End>>
  ]
}
Conditionally format a field using If expressions
You can use an <<If>> expression to conditionally format a field. For example, you can display a column's value as normal text if its value is small, or in bold text if its value is large:

<<If: ([Amt] < 100)>>
Amount: <<[Amt]>>
<<EndIf>>
<<If: ([Amt] >= 100)>>
Amount: <<[Amt]>>
<<EndIf>>

  As another example, you can display a field value in red text if it is a negative value or in green text if it is positive:

<<If: ([Amt] < 0)>>
Amount: <<[Amt]>>
<<EndIf>>
<<If: ([Amt] >= 0)>>
Amount: <<[Amt]>>
<<EndIf>>

Display an updated field using If expressions
You can use an <<If>> expression to display a field when its value has changed. For example:

<<If: ([_THISROW_BEFORE].[Address] <> [_THISROW_AFTER].[Address])>>
Old Address: <<[_THISROW_BEFORE].[Address]>>
New Address: <<[_THISROW_AFTER].[Address]>>
<<EndIf>>

Nest If expressions
You can nest <<If>> expressions to arbitrary depth. For example:

<<If: ([Age] >= 21)>>
<<If: ([Gender] = "Male")>>
<<If: ISNOTBLANK([Address])>>
Address: <<[Address]>>
<<EndIf>>
<<EndIf>>
<<EndIf>>
 
Or, more concisely:

<<If: AND(([Age] >= 21), ([Gender] = "Male"), ISNOTBLANK([Address]))>>
Address: <<[Address]>>
<<EndIf>>

Include Start expressions in If expressions
You can include <<Start>> expressions in <<If>> expressions. For example:

<<If: COUNT([Related OrderDetails])>0>>

Order Detail Records

<<Start: [Related OrderDetails]>>

Product: <<[Product]>>
Qty: <<[Qty]>>
Amount: <<[Amount]>>

<<End>>

<<EndIf>>

Include If expressions in Start expressions
You can include <<If>> expressions in <<Start>> expressions. For example:

Order Detail Records

<<Start: [Related OrderDetails]>>

Product: <<[Product]>>
<<If: ([Qty] > 1)>>Qty: <<[Qty]>><<EndIf>>
Amount: <<[Amount]>>
<<End>>

Include images in If expressions
You can include images in <<If>> expressions. This allows you to include or exclude an image based on the value of the <<If>> expression. For example:

<<If: ISNOTBLANK([Image])>>
Image: <<[Image]>>
<<Endif>>

Include web images in If expressions
You can include web images in <<If>> expressions. This allows you to include or exclude an image obtained from the web based on the value of the <<If>> expression.
For example, when using a Google Docs template, you can conditionally include a web image as follows:

Open the template in Google Docs.
From the Insert menu, select Image, then choose an image. For example, you could select By URL to enter a URL, such as:
http://cdn0.iconfinder.com/data/icons/harmonicons-02/64/check-box-512.png
Click the inserted image and resize as desired.
Insert an <<If>> before the image:
<<If: ([Answer] = TRUE)>>
Insert an <<Endif>> after the image. For example:
<<Endif>>

This will include a marked checkbox image if the Answer column value is TRUE.
You can include an unmarked checkbox image if the Answer column value is FALSE, as follows:

Repeat the first three steps in the previous procedure, but enter the following URL:http://chittagongit.com//images/square-icon/square-icon-13.jpg
Insert an <<If>> before the image. For example:
<<If: ([Answer] = FALSE)>>
Insert an <<Endif>> after the image. For example:

<<Endif>>
Include If expressions in table cells
You can include <<If>> expressions in table cells to include or exclude content within the cell.
The following example displays the person's Age if they are an adult and Minor otherwise.

The following example displays the Count in bold italics if it negative and in normal text otherwise.

   Was this helpful?How can we improve it?YesNoSubmit   

 Display images, thumbnails, drawings, and signatures in templatesDisplay images, thumbnails, drawings, and signatures in templates as described in the following sections:

Include image, thumbnail, drawing, and signature columns in templates
Control the display of images, thumbnails, drawings, and signatures
Link to an image

Include image, thumbnail, drawing, and signature columns in templates
You can include image, thumbnail, drawing, and signature columns in templates.
For example, if your Image column is called MyPhoto, you could include it as follows:

Name: <<[Name]>>
Photo: <<[MyPhoto]>>
Address: <<[Home Address]>>

Control the display of images, thumbnails, drawings, and signatures
By default, the image, thumbnail, drawing, and signature columns are displayed as images. The display image size depends on the column type, as follows:




Column type


Default display size




Drawing


600x600




Image


600x600




Signature


600x600




Thumbnail


200x200




You can create a format rule to control how the image, thumbnail, drawing, and signature values are displayed, including:


Whether each value is displayed as an image or a URL


The size of each displayed value


To create a format rule to control the display of the columns:

Open the AppSheet Editor.
Go to App > Format Rules.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to UX > Format Rules.  



Click + New Format Rule.
Choose the table containing the Drawing, Image, Signature, or Thumbnail column in the For this data field.
Select one or more columns to format in the Format these columns and actions field.
Choose one of the following for Image format under Template format:
Large: Display as 1000 x 1000 image
Medium: Display as a 600 x 600 image
Small: Display as a 200 x 200 image
Tiny:  Display as a 50 x 50 image
Text: Display as a URL

Link to an image
To link to an image, use a hyperlink expression.
   Was this helpful?How can we improve it?YesNoSubmit   

 Display Address, LatLong, and XY values in templatesDisplay Address, LatLong, and XY values in your templates as described in the following sections:

Display an Address in a template
Display a LatLong in a template
Display an XY in a template

Display an Address in a template
Display an Address in a template by specifying its name.
For example, if your Address column is called Home Address, you can display it as follows:

Name: <<[Name]>>
Address: <<[Home Address]>>
 
An Address is displayed as text by default. You can create a format rule to control how the Address is displayed.
To create a format rule to control the display of the Address column:

Open the AppSheet editor.
Go to App > Format Rules.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to UX > Format Rules.  



Click + New Format Rule.
Choose the table containing the Address in the For this data field.
Select the Address column in the Format these columns and actions field.
    For example, HomeAddress or _ComputedAddress.
Choose one of the following for Image format under Template format:
Large: Display as 1000 x 1000 image
Medium: Display as a 600 x 600 image
Small: Display as a 200 x 200 image
Tiny:  Display as a 50 x 50 image
Text: Display as a URL

Display a LatLong in a template
Display a LatLong in a template by specifying its name.
For example, if your LatLong column is called Location, you can display it as follows:

Name: <<[Name]>>
Location: <<[Location]>>
 
A LatLong is displayed as a Google Map by default. You can control how the LatLong is displayed using a format rule.
To create a format rule to control how the LatLong is displayed:

Open the AppSheet editor.
Go to App > Format Rules.
    

 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to UX > Format Rules.  



Click New Format Rule.
Choose the table containing the LatLong column in the For this data field.
Select the LatLong column name in the Format these columns and actions field.
Choose one of the following for Image format under Template format:
Large: Display as 1000 x 1000 image
Medium: Display as a 600 x 600 image
Small: Display as a 200 x 200 image
Tiny: Display as a 50 x 50 image
Text: Display as a URL

Display an XY value in a template
You can display an XY value in a template by specifying its name. An XY is always displayed as text in templates.
For example, if your XY column is called FloorPlan, you can display it as follows:

Name: <<[Name]>>
Floor Plan: <<[FloorPlan]>>

 
Note: We hope to provide you with the option of displaying an XY value as an image in the future.
   Was this helpful?How can we improve it?YesNoSubmit   

 Upload .txt templates to Google DriveThe Convert uploaded files to Google Docs editor format Google Drive option is designed to make it easy for Microsoft Office users to convert to Google Docs, Google Sheets, and Google Slides. For more information, see How to Convert Office Files to Google Docs on Your Chromebook. However, when this option is enabled it will prevent .txt template files from uploading to Google Drive correctly.

  When the Convert uploaded files to Google Docs editor format option is enabled, Google Drive automatically converts uploaded files of type .doc, .docx, .html, .txt, or .rtf to Google Docs format. If you upload a .txt template file while this Google Drive option is enabled, it will convert the uploaded template file from .txt to Google Docs format. This will make the template file unusable as a .txt template file.
To avoid this problem you must disable the Convert uploaded files to Google Docs editor format Google Drive option before you upload .txt template files.

Open the Chrome browser
Enter https://drive.google.com/drive/my-drive in the navigation bar and press Enter.
Click the Settings gear icon on the top right.
Select Settings.
Deselect Convert uploaded files to Google Docs editor format.
Click Done.

   Was this helpful?How can we improve it?YesNoSubmit   

 Troubleshoot custom fonts in templates
Troubleshoot custom fonts in your Google Docs template file, as described in the following sections:

How custom fonts are displayed by AppSheet
Verify all custom fonts are present in the HTML
Remove all custom fonts from your Google Docs template

Note: Some customers have reported problems when using custom fonts in templates. The PDF service sometimes fails to convert the HTML file to PDF correctly when custom fonts are present. The resulting PDF document may not display the text using the custom font. If you experience this problem, we recommend remove all custom fonts from your Google Docs template.
How custom fonts are displayed by AppSheet
When you use custom fonts like Libre Barcode 128 and Libre Barcode 39 Extended Text, the HTML file that is returned when AppSheet reads the Google Docs template includes an import url that refers to these custom fonts.
When your event fires, AppSheet does the following:

Reads the Google Doc file in HTML format.
Creates the attachment from the HTML template file.
Converts the resulting attachment from HTML to PDF by calling the HTML-to-PDF web conversion service.

The HTML-to-PDF web conversion service relies on the HTML file containing the right import url value. The import url must refer to all of the custom fonts that you are using in your PDF attachment. If the import url is missing one or more of your custom fonts, the data values in the PDF attachment file are displayed in the default font rather than in the custom font. See Verify all custom fonts are present.
Verify all custom fonts are present in the HTML
To verify that the HTML file returned by Google Doc contains the right custom fonts:

Open your Google Docs template file in Google Docs.
On the Google Docs File menu select Download > Web Page (.html zipped).
Google Docs will export your Google Docs template file as a .zip file and display the zipped file name in a tab at the bottom of the browser.
Click the ^ symbol to the right of the .zip file name in the tab at the bottom of the browser. Select Show in Finder.
Unzip the .zip file to access your template in HTML format.
Right click on the .html file, select Rename, and change the file extension from .html to .txt.
Right click on the renamed template .txt file and select Edit.
Near the top of the template file, look for @import url. It should look something like the following:
@import url('https://themes.googleusercontent.com/fonts/css?kit=mJ_rGOyyL62_i4eysdBvxCC0kCcps6hmr3Uub3CurLj6HJltGXvViurXJL6xt9sxwzYVTjVaNNEx2pDT4aBU4J6Nc2zktOcTrnnZfLDyCt73rGVtsTkPsbDajuO5ueQw')
Copy the url value starting from https: until just before the closing single quote, paste it into the address line of your browser, and press Enter.
Content similar to the following is displayed.
    Make sure all of the custom fonts you are using are listed.

/* latin */
@font-face {
font-family: 'Libre Barcode 128';
font-style: normal;
font-weight: 400;
src: local('Libre Barcode 128 Regular'), local('LibreBarcode128-Regular'), url(https://fonts.gstatic.com/s/librebarcode128/v8/cIfnMbdUsUoiW3O_hVviCwVjuLtXeK_H9AI.woff2) format('woff2');
unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
/* latin */
@font-face {
font-family: 'Libre Barcode 39 Extended Text';
font-style: normal;
font-weight: 400;
src: local('Libre Barcode 39 Extended Text'), local('LibreBarcode39ExtendedText-Regular'), url(https://fonts.gstatic.com/s/librebarcode39extendedtext/v7/eLG1P_rwIgOiDA7yrs9LoKaYRVLQ1YldrrOnnL7xPO4jNP6Me7gj.woff2) format('woff2');
unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
/* latin */
@font-face {
font-family: 'Libre Barcode 39 Text';
font-style: normal;
font-weight: 400;
src: local('Libre Barcode 39 Text Regular'), local('LibreBarcode39Text-Regular'), url(https://fonts.gstatic.com/s/librebarcode39text/v8/sJoa3KhViNKANw_E3LwoDXvs5Un0HQ1vT-0H0h5K.woff2) format('woff2');
unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+
2212, U+2215, U+FEFF, U+FFFD;
}
Remove all custom fonts from your Google Docs template
If you experience issues, you may want to remove all custom fonts from your Google Docs template.
To remove all custom fonts from your Google Docs template:

Open your application in the Editor.
Go to the Automation > Tasks tab in the Editor.
Expand the appropriate task.
Find the template property.
Click View adjacent to the template name. This will open the template in Google Docs.
From the Google Docs Font menu, uncheck all custom fonts.
Use the procedure described in Verify all custom fonts are present to ensure that no custom fonts remain.

   Was this helpful?How can we improve it?YesNoSubmit   

 Use CONCATENATE(), Ampersand, and text expressions in templatesThis section describes how to use CONCATENATE() function and Ampersand (&) operator expressions in your email templates. For information about using text expressions in templates, see Text expressions.
You can include CONCATENATE() functions or Ampersand (&) operators in your template to combine two or more values to yield a single text value.
An Ampersand operator is just a synonym for the CONCATENATE() function. When you specify an Ampersand operator in an expression, AppSheet converts that portion of the expression into a CONCATENATE() function. Using an Ampersand operator is simply a compact way of specifying the CONCATENATE() function.
For example, the following two expressions are equivalent:

<<CONCATENATE("Time: ",[MeetingTime], " (Uses CONCATENATE)")>>
<<"Time: "&[MeetingTime]&" (Uses &)">>
 
If you refer to a field in a CONCATENATE() expression, the value of that field is not formatted. Because AppSheet uses the CONCATENATE() function when combining two or more record key field values to yield the compound key value for the record, the resulting key value must contain the entire unformatted value of each key field.
For example, if the CONCATENATE() expression contains a MeetingTime time field that specifies Ignore seconds "On", the time value is displayed in full; the Ignore seconds setting is not honored.
For example, the following:

<<CONCATENATE("Time: ",[MeetingTime], " (Uses CONCATENATE)")>>
<<"Time: "&[MeetingTime]&" (Uses &)">>
Results in :

Time: 3:30:45 PM (Uses CONCATENATE)
Time: 3:30:45 PM (Uses &)
 
You can force a field value to be formatted by enclosing the field value in a TEXT() function.
For example:

<<CONCATENATE("Time: ",TEXT([MeetingTime]), " (Uses CONCATENATE)")>>
<<"Time: "&TEXT([MeetingTime])&" (Uses &)">>
Results in:

Time: 3:30 PM (Uses CONCATENATE)
Time: 3:30 PM (Uses &)
   Was this helpful?How can we improve it?YesNoSubmit   

 Overview of document processingAppSheet Automation can extract and validate content from documents, like invoices and receipts, using Google Cloud's state-of-the-art Document AI. 
Watch a demo
Learn about intelligent document processing with AppSheet Automation. 

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

Intelligent document processing with AppSheet Automation
Document processing tasks
AppSheet supports the following document processing tasks:




Tasks


Description




Extract content from documents in a folder


Extract content from documents, such as PDF or image files, using AppSheet document parsing.




Compile folder contents


Collect a list of files and metadata from a folder in Google Drive to use within your application.




About the folder data source
The folder data source can be either implicitly used as part of document parsing and extraction or explicitly used as the data source for collecting folder contents. For example, a "user manual view" in an application can explicitly use a Google Drive folder data source containing documents that can be viewed, updated, added, or deleted within an application.
Folders are fixed schema tables, where the attributes (table columns) are the properties of files (such as name, size, last modified at, and so on) for generic files or document-specific content (for example, invoices, receipts, or w9 forms), and the entries (table rows) are the files themselves. In this release, if a folder is specified as a particular document type each folder should contain files of the same document type, although the files can vary in mime and extension type.
Note: Supported extensions include .tiff, .gif, .pdf, .jpg, and .png. Folders containing mixed document types can be used for document viewing and uploading inside applications, but cannot be automatically extracted.
   Was this helpful?How can we improve it?YesNoSubmit   

 Extract content from documents in a folderExtract content from documents, such as PDF or image files, using AppSheet document parsing as described to the following sections:

What is document parsing?
Use document parsing

See also Overview of document processing.
What is document parsing?
Document parsing with AppSheet enables you to extract content from documents using Google’s Document AI solution.
You can parse the following document types:

Invoices
Receipts
W-9 forms

The documents can be saved using one of the following file formats: PDF, GIF, PNG, JPEG, and TIFF.
AppSheet automation extracts a document's content based on the document type, regardless of MIME type or extension type (such as, .pdf, .docs, .png). If a document in the folder is not of the specified type or format, it will not be processed.
Notes:

AppSheet only supports parsing documents stored on Google Drive.
Additional document types and formats will be supported as Google's Document AI solution supports them.

How AppSheet measures extraction confidence
In some cases, source documents may have defects that result in extraction accuracy that is less than 100%. For example, some documents may be based on scanned sources, utilize complex images, use unusual fonts, or have spelling errors or omissions.
The extraction service includes an extraction confidence score that is used by the automation process to determine if the extracted data should be manually reviewed. If the extraction confidence score falls below the configured threshold, an exception flow is triggered to involve manual review by a human. For more information, see Monitor document parsing.
Note: The extraction confidence threshold is not configurable at this time.
How AppSheet parses monetary content
For documents that include a monetary column, the amount and currency code are extracted into two columns to provide more flexibility for using the extracted data. For example, you might support a centralized repository of documents that span multiple currencies and that allow for customizing downstream processes. Each document is expected to use a single currency; if there appears to be inconsistencies in the extraction, they are flagged.
Use document parsing
To use document parsing to extract content from documents:

Open the app in the editor.
 Go to Data and click + in the top header of the Data panel.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Data > Tables and click + New Table.  



Select Google Drive Documents in the Add data from… dialog.
Under Documents, select one of the supported document types: Invoices, Receipts, or W-9 forms.
Navigate to the folder on Google Drive that contains the documents and click Select.
    The Source Invoice Folder and Table Name fields are displayed and populated based on the folder you select.
Click Change to edit the Source Invoice Folder, as required.
Edit the Table name, as required.
    The table name defaults to the folder name.
Click Create Table.
    The document tables are created. For invoice and receipt documents, a second table is generated to capture the line items. For more information, see Table schemas for document parsing.
Click View data in the table header to view the extracted content in your new document table.

Only documents with SUCCESS document parsing status will be listed in your app table. Documents that were not successful or registered a low confidence level will be logged to the automation monitoring and audit logs. For more information, see Monitor document parsing.
   Was this helpful?How can we improve it?YesNoSubmit   

 Compile folder contentsAppSheet enables you to compile a list of files and metadata from a folder in Google Drive. Then, you can expose the files directly in your app and use the file metadata in your application logic, such as filtering by file name, date modified, and so on.
To compile a list of files and metadata from a folder in Google Drive:

Open the app in the editor.
 Go to Data and click + in the top header of the Data panel.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Data > Tables and click + New Table.  



Select Documents on Google Drive in the Get data from… dialog.
Under Folder, click Collection of files.
Navigate to the folder on Google Drive that contains the documents and click Select.
    The Source File Folder and Table Name fields are displayed and populated based on the folder you select. Click Change to edit the Source File Folder, if required
Edit the Table name, if required.
    The table name defaults to the folder name.
Click Create Table.
    The document table is created.
Click View data in the table header to view the file list and metadata in your new document table.

The following table summarizes the information extracted for each file




Column


Format




_ID (Key)


Text




Path


Text




File


File




CreateTime


DateTime




LastModifiedBy


Email




MimeType


Text




   Was this helpful?How can we improve it?YesNoSubmit   

 Table schemas for document parsing
For document extraction to work properly, the table schemas for document parsing must match the content fields to be extracted. As a result, the tables schemas for document parsing are immutable and can't be altered by app editors.
A user may still edit the UX of the table views to suit their needs but must ensure that required fields are present for the creation of entries into these tables.
The following sections summarize the schemas for the tables that are generated during document processing, based on the document type.


Invoice table summary


Receipt table summary


W-9 Form table summary


Line items table summary


Invoice table summary
The following table summarizes the information extracted for each invoice.




Column


Format


Column


Format




_RowNumber


Number


Supplier Address


Text




_ID


Text


Receiver Name


Text




File


File


Receiver Address


Text




Invoice Number


Text


Ship To Name


Text




Invoice Date


Date


Ship To Address


Text




Total Amount


Decimal


Remit to Name


Text




Net Amount


Decimal


Remit to Address


Text




Total Tax Amount


Decimal


Carrier


Text




Currency Code


Text


Delivery Date


Text




Purchase Order


Text


Supplier Tax Id


Text




Due Date


Date


Customer Tax Id


Text




Payment Terms


Text


Related receipts_line_items


List




Supplier Name


Text


 


 




Receipt table summary
The following table summarizes the information extracted for each receipt.




Column


Format


Column


Format




_RowNumber


Number


Supplier Name


Text




_ID (Key)


Text


Supplier Address


Text




File


File


Supplier City


Text




Receipt Date


Date


Purchase Time


Text




Total Amount


Decimal


Related receipts name_line_items


List




Currency Code


Text


 


 




W-9 Form table summary
The following table summarizes the information extracted for each W-9 form.




Column


Format


Column


Format




_RowNumber


Number


EIN


Date




_ID (Key)


Text


Federal Tax Classification


Text




File


File


LLC Tax Classification


Text




Name


Text


Exempt FATCA Code


Text




Address


Text


Exempt Payee Code


Text




City


Text


Account Numbers


Text




State


Text


Form Revision Date


Text




Zip


Text


Has Signature


Yes/No




Business Name


Text


Has Signature Date


Yes/No




SSN


Text


 


 




Line items table summary
The following table summarizes the information extracted for each line item in an invoice or receipt.




Column


Format


Notes




_RowNumber


Number

 



_ID


Ref

 



Amount


Decimal

 



Description


Text

 



Product Code


Text

 



Unit Price


Decimal


Invoice only




Quantity


Number


Invoice only




Unit


Text


Invoice only




   Was this helpful?How can we improve it?YesNoSubmit   

 External eventing with Google SheetsTo set up a bot that triggers a process when a user changes data in a Google Sheet, perform the following steps:

Configure AppSheet Events on Google Sheets to allow a data change event to be sent to your app when a user changes data.
Create the data change events in your AppSheet app that are triggered by Google Sheets.


Note: External data change events are triggered only when a user changes data in a Google Sheet, not when the data is changed programmatically, for example, by an app or an Apps Script. 

See Troubleshoot for tips on resolving issues.
Get started
The following video demonstrates how to set up external eventing with Google Sheets, as described in this section.

Note: The concepts in this video are still valid, though the AppSheet app editor UI has changed since it was recorded.

AppSheet Automation: External eventing with Google Sheets
Configure AppSheet events on Google Sheets
To configure AppSheet Events on Google Sheets to allow a data change event to be sent to your app from the sheets when a user changes data:

Install the AppSheet Events Add-Onfrom the Add-On marketplace.
Open a spreadsheet and select Extensions > AppSheet Events > Enable for document to enable the add-on.
Enable Add-ons> AppSheet Events > Turn events on/off > sheet for each sheet from which you want to send events.



In addition, you can enable the add-on for response sheets from Google Forms.
Create the data change events in your AppSheet app
To create the data change events in your AppSheet app to be triggered by Google Sheets:

Open the app in the editor.
 Go to Data, click + in the top header of the Data panel, and add tables for the Google Sheets that you enabled to send events in the previous section.



 We've made some improvements to the app editor.
You are opted in to the new editor by default, but you can switch back to the legacy editor at any time.

If you are using the legacy navigation

Go to Data > Tables, click + New Table, and add tables for the Google Sheets that you enabled to send events in the previous section.



Select Data > Table and add tables for the Google Sheets that you enabled to send events in the previous section.
Select Automation > Events and create an event that triggers on Data Change.
    You can configure the event for adds or deletions only, as required. For example, the following event triggers when content is added to the employees table.


Create a bot that uses that event.

When you modify the sheet in Google Sheet, you should see the event trigger after a few seconds. For Google Forms, new rows added to the response sheet through direct interaction with the Google Form can also trigger events.

Note: Third-party (like IFTTT) or scripted interactions will not trigger events.


To learn more about events, see Events: The Essentials.
Troubleshoot
If the event hasn't triggered the bot after a few seconds, check that the event was received in the Automation Monitor. See Monitor automation for more information. You can also try removing and re-adding the event in the automation.
If the event doesn't show up, verify your table selection in Google Sheets and that you are logged into a Google account that has access to both the Google spreadsheet and the AppSheet app (from the Users tab).
If the event did show up but did not run, check that your Table, Condition, and data change type are all correct in the event configuration in AppSheet.
   Was this helpful?How can we improve it?YesNoSubmit   

